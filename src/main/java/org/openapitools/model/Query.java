package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.model.FacetColumnRequest;
import org.openapitools.model.SortItem;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * Query
 */
@ApiModel(description = "Query")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "limit", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = DownloadFromTableRequest.class, name = "DownloadFromTableRequest"),
})

public class Query   {
  @JsonProperty("additionalFilters")
  @Valid
  private List<Object> additionalFilters = null;

  @JsonProperty("includeEntityEtag")
  private Boolean includeEntityEtag;

  @JsonProperty("limit")
  private Integer limit;

  @JsonProperty("offset")
  private Integer offset;

  @JsonProperty("selectedFacets")
  @Valid
  private List<FacetColumnRequest> selectedFacets = null;

  @JsonProperty("sort")
  @Valid
  private List<SortItem> sort = null;

  @JsonProperty("sql")
  private String sql;

  public Query additionalFilters(List<Object> additionalFilters) {
    this.additionalFilters = additionalFilters;
    return this;
  }

  public Query addAdditionalFiltersItem(Object additionalFiltersItem) {
    if (this.additionalFilters == null) {
      this.additionalFilters = new ArrayList<>();
    }
    this.additionalFilters.add(additionalFiltersItem);
    return this;
  }

  /**
   * Appends additional filters to the SQL query. These are applied before facets. Filters within the list have an AND relationship. If a WHERE clause already exists on the SQL query or facets are selected, it will also be ANDed with the query generated by these additional filters. 
   * @return additionalFilters
  */
  @ApiModelProperty(value = "Appends additional filters to the SQL query. These are applied before facets. Filters within the list have an AND relationship. If a WHERE clause already exists on the SQL query or facets are selected, it will also be ANDed with the query generated by these additional filters. ")


  public List<Object> getAdditionalFilters() {
    return additionalFilters;
  }

  public void setAdditionalFilters(List<Object> additionalFilters) {
    this.additionalFilters = additionalFilters;
  }

  public Query includeEntityEtag(Boolean includeEntityEtag) {
    this.includeEntityEtag = includeEntityEtag;
    return this;
  }

  /**
   * Optional, default false. When true, a query results against views will include the Etag of each entity in the results. Note: The etag is necessary to update Entities in the view. 
   * @return includeEntityEtag
  */
  @ApiModelProperty(value = "Optional, default false. When true, a query results against views will include the Etag of each entity in the results. Note: The etag is necessary to update Entities in the view. ")


  public Boolean getIncludeEntityEtag() {
    return includeEntityEtag;
  }

  public void setIncludeEntityEtag(Boolean includeEntityEtag) {
    this.includeEntityEtag = includeEntityEtag;
  }

  public Query limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The optional limit to the results
   * @return limit
  */
  @ApiModelProperty(required = true, value = "The optional limit to the results")
  @NotNull


  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public Query offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The optional offset into the results
   * @return offset
  */
  @ApiModelProperty(value = "The optional offset into the results")


  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public Query selectedFacets(List<FacetColumnRequest> selectedFacets) {
    this.selectedFacets = selectedFacets;
    return this;
  }

  public Query addSelectedFacetsItem(FacetColumnRequest selectedFacetsItem) {
    if (this.selectedFacets == null) {
      this.selectedFacets = new ArrayList<>();
    }
    this.selectedFacets.add(selectedFacetsItem);
    return this;
  }

  /**
   * The selected facet filters.
   * @return selectedFacets
  */
  @ApiModelProperty(value = "The selected facet filters.")

  @Valid

  public List<FacetColumnRequest> getSelectedFacets() {
    return selectedFacets;
  }

  public void setSelectedFacets(List<FacetColumnRequest> selectedFacets) {
    this.selectedFacets = selectedFacets;
  }

  public Query sort(List<SortItem> sort) {
    this.sort = sort;
    return this;
  }

  public Query addSortItem(SortItem sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

  /**
   * To sort values
   * @return sort
  */
  @ApiModelProperty(value = "To sort values")

  @Valid

  public List<SortItem> getSort() {
    return sort;
  }

  public void setSort(List<SortItem> sort) {
    this.sort = sort;
  }

  public Query sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * The SQL query string.
   * @return sql
  */
  @ApiModelProperty(value = "The SQL query string.")


  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.additionalFilters, query.additionalFilters) &&
        Objects.equals(this.includeEntityEtag, query.includeEntityEtag) &&
        Objects.equals(this.limit, query.limit) &&
        Objects.equals(this.offset, query.offset) &&
        Objects.equals(this.selectedFacets, query.selectedFacets) &&
        Objects.equals(this.sort, query.sort) &&
        Objects.equals(this.sql, query.sql);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFilters, includeEntityEtag, limit, offset, selectedFacets, sort, sql);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    
    sb.append("    additionalFilters: ").append(toIndentedString(additionalFilters)).append("\n");
    sb.append("    includeEntityEtag: ").append(toIndentedString(includeEntityEtag)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    selectedFacets: ").append(toIndentedString(selectedFacets)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

