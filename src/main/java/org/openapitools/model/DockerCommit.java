package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * Metadata for an image in a Docker Repository: A digest and optional tag.
 */
@ApiModel(description = "Metadata for an image in a Docker Repository: A digest and optional tag.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
public class DockerCommit   {
  @JsonProperty("createdOn")
  private String createdOn;

  @JsonProperty("digest")
  private String digest;

  @JsonProperty("tag")
  private String tag;

  public DockerCommit createdOn(String createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * The date this commit was created.
   * @return createdOn
  */
  @ApiModelProperty(value = "The date this commit was created.")


  public String getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(String createdOn) {
    this.createdOn = createdOn;
  }

  public DockerCommit digest(String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * A unique id for the commit, generated by hashing its content.
   * @return digest
  */
  @ApiModelProperty(value = "A unique id for the commit, generated by hashing its content.")


  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }

  public DockerCommit tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * A user supplied name for a specific version of a repository.
   * @return tag
  */
  @ApiModelProperty(value = "A user supplied name for a specific version of a repository.")


  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockerCommit dockerCommit = (DockerCommit) o;
    return Objects.equals(this.createdOn, dockerCommit.createdOn) &&
        Objects.equals(this.digest, dockerCommit.digest) &&
        Objects.equals(this.tag, dockerCommit.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdOn, digest, tag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockerCommit {\n");
    
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

