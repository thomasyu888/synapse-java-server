/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.IdList;
import org.openapitools.model.ListWrapperOfUserProfile;
import org.openapitools.model.UserProfile;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "userProfile", description = "the userProfile API")
public interface UserProfileApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /userProfile : Get the profile of the caller (my profile).
     * Get the profile of the caller (my profile). &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Private user profile fields will be returned.&lt;/p&gt;&#39; 
     *
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the profile of the caller (my profile).", nickname = "getMyOwnUserProfile", notes = "Get the profile of the caller (my profile). <p><b>Note:</b> Private user profile fields will be returned.</p>' ", response = UserProfile.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "User Profile Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserProfile.class) })
    @GetMapping(
        value = "/userProfile",
        produces = { "application/json" }
    )
    default ResponseEntity<UserProfile> getMyOwnUserProfile() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"RStudioUrl\" : \"...\", \"company\" : \"...\", \"createdOn\" : \"...\", \"displayName\" : \"...\", \"email\" : \"...\", \"emails\" : [ \"...\", \"...\" ], \"etag\" : \"...\", \"firstName\" : \"...\", \"industry\" : \"...\", \"lastName\" : \"...\", \"location\" : \"...\", \"notificationSettings\" : { \"markEmailedMessagesAsRead\" : true, \"sendEmailNotifications\" : true }, \"openIds\" : [ \"...\", \"...\" ], \"ownerId\" : \"...\", \"position\" : \"...\", \"preferences\" : [ { \"concreteType\" : \"...\", \"name\" : \"...\" }, { \"concreteType\" : \"...\", \"name\" : \"...\" } ], \"profilePicureFileHandleId\" : \"...\", \"summary\" : \"...\", \"teamName\" : \"...\", \"url\" : \"...\", \"userName\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /userProfile/{profileId} : Get the profile of a specified user.
     * Get the profile of a specified user. &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Private fields (e.g. \&quot;rStudioUrl\&quot;) are omitted unless the requester is the profile owner or an administrator.&lt;/p&gt;&#39; 
     *
     * @param profileId The ID of the Synapse user. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the profile of a specified user.", nickname = "getUserProfile", notes = "Get the profile of a specified user. <p><b>Note:</b> Private fields (e.g. \"rStudioUrl\") are omitted unless the requester is the profile owner or an administrator.</p>' ", response = UserProfile.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "User Profile Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserProfile.class) })
    @GetMapping(
        value = "/userProfile/{profileId}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserProfile> getUserProfile(@ApiParam(value = "The ID of the Synapse user.",required=true) @PathVariable("profileId") String profileId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"RStudioUrl\" : \"...\", \"company\" : \"...\", \"createdOn\" : \"...\", \"displayName\" : \"...\", \"email\" : \"...\", \"emails\" : [ \"...\", \"...\" ], \"etag\" : \"...\", \"firstName\" : \"...\", \"industry\" : \"...\", \"lastName\" : \"...\", \"location\" : \"...\", \"notificationSettings\" : { \"markEmailedMessagesAsRead\" : true, \"sendEmailNotifications\" : true }, \"openIds\" : [ \"...\", \"...\" ], \"ownerId\" : \"...\", \"position\" : \"...\", \"preferences\" : [ { \"concreteType\" : \"...\", \"name\" : \"...\" }, { \"concreteType\" : \"...\", \"name\" : \"...\" } ], \"profilePicureFileHandleId\" : \"...\", \"summary\" : \"...\", \"teamName\" : \"...\", \"url\" : \"...\", \"userName\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /userProfile/{profileId}/image/preview : Get the actual URL of the image file associated with a user&#39;s profile.
     * Get the actual URL of the image file associated with a user&#39;&#39;s profile. &lt;p&gt; Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. &lt;/p&gt; 
     *
     * @param profileId The ID of the Synapse user. (required)
     * @param redirect When set to false, the URL will be returned as text/plain instead of redirecting.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the actual URL of the image file associated with a user's profile.", nickname = "imagePreviewRedirectUrlForUser", notes = "Get the actual URL of the image file associated with a user''s profile. <p> Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. </p> ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "User Profile Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/userProfile/{profileId}/image/preview",
        produces = { "application/json" }
    )
    default ResponseEntity<String> imagePreviewRedirectUrlForUser(@ApiParam(value = "The ID of the Synapse user.",required=true) @PathVariable("profileId") String profileId,@ApiParam(value = "When set to false, the URL will be returned as text/plain instead of redirecting. ") @Valid @RequestParam(value = "redirect", required = false) Boolean redirect) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /userProfile/{profileId}/image : Get the actual URL of the image file associated with a user&#39;s profile.
     * Get the actual URL of the image file associated with a user&#39;s profile. &lt;p&gt; Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. &lt;/p&gt; 
     *
     * @param profileId The ID of the Synapse user. (required)
     * @param redirect When set to false, the URL will be returned as text/plain instead of redirecting.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the actual URL of the image file associated with a user's profile.", nickname = "imageRedirectUrlForUser", notes = "Get the actual URL of the image file associated with a user's profile. <p> Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. </p> ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "User Profile Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/userProfile/{profileId}/image",
        produces = { "application/json" }
    )
    default ResponseEntity<String> imageRedirectUrlForUser(@ApiParam(value = "The ID of the Synapse user.",required=true) @PathVariable("profileId") String profileId,@ApiParam(value = "When set to false, the URL will be returned as text/plain instead of redirecting. ") @Valid @RequestParam(value = "redirect", required = false) Boolean redirect) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /userProfile : Batch get UserGroupHeaders.
     * Batch get UserGroupHeaders. This fetches information about a collection of users or groups, specified by Synapse IDs.&#39; 
     *
     * @param idList IDs are specified as request parameters at the end of the URL, separated by commas. For example: ids&#x3D;1001,819  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Batch get UserGroupHeaders.", nickname = "listUserProfiles", notes = "Batch get UserGroupHeaders. This fetches information about a collection of users or groups, specified by Synapse IDs.' ", response = ListWrapperOfUserProfile.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "User Profile Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ListWrapperOfUserProfile.class) })
    @PostMapping(
        value = "/userProfile",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ListWrapperOfUserProfile> listUserProfiles(@ApiParam(value = "IDs are specified as request parameters at the end of the URL, separated by commas. For example: ids=1001,819 "  )  @Valid @RequestBody(required = false) IdList idList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"effectiveSchema\" : \"...\", \"list\" : [ { \"RStudioUrl\" : \"...\", \"company\" : \"...\", \"createdOn\" : \"...\", \"displayName\" : \"...\", \"email\" : \"...\", \"emails\" : [ \"...\", \"...\" ], \"etag\" : \"...\", \"firstName\" : \"...\", \"industry\" : \"...\", \"lastName\" : \"...\", \"location\" : \"...\", \"notificationSettings\" : { \"markEmailedMessagesAsRead\" : true, \"sendEmailNotifications\" : true }, \"openIds\" : [ \"...\", \"...\" ], \"ownerId\" : \"...\", \"position\" : \"...\", \"preferences\" : [ { \"concreteType\" : \"...\", \"name\" : \"...\" }, { \"concreteType\" : \"...\", \"name\" : \"...\" } ], \"profilePicureFileHandleId\" : \"...\", \"summary\" : \"...\", \"teamName\" : \"...\", \"url\" : \"...\", \"userName\" : \"...\" }, { \"RStudioUrl\" : \"...\", \"company\" : \"...\", \"createdOn\" : \"...\", \"displayName\" : \"...\", \"email\" : \"...\", \"emails\" : [ \"...\", \"...\" ], \"etag\" : \"...\", \"firstName\" : \"...\", \"industry\" : \"...\", \"lastName\" : \"...\", \"location\" : \"...\", \"notificationSettings\" : { \"markEmailedMessagesAsRead\" : true, \"sendEmailNotifications\" : true }, \"openIds\" : [ \"...\", \"...\" ], \"ownerId\" : \"...\", \"position\" : \"...\", \"preferences\" : [ { \"concreteType\" : \"...\", \"name\" : \"...\" }, { \"concreteType\" : \"...\", \"name\" : \"...\" } ], \"profilePicureFileHandleId\" : \"...\", \"summary\" : \"...\", \"teamName\" : \"...\", \"url\" : \"...\", \"userName\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /userProfile : Update your own profile.
     * Update your own profile  &lt;p&gt;&lt;b&gt;Note: &lt;/b&gt; The user associated with the UserProfile \&quot;ownerId\&quot; must match the identity of the caller, otherwise an Unauthorized response will occur.&lt;/p&gt; 
     *
     * @param userProfile  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update your own profile.", nickname = "updateUserProfile", notes = "Update your own profile  <p><b>Note: </b> The user associated with the UserProfile \"ownerId\" must match the identity of the caller, otherwise an Unauthorized response will occur.</p> ", response = UserProfile.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "User Profile Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserProfile.class) })
    @PutMapping(
        value = "/userProfile",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserProfile> updateUserProfile(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UserProfile userProfile) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"RStudioUrl\" : \"...\", \"company\" : \"...\", \"createdOn\" : \"...\", \"displayName\" : \"...\", \"email\" : \"...\", \"emails\" : [ \"...\", \"...\" ], \"etag\" : \"...\", \"firstName\" : \"...\", \"industry\" : \"...\", \"lastName\" : \"...\", \"location\" : \"...\", \"notificationSettings\" : { \"markEmailedMessagesAsRead\" : true, \"sendEmailNotifications\" : true }, \"openIds\" : [ \"...\", \"...\" ], \"ownerId\" : \"...\", \"position\" : \"...\", \"preferences\" : [ { \"concreteType\" : \"...\", \"name\" : \"...\" }, { \"concreteType\" : \"...\", \"name\" : \"...\" } ], \"profilePicureFileHandleId\" : \"...\", \"summary\" : \"...\", \"teamName\" : \"...\", \"url\" : \"...\", \"userName\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
