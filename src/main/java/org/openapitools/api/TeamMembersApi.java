/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Count;
import org.openapitools.model.PaginatedResultsOfTeamMember;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "teamMembers", description = "the teamMembers API")
public interface TeamMembersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /teamMembers/count/{id} : Retrieve the number of Team members matching the supplied name prefix.
     * Retrieve the number of Team members matching the supplied name prefix.  If the prefix is omitted then the number of members in the team is returned.  &lt;br&gt;  Note:  This service has JSONP support:  If the request parameter \&quot;callback&#x3D;jsMethod\&quot; is included (where &#39;jsMethod&#39; is any function name you wish), then the response body will be wrapped in \&quot;jsMethod(...);\&quot;. 
     *
     * @param id the ID of the Team. (required)
     * @param fragment a prefix of the user&#39;s first or last name or email address  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve the number of Team members matching the supplied name prefix.", nickname = "getTeamMemberCount", notes = "Retrieve the number of Team members matching the supplied name prefix.  If the prefix is omitted then the number of members in the team is returned.  <br>  Note:  This service has JSONP support:  If the request parameter \"callback=jsMethod\" is included (where 'jsMethod' is any function name you wish), then the response body will be wrapped in \"jsMethod(...);\". ", response = Count.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Count.class) })
    @GetMapping(
        value = "/teamMembers/count/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Count> getTeamMemberCount(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = "a prefix of the user's first or last name or email address ") @Valid @RequestParam(value = "fragment", required = false) String fragment) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"count\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /teamMembers/{id} : Retrieve a paginated list of Team members matching the supplied name prefix.
     * Retrieve a paginated list of Team members matching the supplied name prefix.  If the prefix is omitted then all members are returned.  &lt;br&gt;  Note:  This service has JSONP support:  If the request parameter \&quot;callback&#x3D;jsMethod\&quot; is included (where &#39;jsMethod&#39; is any function name you wish), then the response body will be wrapped in \&quot;jsMethod(...);\&quot;. 
     *
     * @param id the ID of the Team. (required)
     * @param fragment a prefix of the user&#39;s first or last name or email address (optional)
     * @param limit the maximum number of members to return. (optional, default to 10)
     * @param memberType the type of team user to retrieve (optional, default to ALL)
     * @param offset the starting index of the returned results (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve a paginated list of Team members matching the supplied name prefix.", nickname = "getTeamMembers", notes = "Retrieve a paginated list of Team members matching the supplied name prefix.  If the prefix is omitted then all members are returned.  <br>  Note:  This service has JSONP support:  If the request parameter \"callback=jsMethod\" is included (where 'jsMethod' is any function name you wish), then the response body will be wrapped in \"jsMethod(...);\". ", response = PaginatedResultsOfTeamMember.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfTeamMember.class) })
    @GetMapping(
        value = "/teamMembers/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfTeamMember> getTeamMembers(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = "a prefix of the user's first or last name or email address") @Valid @RequestParam(value = "fragment", required = false) String fragment,@Min(10) @Max(50) @ApiParam(value = "the maximum number of members to return.", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@ApiParam(value = "the type of team user to retrieve", allowableValues = "ADMIN, ALL, MEMBER", defaultValue = "ALL") @Valid @RequestParam(value = "memberType", required = false, defaultValue="ALL") String memberType,@Min(0)@ApiParam(value = "the starting index of the returned results", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"isAdmin\" : true, \"member\" : { \"displayName\" : \"...\", \"email\" : \"...\", \"firstName\" : \"...\", \"isIndividual\" : true, \"lastName\" : \"...\", \"ownerId\" : \"...\", \"userName\" : \"...\" }, \"teamId\" : \"...\" }, { \"isAdmin\" : true, \"member\" : { \"displayName\" : \"...\", \"email\" : \"...\", \"firstName\" : \"...\", \"isIndividual\" : true, \"lastName\" : \"...\", \"ownerId\" : \"...\", \"userName\" : \"...\" }, \"teamId\" : \"...\" } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
