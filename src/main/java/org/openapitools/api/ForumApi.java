/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import org.openapitools.model.Forum;
import org.openapitools.model.PaginatedIds;
import org.openapitools.model.PaginatedResultsOfDiscussionThreadBundle;
import org.openapitools.model.ThreadCount;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "forum", description = "the forum API")
public interface ForumApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /forum/{forumId} : Get a Forum. 
     * This API is used to get the Forum&#39;&#39;s metadata for a given its ID.  Target users: anyone who has READ permission to the project.&#39; 
     *
     * @param forumId The ID of the Forum. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a Forum. ", nickname = "getForum", notes = "This API is used to get the Forum''s metadata for a given its ID.  Target users: anyone who has READ permission to the project.' ", response = Forum.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Forum.class) })
    @GetMapping(
        value = "/forum/{forumId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Forum> getForum(@ApiParam(value = "The ID of the Forum.",required=true) @PathVariable("forumId") String forumId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"etag\" : \"...\", \"id\" : \"...\", \"projectId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forum/{forumId}/moderators : Returns a page of Forum moderators.
     * Returns a page of moderators for a given forum ID.  Target users: anyone who has READ permission to the project. 
     *
     * @param forumId The ID of the Forum. (required)
     * @param limit Limits the size of the page returned. (optional, default to 10)
     * @param offset The index of the pagination offset. For a page size of 10, the first page would be at offset &#x3D; 0, and the second page would be at offset &#x3D; 10.&#39;  (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Returns a page of Forum moderators.", nickname = "getForumModerators", notes = "Returns a page of moderators for a given forum ID.  Target users: anyone who has READ permission to the project. ", response = PaginatedIds.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedIds.class) })
    @GetMapping(
        value = "/forum/{forumId}/moderators",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedIds> getForumModerators(@ApiParam(value = "The ID of the Forum.",required=true) @PathVariable("forumId") String forumId,@Min(10) @Max(100) @ApiParam(value = "Limits the size of the page returned.", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.' ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalNumberOfResults\" : 12345, \"results\" : [ \"test1\", \"test2\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forum/{forumId}/threadcount : Get the total number of threads for a Forum.
     * This API is used to get the total number of threads for a given forum ID.  Target users: anyone who has READ permission to the project. 
     *
     * @param forumId The ID of the Forum. (required)
     * @param filter Filter deleted or not deleted threads. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the total number of threads for a Forum.", nickname = "getThreadCount", notes = "This API is used to get the total number of threads for a given forum ID.  Target users: anyone who has READ permission to the project. ", response = ThreadCount.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ThreadCount.class) })
    @GetMapping(
        value = "/forum/{forumId}/threadcount",
        produces = { "application/json" }
    )
    default ResponseEntity<ThreadCount> getThreadCount(@ApiParam(value = "The ID of the Forum.",required=true) @PathVariable("forumId") String forumId,@ApiParam(value = "Filter deleted or not deleted threads.", allowableValues = "DELETED_ONLY, EXCLUDE_DELETED, NO_FILTER") @Valid @RequestParam(value = "filter", required = false) String filter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"count\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forum/{forumId}/threads : Get N number of threads for a Forum.
     * This API is used to get N number of threads for a given forum ID.  Target users: anyone who has READ permission to the project.&#39; 
     *
     * @param forumId The ID of a Forum. (required)
     * @param ascending The direction of sort: true for ascending, and false for descending (optional)
     * @param filter Filter deleted or not deleted threads. (optional)
     * @param limit Limits the size of the page returned. For example, a page size of 10 require limit &#x3D; 10.  (optional, default to 10)
     * @param offset - The index of the pagination offset. For a page size of 10, the first page would be at offset &#x3D; 0, and the second page would be at offset &#x3D; 10. (optional, default to new BigDecimal(&quot;0&quot;))
     * @param sort The field to sort the resulting threads on. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get N number of threads for a Forum.", nickname = "getThreads", notes = "This API is used to get N number of threads for a given forum ID.  Target users: anyone who has READ permission to the project.' ", response = PaginatedResultsOfDiscussionThreadBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfDiscussionThreadBundle.class) })
    @GetMapping(
        value = "/forum/{forumId}/threads",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfDiscussionThreadBundle> getThreads(@ApiParam(value = "The ID of a Forum.",required=true) @PathVariable("forumId") String forumId,@ApiParam(value = "The direction of sort: true for ascending, and false for descending") @Valid @RequestParam(value = "ascending", required = false) Boolean ascending,@ApiParam(value = "Filter deleted or not deleted threads.", allowableValues = "DELETED_ONLY, EXCLUDE_DELETED, NO_FILTER") @Valid @RequestParam(value = "filter", required = false) String filter,@Min(10) @Max(20) @ApiParam(value = "Limits the size of the page returned. For example, a page size of 10 require limit = 10. ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@DecimalMin("0")@ApiParam(value = "- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.", defaultValue = "new BigDecimal("0")") @Valid @RequestParam(value = "offset", required = false, defaultValue="new BigDecimal("0")") BigDecimal offset,@ApiParam(value = "The field to sort the resulting threads on.", allowableValues = "NUMBER_OF_REPLIES, NUMBER_OF_VIEWS, PINNED_AND_LAST_ACTIVITY, THREAD_TITLE") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"activeAuthors\" : [ \"...\", \"...\" ], \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"isPinned\" : true, \"lastActivity\" : \"...\", \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"numberOfReplies\" : 12345, \"numberOfViews\" : 12345, \"projectId\" : \"...\", \"title\" : \"...\" }, { \"activeAuthors\" : [ \"...\", \"...\" ], \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"isPinned\" : true, \"lastActivity\" : \"...\", \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"numberOfReplies\" : 12345, \"numberOfViews\" : 12345, \"projectId\" : \"...\", \"title\" : \"...\" } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
