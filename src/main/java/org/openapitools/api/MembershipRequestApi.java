/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Count;
import org.openapitools.model.MembershipRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "membershipRequest", description = "the membershipRequest API")
public interface MembershipRequestApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /membershipRequest : .
     * Create a membership request and send an email notification to the administrators of the team.  The Team must be specified. Optionally, the creator may include a message and/or expiration date for the request.  If no expiration date is specified then the request never expires. 
     *
     * @param acceptRequestEndpoint The portal end-point for one-click acceptance of the membership  request.  A signed, serialized token is appended to create the complete: JoinTeamSignedToken  In normal operation, this parameter should be omitted.  (optional, default to &quot;https://www.synapse.org/#!SignedToken:JoinTeam/&quot;)
     * @param notificationUnsubscribeEndpoint The portal prefix for one-click email unsubscription.  A signed, serialized token is appended to create the complete: NotificationSettingsSignedToken  In normal operation, this parameter should be omitted.  (optional, default to &quot;https://www.synapse.org/#!SignedToken:Settings/&quot;)
     * @param membershipRequest  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = ".", nickname = "createRequest", notes = "Create a membership request and send an email notification to the administrators of the team.  The Team must be specified. Optionally, the creator may include a message and/or expiration date for the request.  If no expiration date is specified then the request never expires. ", response = MembershipRequest.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Membership Request Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = MembershipRequest.class) })
    @PostMapping(
        value = "/membershipRequest",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<MembershipRequest> createRequest(@ApiParam(value = "The portal end-point for one-click acceptance of the membership  request.  A signed, serialized token is appended to create the complete: JoinTeamSignedToken  In normal operation, this parameter should be omitted. ", defaultValue = "https://www.synapse.org/#!SignedToken:JoinTeam/") @Valid @RequestParam(value = "acceptRequestEndpoint", required = false, defaultValue="https://www.synapse.org/#!SignedToken:JoinTeam/") String acceptRequestEndpoint,@ApiParam(value = "The portal prefix for one-click email unsubscription.  A signed, serialized token is appended to create the complete: NotificationSettingsSignedToken  In normal operation, this parameter should be omitted. ", defaultValue = "https://www.synapse.org/#!SignedToken:Settings/") @Valid @RequestParam(value = "notificationUnsubscribeEndpoint", required = false, defaultValue="https://www.synapse.org/#!SignedToken:Settings/") String notificationUnsubscribeEndpoint,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) MembershipRequest membershipRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"expiresOn\" : \"...\", \"id\" : \"...\", \"message\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /membershipRequest/{id} : Delete a request
     * Delete a request  Note:  The client must be the creator of the membership request to make this request. 
     *
     * @param id The ID for a membership request. (required)
     * @return The resource has been deleted (status code 204)
     */
    @ApiOperation(value = "Delete a request", nickname = "deleteRequest", notes = "Delete a request  Note:  The client must be the creator of the membership request to make this request. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Membership Request Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted") })
    @DeleteMapping(
        value = "/membershipRequest/{id}"
    )
    default ResponseEntity<Void> deleteRequest(@ApiParam(value = "The ID for a membership request.",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /membershipRequest/openRequestCount : Get pending Membership Requests count
     * Retrieve the number of pending Membership Requests for teams that user is admin 
     *
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get pending Membership Requests count", nickname = "getOpenMembershipRequestCount", notes = "Retrieve the number of pending Membership Requests for teams that user is admin ", response = Count.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Membership Request Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Count.class) })
    @GetMapping(
        value = "/membershipRequest/openRequestCount",
        produces = { "application/json" }
    )
    default ResponseEntity<Count> getOpenMembershipRequestCount() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"count\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /membershipRequest/{id} : Retrieve an request by ID
     * Retrieve an request by ID  Note:  The client must be the creator of the membership request to make this request.&#39; 
     *
     * @param id The ID for a membership request. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve an request by ID", nickname = "getRequest", notes = "Retrieve an request by ID  Note:  The client must be the creator of the membership request to make this request.' ", response = MembershipRequest.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Membership Request Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MembershipRequest.class) })
    @GetMapping(
        value = "/membershipRequest/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<MembershipRequest> getRequest(@ApiParam(value = "The ID for a membership request.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"expiresOn\" : \"...\", \"id\" : \"...\", \"message\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
