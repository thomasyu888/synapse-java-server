/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AsynchronousJobStatus;
import org.openapitools.model.AsynchronousRequestBody;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "asynchronous", description = "the asynchronous API")
public interface AsynchronousApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /asynchronous/job/{jobId} : Get Asynchronous Job.
     * Once a job is launched its progress can be monitored by getting its status with this method. 
     *
     * @param jobId The ID of a Asynchronous Job. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get Asynchronous Job.", nickname = "getJobStatus", notes = "Once a job is launched its progress can be monitored by getting its status with this method. ", response = AsynchronousJobStatus.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Asynchronous Job Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AsynchronousJobStatus.class) })
    @GetMapping(
        value = "/asynchronous/job/{jobId}",
        produces = { "application/json" }
    )
    default ResponseEntity<AsynchronousJobStatus> getJobStatus(@ApiParam(value = "The ID of a Asynchronous Job.",required=true) @PathVariable("jobId") String jobId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"changedOn\" : \"...\", \"errorDetails\" : \"...\", \"errorMessage\" : \"...\", \"etag\" : \"...\", \"exception\" : \"...\", \"jobCanceling\" : true, \"jobId\" : \"...\", \"jobState\" : \"PROCESSING\", \"progressCurrent\" : 12345, \"progressMessage\" : \"...\", \"progressTotal\" : 12345, \"requestBody\" : { \"concreteType\" : \"...\" }, \"responseBody\" : { \"concreteType\" : \"...\" }, \"runtimeMS\" : 12345, \"startedByUserId\" : 12345, \"startedOn\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /asynchronous/job : Launch new Asynchronous jobs.
     * This method is used to launch new jobs. The type of job that will be launched is determined by the passed  AsynchronousJobBody.  The following are the currently supported job types:  * UploadToTableRequest * DownloadFromTableRequest  Note: Each job types has different access requirements. 
     *
     * @param asynchronousRequestBody  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Launch new Asynchronous jobs.", nickname = "launchNewJob", notes = "This method is used to launch new jobs. The type of job that will be launched is determined by the passed  AsynchronousJobBody.  The following are the currently supported job types:  * UploadToTableRequest * DownloadFromTableRequest  Note: Each job types has different access requirements. ", response = AsynchronousJobStatus.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Asynchronous Job Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AsynchronousJobStatus.class) })
    @PostMapping(
        value = "/asynchronous/job",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AsynchronousJobStatus> launchNewJob(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AsynchronousRequestBody asynchronousRequestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"changedOn\" : \"...\", \"errorDetails\" : \"...\", \"errorMessage\" : \"...\", \"etag\" : \"...\", \"exception\" : \"...\", \"jobCanceling\" : true, \"jobId\" : \"...\", \"jobState\" : \"PROCESSING\", \"progressCurrent\" : 12345, \"progressMessage\" : \"...\", \"progressTotal\" : 12345, \"requestBody\" : { \"concreteType\" : \"...\" }, \"responseBody\" : { \"concreteType\" : \"...\" }, \"runtimeMS\" : 12345, \"startedByUserId\" : 12345, \"startedOn\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /asynchronous/job/{jobId}/cancel : Stop a Asynchronous Job.
     * Once a job is launched it can be cancelled if the job is set up to be cancelable. 
     *
     * @param jobId The ID of a Asynchronous Job. (required)
     * @return The resource has been deleted. (status code 204)
     */
    @ApiOperation(value = "Stop a Asynchronous Job.", nickname = "stopJob", notes = "Once a job is launched it can be cancelled if the job is set up to be cancelable. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Asynchronous Job Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted.") })
    @GetMapping(
        value = "/asynchronous/job/{jobId}/cancel"
    )
    default ResponseEntity<Void> stopJob(@ApiParam(value = "The ID of a Asynchronous Job.",required=true) @PathVariable("jobId") String jobId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
