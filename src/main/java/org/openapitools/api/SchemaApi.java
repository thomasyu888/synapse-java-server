/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccessControlList;
import org.openapitools.model.AsyncJobId;
import org.openapitools.model.CreateOrganizationRequest;
import org.openapitools.model.CreateSchemaRequest;
import org.openapitools.model.CreateSchemaResponse;
import org.openapitools.model.GetValidationSchemaRequest;
import org.openapitools.model.GetValidationSchemaResponse;
import org.openapitools.model.JsonSchema;
import org.openapitools.model.ListJsonSchemaInfoRequest;
import org.openapitools.model.ListJsonSchemaInfoResponse;
import org.openapitools.model.ListJsonSchemaVersionInfoRequest;
import org.openapitools.model.ListJsonSchemaVersionInfoResponse;
import org.openapitools.model.ListOrganizationsRequest;
import org.openapitools.model.ListOrganizationsResponse;
import org.openapitools.model.Organization;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "schema", description = "the schema API")
public interface SchemaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /schema/organization : Create a new Organization.
     * Create a new Organization by providing a unique organization name. The new Organization will have an auto-generated AcessControlList (ACL) granting the caller all relevant permission on the newly created Organization. 
     *
     * @param createOrganizationRequest  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a new Organization.", nickname = "createOrganziation", notes = "Create a new Organization by providing a unique organization name. The new Organization will have an auto-generated AcessControlList (ACL) granting the caller all relevant permission on the newly created Organization. ", response = Organization.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = Organization.class) })
    @PostMapping(
        value = "/schema/organization",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Organization> createOrganziation(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) CreateOrganizationRequest createOrganizationRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"name\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /schema/type/create/async/get/{asyncToken} : Get the results of an asynchronous job that was started to create a new JSON schema. 
     * Get the results of an asynchronous job that was started to create a new JSON schema.  Note: If the job has not completed, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object. 
     *
     * @param asyncToken Forward the token returned when the job was started. (required)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Get the results of an asynchronous job that was started to create a new JSON schema. ", nickname = "createSchemaAsyncGet", notes = "Get the results of an asynchronous job that was started to create a new JSON schema.  Note: If the job has not completed, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object. ", response = CreateSchemaResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = CreateSchemaResponse.class) })
    @GetMapping(
        value = "/schema/type/create/async/get/{asyncToken}",
        produces = { "application/json" }
    )
    default ResponseEntity<CreateSchemaResponse> createSchemaAsyncGet(@ApiParam(value = "Forward the token returned when the job was started.",required=true) @PathVariable("asyncToken") String asyncToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"validationSchema\" : { \"$schema\" : \"$schema\", \"_const\" : \"_const\", \"minLength\" : 6, \"format\" : \"format\", \"pattern\" : \"pattern\", \"anyOf\" : [ { }, { } ], \"description\" : \"description\", \"_enum\" : [ \"_enum\", \"_enum\" ], \"source\" : \"source\", \"then\" : { }, \"title\" : \"title\", \"required\" : [ \"required\", \"required\" ], \"allOf\" : [ { }, { } ], \"_else\" : { }, \"oneOf\" : [ { }, { } ], \"$ref\" : \"$ref\", \"_if\" : { }, \"definitions\" : { \"key\" : { } }, \"items\" : { }, \"maxLength\" : 0, \"properties\" : { \"key\" : { } }, \"$id\" : \"$id\" }, \"concreteType\" : \"concreteType\", \"newVersionInfo\" : { \"$id\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"jsonSHA256Hex\" : \"...\", \"organizationId\" : \"...\", \"organizationName\" : \"...\", \"schemaId\" : \"...\", \"schemaName\" : \"...\", \"semanticVersion\" : \"...\", \"versionId\" : \"...\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /schema/type/create/async/start : Start an asynchronous job to create a new JSON schema.
     * Start an asynchronous job to create a new JSON schema. A JSON schema must include an $id that is a relative URL of that schema. The pseudo-BNF syntax for a valid $id is as follows:  &lt; $id &gt; ::&#x3D; &lt; organization name &gt; \&quot;-\&quot; &lt; schema name &gt; [ \&quot;-\&quot;  &lt; semantic version &gt; ]  &lt; organization name &gt; ::&#x3D; &lt; dot separated alpha numeric &gt;   &lt; schema name &gt; ::&#x3D; &lt; dot separated alpha numeric &gt;  &lt; semantic version &gt; ::&#x3D; See: https://semver.org/  &lt; dot separated alpha numeric &gt; :: &#x3D; &lt; alpha numeric &gt; ( \&quot;.\&quot; &lt; alpha numeric &gt; )*  &lt; alpha numeric &gt; ::&#x3D; &lt; letter &gt; ( &lt; identifier &gt; )*  &lt; letter &gt; ::&#x3D; [a-zA-Z]  &lt; identifier &gt; ::&#x3D; &lt; letter &gt; | &lt; digit &gt;  &lt; digit &gt; :: &#x3D; [0-9]  Take the following example, if organizationName&#x3D;\&quot;my.organization\&quot;, schemaName&#x3D;\&quot;foo.Bar.json\&quot;, and semanticVersion&#x3D;\&quot;0.1.2\&quot;, then $id&#x3D;\&quot;my.organization-foo.Bar.json-0.1.2\&quot;. Note: The semantic version is optional. When provide the semantic version is a label for a specific version that allows other schemas to reference it by its version. When a semantic version is include, that version of the schema is immutable. This means if a semantic version is included in a registered schema&#39;s $id, all $refs within the schema must also include a semantic version.  All $ref within a JSON schema must either be references to \&quot;definitions\&quot; within the schema or references other registered JSON schemas. References to non-registered schemas is not currently supported. To reference a registered schema $ref should equal the $id of the referenced schema. To reference the example schema from above use $ref&#x3D;\&quot;my.organization-foo.Bar.json-0.1.2\&quot;.  Note: The semantic version of a referenced schema is optional. When the semantic version is excluded in a $ref the reference is assumed to reference the latest version of the schema. So $ref&#x3D;\&quot;my.organization-foo.Bar.json\&quot; would be a reference to the latest version of that schema. While $ref&#x3D;\&quot;my.organization-foo.Bar.json-0.1.2\&quot; would be a reference to the version 0.1.2  To monitor the progress of the job and to get the final results use: GET /schema/type/create/async/get/{asyncToken}  Note: The caller must be granted the CREATE permission on the Organization in the schema&#39;s $id. 
     *
     * @param createSchemaRequest  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Start an asynchronous job to create a new JSON schema.", nickname = "createSchemaAsyncStart", notes = "Start an asynchronous job to create a new JSON schema. A JSON schema must include an $id that is a relative URL of that schema. The pseudo-BNF syntax for a valid $id is as follows:  < $id > ::= < organization name > \"-\" < schema name > [ \"-\"  < semantic version > ]  < organization name > ::= < dot separated alpha numeric >   < schema name > ::= < dot separated alpha numeric >  < semantic version > ::= See: https://semver.org/  < dot separated alpha numeric > :: = < alpha numeric > ( \".\" < alpha numeric > )*  < alpha numeric > ::= < letter > ( < identifier > )*  < letter > ::= [a-zA-Z]  < identifier > ::= < letter > | < digit >  < digit > :: = [0-9]  Take the following example, if organizationName=\"my.organization\", schemaName=\"foo.Bar.json\", and semanticVersion=\"0.1.2\", then $id=\"my.organization-foo.Bar.json-0.1.2\". Note: The semantic version is optional. When provide the semantic version is a label for a specific version that allows other schemas to reference it by its version. When a semantic version is include, that version of the schema is immutable. This means if a semantic version is included in a registered schema's $id, all $refs within the schema must also include a semantic version.  All $ref within a JSON schema must either be references to \"definitions\" within the schema or references other registered JSON schemas. References to non-registered schemas is not currently supported. To reference a registered schema $ref should equal the $id of the referenced schema. To reference the example schema from above use $ref=\"my.organization-foo.Bar.json-0.1.2\".  Note: The semantic version of a referenced schema is optional. When the semantic version is excluded in a $ref the reference is assumed to reference the latest version of the schema. So $ref=\"my.organization-foo.Bar.json\" would be a reference to the latest version of that schema. While $ref=\"my.organization-foo.Bar.json-0.1.2\" would be a reference to the version 0.1.2  To monitor the progress of the job and to get the final results use: GET /schema/type/create/async/get/{asyncToken}  Note: The caller must be granted the CREATE permission on the Organization in the schema's $id. ", response = AsyncJobId.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AsyncJobId.class) })
    @PostMapping(
        value = "/schema/type/create/async/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AsyncJobId> createSchemaAsyncStart(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) CreateSchemaRequest createSchemaRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /schema/type/registered/{id}
     * Delete the given schema using its $id. If the $id excludes a semantic version, all versions of the schema will be deleted. If the $id includes a semantic version then just that version will be deleted. Caution: This operation cannot be undone.  Note: The caller must be granted the DELETE permission on the schema&#39;s organization. 
     *
     * @param id The $id of the schema to delete. (required)
     * @return The resource has been deleted. (status code 204)
     */
    @ApiOperation(value = "", nickname = "deleteJsonSchema", notes = "Delete the given schema using its $id. If the $id excludes a semantic version, all versions of the schema will be deleted. If the $id includes a semantic version then just that version will be deleted. Caution: This operation cannot be undone.  Note: The caller must be granted the DELETE permission on the schema's organization. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted.") })
    @DeleteMapping(
        value = "/schema/type/registered/{id}"
    )
    default ResponseEntity<Void> deleteJsonSchema(@ApiParam(value = "The $id of the schema to delete.",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /schema/organization/{id} : Delete the identified Organization.
     * Delete the identified Organization. All schemas defined within the Organization&#39;&#39;s name-space must first be deleted before an Organization can be deleted.  Note: The caller must be granted the DELETE permission on the Organization. 
     *
     * @param id The ID of the Organization. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Delete the identified Organization.", nickname = "deleteOrganization", notes = "Delete the identified Organization. All schemas defined within the Organization''s name-space must first be deleted before an Organization can be deleted.  Note: The caller must be granted the DELETE permission on the Organization. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @DeleteMapping(
        value = "/schema/organization/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> deleteOrganization(@ApiParam(value = "The ID of the Organization.",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /schema/type/registered/{id} : Get a registered JSON schema using its $id.
     * Get a registered JSON schema using its $id.
     *
     * @param id The $id of the schema to delete. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a registered JSON schema using its $id.", nickname = "getJsonSchema", notes = "Get a registered JSON schema using its $id.", response = JsonSchema.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = JsonSchema.class) })
    @GetMapping(
        value = "/schema/type/registered/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<JsonSchema> getJsonSchema(@ApiParam(value = "The $id of the schema to delete.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"_const\" : \"_const\", \"minLength\" : 6, \"format\" : \"format\", \"pattern\" : \"pattern\", \"anyOf\" : [ { }, { } ], \"description\" : \"description\", \"_enum\" : [ \"_enum\", \"_enum\" ], \"source\" : \"source\", \"then\" : { }, \"title\" : \"title\", \"required\" : [ \"required\", \"required\" ], \"allOf\" : [ { }, { } ], \"_else\" : { }, \"oneOf\" : [ { }, { } ], \"$ref\" : \"$ref\", \"_if\" : { }, \"definitions\" : { \"key\" : { } }, \"items\" : { }, \"maxLength\" : 0, \"properties\" : { \"key\" : { } }, \"$id\" : \"$id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /schema/organization/{id}/acl : Get the ACL associated of an Organization.
     * Get the AcessControlList (ACL) associated with the identified Organization.  Note: The caller must be granted the READ permission to get an Organization&#39;s ACL. 
     *
     * @param id The ID of the Organization. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the ACL associated of an Organization.", nickname = "getOrganizationAcl", notes = "Get the AcessControlList (ACL) associated with the identified Organization.  Note: The caller must be granted the READ permission to get an Organization's ACL. ", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @GetMapping(
        value = "/schema/organization/{id}/acl",
        produces = { "application/json" }
    )
    default ResponseEntity<AccessControlList> getOrganizationAcl(@ApiParam(value = "The ID of the Organization.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /schema/organization : Lookup an Organization by name.
     * Lookup an Organization by name.
     *
     * @param name The name of the Organization to lookup. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Lookup an Organization by name.", nickname = "getOrganizationByName", notes = "Lookup an Organization by name.", response = Organization.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Organization.class) })
    @GetMapping(
        value = "/schema/organization",
        produces = { "application/json" }
    )
    default ResponseEntity<Organization> getOrganizationByName(@NotNull @ApiParam(value = "The name of the Organization to lookup.", required = true) @Valid @RequestParam(value = "name", required = true) String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"name\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /schema/type/validation/async/get/{asyncToken} : Get the results of an asynchronous job that was started to compile a &#39;validation&#39; schema for a JSON schema. 
     * Get the results of an asynchronous job that was started to compile a &#39;validation&#39; schema for a JSON schema.  Note: If the job has not completed, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object. 
     *
     * @param asyncToken Forward the token returned when the job was started. (required)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Get the results of an asynchronous job that was started to compile a 'validation' schema for a JSON schema. ", nickname = "getValidationSchemaResults", notes = "Get the results of an asynchronous job that was started to compile a 'validation' schema for a JSON schema.  Note: If the job has not completed, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object. ", response = GetValidationSchemaResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = GetValidationSchemaResponse.class) })
    @GetMapping(
        value = "/schema/type/validation/async/get/{asyncToken}",
        produces = { "application/json" }
    )
    default ResponseEntity<GetValidationSchemaResponse> getValidationSchemaResults(@ApiParam(value = "Forward the token returned when the job was started.",required=true) @PathVariable("asyncToken") String asyncToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"validationSchema\" : { \"$schema\" : \"$schema\", \"_const\" : \"_const\", \"minLength\" : 6, \"format\" : \"format\", \"pattern\" : \"pattern\", \"anyOf\" : [ { }, { } ], \"description\" : \"description\", \"_enum\" : [ \"_enum\", \"_enum\" ], \"source\" : \"source\", \"then\" : { }, \"title\" : \"title\", \"required\" : [ \"required\", \"required\" ], \"allOf\" : [ { }, { } ], \"_else\" : { }, \"oneOf\" : [ { }, { } ], \"$ref\" : \"$ref\", \"_if\" : { }, \"definitions\" : { \"key\" : { } }, \"items\" : { }, \"maxLength\" : 0, \"properties\" : { \"key\" : { } }, \"$id\" : \"$id\" }, \"concreteType\" : \"concreteType\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /schema/list : List all JSON schemas for an Organization.
     * List all JSON schemas for an Organization. Each call will return a single page of schemas. Forward the provided nextPageToken to get the next page. 
     *
     * @param listJsonSchemaInfoRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List all JSON schemas for an Organization.", nickname = "listJsonSchemas", notes = "List all JSON schemas for an Organization. Each call will return a single page of schemas. Forward the provided nextPageToken to get the next page. ", response = ListJsonSchemaInfoResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ListJsonSchemaInfoResponse.class) })
    @PostMapping(
        value = "/schema/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ListJsonSchemaInfoResponse> listJsonSchemas(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ListJsonSchemaInfoRequest listJsonSchemaInfoRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"page\" : [ { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"organizationId\" : \"...\", \"organizationName\" : \"...\", \"schemaId\" : \"...\", \"schemaName\" : \"...\" }, { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"organizationId\" : \"...\", \"organizationName\" : \"...\", \"schemaId\" : \"...\", \"schemaName\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /schema/version/list : List the version information for each version of a given schema.
     * List the version information for each version of a given schema. Each call will return a single page of results. Forward the provide nextPageToken to get the next page of results. 
     *
     * @param listJsonSchemaVersionInfoRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List the version information for each version of a given schema.", nickname = "listJsonSchemasVersions", notes = "List the version information for each version of a given schema. Each call will return a single page of results. Forward the provide nextPageToken to get the next page of results. ", response = ListJsonSchemaVersionInfoResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ListJsonSchemaVersionInfoResponse.class) })
    @PostMapping(
        value = "/schema/version/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ListJsonSchemaVersionInfoResponse> listJsonSchemasVersions(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ListJsonSchemaVersionInfoRequest listJsonSchemaVersionInfoRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"page\" : [ { \"$id\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"jsonSHA256Hex\" : \"...\", \"organizationId\" : \"...\", \"organizationName\" : \"...\", \"schemaId\" : \"...\", \"schemaName\" : \"...\", \"semanticVersion\" : \"...\", \"versionId\" : \"...\" }, { \"$id\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"jsonSHA256Hex\" : \"...\", \"organizationId\" : \"...\", \"organizationName\" : \"...\", \"schemaId\" : \"...\", \"schemaName\" : \"...\", \"semanticVersion\" : \"...\", \"versionId\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /schema/organization/list : List all organizations.
     * List all organizations. Each call will return a single page of Organizations. Forward the provided nextPageToken to get the next page. 
     *
     * @param listOrganizationsRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List all organizations.", nickname = "listOrganizations", notes = "List all organizations. Each call will return a single page of Organizations. Forward the provided nextPageToken to get the next page. ", response = ListOrganizationsResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ListOrganizationsResponse.class) })
    @PostMapping(
        value = "/schema/organization/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ListOrganizationsResponse> listOrganizations(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ListOrganizationsRequest listOrganizationsRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"page\" : [ { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"name\" : \"...\" }, { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"name\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /schema/type/validation/async/start : Start validating JSON schema 
     * To use a JSON schema for validation, the JSON schema plus all of its dependency schemas must be provided to a JSON schema validator. The &#39;validation&#39; schema is simply a JSON schema with all of its dependencies added to the &#39;definitions&#39; section of the schema, making the schema self-contained.  Use this call to start an asynchronous job that will compile the &#39;validation&#39; schema for a given JSON schema $id.  To monitor the progress of the job and to get the final results use: GET /schema/type/validation/async/get/{asyncToken} 
     *
     * @param getValidationSchemaRequest  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Start validating JSON schema ", nickname = "startGetValidationSchema", notes = "To use a JSON schema for validation, the JSON schema plus all of its dependency schemas must be provided to a JSON schema validator. The 'validation' schema is simply a JSON schema with all of its dependencies added to the 'definitions' section of the schema, making the schema self-contained.  Use this call to start an asynchronous job that will compile the 'validation' schema for a given JSON schema $id.  To monitor the progress of the job and to get the final results use: GET /schema/type/validation/async/get/{asyncToken} ", response = AsyncJobId.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AsyncJobId.class) })
    @PostMapping(
        value = "/schema/type/validation/async/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AsyncJobId> startGetValidationSchema(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) GetValidationSchemaRequest getValidationSchemaRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /schema/organization/{id}/acl : Update the AccessControlList (ACL) for the identified Organization.
     * Update the AccessControlList (ACL) for the identified Organization.  Note: The caller must be granted the CHANGE_PERMISSIONS permission to update an Organization&#39;s ACL. 
     *
     * @param id The ID of the Organization. (required)
     * @param accessControlList  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update the AccessControlList (ACL) for the identified Organization.", nickname = "updateOrganizationAcl", notes = "Update the AccessControlList (ACL) for the identified Organization.  Note: The caller must be granted the CHANGE_PERMISSIONS permission to update an Organization's ACL. ", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Json Schema Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @PutMapping(
        value = "/schema/organization/{id}/acl",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessControlList> updateOrganizationAcl(@ApiParam(value = "The ID of the Organization.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AccessControlList accessControlList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
