/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccessControlList;
import org.openapitools.model.FormChangeRequest;
import org.openapitools.model.FormData;
import org.openapitools.model.FormGroup;
import org.openapitools.model.FormRejection;
import org.openapitools.model.ListRequest;
import org.openapitools.model.ListResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "form", description = "the form API")
public interface FormApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /form/data : Create a new FormData object.
     * Create a new FormData object. The caller will own the resulting object and will have access to read, update, and delete the FormData object.  Note: The caller must have the SUBMIT permission on the FormGrup to  reate/update/submit FormData. 
     *
     * @param groupId The identifier of the group that manages this data.  (required)
     * @param formChangeRequest  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a new FormData object.", nickname = "createFormData", notes = "Create a new FormData object. The caller will own the resulting object and will have access to read, update, and delete the FormData object.  Note: The caller must have the SUBMIT permission on the FormGrup to  reate/update/submit FormData. ", response = FormData.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = FormData.class) })
    @PostMapping(
        value = "/form/data",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FormData> createFormData(@NotNull @ApiParam(value = "The identifier of the group that manages this data. ", required = true) @Valid @RequestParam(value = "groupId", required = true) String groupId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) FormChangeRequest formChangeRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"dataFileHandleId\" : \"...\", \"etag\" : \"...\", \"formDataId\" : \"...\", \"groupId\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"submissionStatus\" : { \"rejectionMessage\" : \"...\", \"reviewedBy\" : \"...\", \"reviewedOn\" : \"...\", \"state\" : \"REJECTED\", \"submittedOn\" : \"...\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /form/group : Create a FormGroup with the provided name.
     * Create a FormGroup with the provided name. This method is idempotent. If a group with the provided name already exists and the caller has READ permission the existing FormGroup will be returned.  The created FormGroup will have an Access Control List (ACL) with the creator listed as an administrator. 
     *
     * @param name A globally unique name for the group. Required. Between 3 and 256 characters.  (required)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a FormGroup with the provided name.", nickname = "createGroup", notes = "Create a FormGroup with the provided name. This method is idempotent. If a group with the provided name already exists and the caller has READ permission the existing FormGroup will be returned.  The created FormGroup will have an Access Control List (ACL) with the creator listed as an administrator. ", response = FormGroup.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = FormGroup.class) })
    @PostMapping(
        value = "/form/group",
        produces = { "application/json" }
    )
    default ResponseEntity<FormGroup> createGroup(@NotNull @Size(min=3,max=256) @ApiParam(value = "A globally unique name for the group. Required. Between 3 and 256 characters. ", required = true) @Valid @RequestParam(value = "name", required = true) String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"groupId\" : \"...\", \"name\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /form/data/{id} : Delete a FormData object.
     * Delete an existing FormData object. The caller must be the creator of the FormData object.  Note: Cannot delete a FormData object once it has been submitted and caller must have the SUBMIT permission on the identified group to update the group&#39;s ACL. 
     *
     * @param id The ID of the FormData. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Delete a FormData object.", nickname = "deleteFormData", notes = "Delete an existing FormData object. The caller must be the creator of the FormData object.  Note: Cannot delete a FormData object once it has been submitted and caller must have the SUBMIT permission on the identified group to update the group's ACL. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @DeleteMapping(
        value = "/form/data/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> deleteFormData(@ApiParam(value = "The ID of the FormData.",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /form/group/{id} : Get a FormGroup with the provided ID.
     * Get a FormGroup with the provided ID.  Note: The caller must have the READ permission on the identified group. 
     *
     * @param id The ID to the FormGroup. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a FormGroup with the provided ID.", nickname = "getFormGroup", notes = "Get a FormGroup with the provided ID.  Note: The caller must have the READ permission on the identified group. ", response = FormGroup.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FormGroup.class) })
    @GetMapping(
        value = "/form/group/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<FormGroup> getFormGroup(@ApiParam(value = "The ID to the FormGroup.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"groupId\" : \"...\", \"name\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /form/group/{id}/acl : Get the ACL for a FormGroup
     * Get the Access Control List (ACL) for a FormGroup.  Note: The caller must have READ permission on the identified group. 
     *
     * @param id The ID of the FormGroup. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the ACL for a FormGroup", nickname = "getGroupAcl", notes = "Get the Access Control List (ACL) for a FormGroup.  Note: The caller must have READ permission on the identified group. ", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @GetMapping(
        value = "/form/group/{id}/acl",
        produces = { "application/json" }
    )
    default ResponseEntity<AccessControlList> getGroupAcl(@ApiParam(value = "The ID of the FormGroup.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /form/data/list : List FormData objects and their associated status. 
     * List FormData objects and their associated status that match the filters of the provided request that are owned by the caller. Note: Only objects owned by the caller will be returned. 
     *
     * @param listRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List FormData objects and their associated status. ", nickname = "listFormStatus", notes = "List FormData objects and their associated status that match the filters of the provided request that are owned by the caller. Note: Only objects owned by the caller will be returned. ", response = ListResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ListResponse.class) })
    @PostMapping(
        value = "/form/data/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ListResponse> listFormStatus(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ListRequest listRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"page\" : [ { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"dataFileHandleId\" : \"...\", \"etag\" : \"...\", \"formDataId\" : \"...\", \"groupId\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"submissionStatus\" : { \"rejectionMessage\" : \"...\", \"reviewedBy\" : \"...\", \"reviewedOn\" : \"...\", \"state\" : \"ACCEPTED\", \"submittedOn\" : \"...\" } }, { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"dataFileHandleId\" : \"...\", \"etag\" : \"...\", \"formDataId\" : \"...\", \"groupId\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"submissionStatus\" : { \"rejectionMessage\" : \"...\", \"reviewedBy\" : \"...\", \"reviewedOn\" : \"...\", \"state\" : \"ACCEPTED\", \"submittedOn\" : \"...\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /form/data/list/reviewer : List FormData objects and their associated status. 
     * List FormData objects and their associated status that match the filters of the provided request for the entire group. This is used by service accounts to review submissions. Filtering by WAITING_FOR_SUBMISSION is not allowed for this call.  Note: The caller must have the READ_PRIVATE_SUBMISSION permission on the identified group to update the group&#39;s ACL. 
     *
     * @param listRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List FormData objects and their associated status. ", nickname = "listFormStatusReviewer", notes = "List FormData objects and their associated status that match the filters of the provided request for the entire group. This is used by service accounts to review submissions. Filtering by WAITING_FOR_SUBMISSION is not allowed for this call.  Note: The caller must have the READ_PRIVATE_SUBMISSION permission on the identified group to update the group's ACL. ", response = ListResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ListResponse.class) })
    @PostMapping(
        value = "/form/data/list/reviewer",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ListResponse> listFormStatusReviewer(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ListRequest listRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"page\" : [ { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"dataFileHandleId\" : \"...\", \"etag\" : \"...\", \"formDataId\" : \"...\", \"groupId\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"submissionStatus\" : { \"rejectionMessage\" : \"...\", \"reviewedBy\" : \"...\", \"reviewedOn\" : \"...\", \"state\" : \"ACCEPTED\", \"submittedOn\" : \"...\" } }, { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"dataFileHandleId\" : \"...\", \"etag\" : \"...\", \"formDataId\" : \"...\", \"groupId\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"submissionStatus\" : { \"rejectionMessage\" : \"...\", \"reviewedBy\" : \"...\", \"reviewedOn\" : \"...\", \"state\" : \"ACCEPTED\", \"submittedOn\" : \"...\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /form/data/{id}/accept : Called by the form reviewing service to accept a submitted data.
     * Called by the form reviewing service to accept a submitted data.  Note: The caller must have the READ_PRIVATE_SUBMISSION permission on the identified group to update the group&#39;s ACL. 
     *
     * @param id The ID of the FormData. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Called by the form reviewing service to accept a submitted data.", nickname = "reviewerAcceptForm", notes = "Called by the form reviewing service to accept a submitted data.  Note: The caller must have the READ_PRIVATE_SUBMISSION permission on the identified group to update the group's ACL. ", response = FormData.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FormData.class) })
    @PutMapping(
        value = "/form/data/{id}/accept",
        produces = { "application/json" }
    )
    default ResponseEntity<FormData> reviewerAcceptForm(@ApiParam(value = "The ID of the FormData.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"dataFileHandleId\" : \"...\", \"etag\" : \"...\", \"formDataId\" : \"...\", \"groupId\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"submissionStatus\" : { \"rejectionMessage\" : \"...\", \"reviewedBy\" : \"...\", \"reviewedOn\" : \"...\", \"state\" : \"REJECTED\", \"submittedOn\" : \"...\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /form/data/{id}/reject : Called by the form reviewing service to reject a submitted data.
     * Called by the form reviewing service to reject a submitted data.  Note: The caller must have the READ_PRIVATE_SUBMISSION permission on the identified group to update the group&#39;s ACL. 
     *
     * @param id The ID of the FormData. (required)
     * @param formRejection  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Called by the form reviewing service to reject a submitted data.", nickname = "reviewerRejectForm", notes = "Called by the form reviewing service to reject a submitted data.  Note: The caller must have the READ_PRIVATE_SUBMISSION permission on the identified group to update the group's ACL. ", response = FormData.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FormData.class) })
    @PutMapping(
        value = "/form/data/{id}/reject",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FormData> reviewerRejectForm(@ApiParam(value = "The ID of the FormData.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) FormRejection formRejection) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"dataFileHandleId\" : \"...\", \"etag\" : \"...\", \"formDataId\" : \"...\", \"groupId\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"submissionStatus\" : { \"rejectionMessage\" : \"...\", \"reviewedBy\" : \"...\", \"reviewedOn\" : \"...\", \"state\" : \"REJECTED\", \"submittedOn\" : \"...\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /form/data/{id}/submit : Submit the identified FormData from review.
     * Submit the identified FormData from review.  Note: The caller must have the SUBMIT permission on the identified group to update the group&#39;s ACL. 
     *
     * @param id The ID of the FormData. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Submit the identified FormData from review.", nickname = "submitFormData", notes = "Submit the identified FormData from review.  Note: The caller must have the SUBMIT permission on the identified group to update the group's ACL. ", response = FormData.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FormData.class) })
    @PostMapping(
        value = "/form/data/{id}/submit",
        produces = { "application/json" }
    )
    default ResponseEntity<FormData> submitFormData(@ApiParam(value = "The ID of the FormData.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"dataFileHandleId\" : \"...\", \"etag\" : \"...\", \"formDataId\" : \"...\", \"groupId\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"submissionStatus\" : { \"rejectionMessage\" : \"...\", \"reviewedBy\" : \"...\", \"reviewedOn\" : \"...\", \"state\" : \"REJECTED\", \"submittedOn\" : \"...\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /form/data/{id} : Update a FormData object.
     * Update an existing FormData object. The caller must be the creator of the FormData object. Once a FormData object has been submitted, it cannot be updated until it has been processed. If the submission is accepted it becomes immutable. Rejected submission are editable. Updating a rejected submission will change its status back to waiting_for_submission.  Note: The caller must have the SUBMIT permission on the FormGrup to create/update/submit FormData. 
     *
     * @param id The ID of the FormData. (required)
     * @param formChangeRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update a FormData object.", nickname = "updateFormData", notes = "Update an existing FormData object. The caller must be the creator of the FormData object. Once a FormData object has been submitted, it cannot be updated until it has been processed. If the submission is accepted it becomes immutable. Rejected submission are editable. Updating a rejected submission will change its status back to waiting_for_submission.  Note: The caller must have the SUBMIT permission on the FormGrup to create/update/submit FormData. ", response = FormData.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FormData.class) })
    @PutMapping(
        value = "/form/data/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FormData> updateFormData(@ApiParam(value = "The ID of the FormData.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) FormChangeRequest formChangeRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"dataFileHandleId\" : \"...\", \"etag\" : \"...\", \"formDataId\" : \"...\", \"groupId\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"submissionStatus\" : { \"rejectionMessage\" : \"...\", \"reviewedBy\" : \"...\", \"reviewedOn\" : \"...\", \"state\" : \"REJECTED\", \"submittedOn\" : \"...\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /form/group/{id}/acl : Update the ACL for a FormGroup.
     * Update the Access Control List (ACL) for a FormGroup.  The following define the permissions in this context:  * READ - Grants read access to the group. READ does not grant access to FormData of the group. * CHANGE_PERMISSIONS - Grants access to update the group&#39;s ACL. * SUBMIT - Grants access to both create and submit FormData to the group. * READ_PRIVATE_SUBMISSION - Grants administrator&#39;s access to the submitted FormData, including both FormData reads and status updates. This permission should be reserved for the service account that evaluates submissions.  Users automatically have read/update access to FormData that they create.  Note: The caller must have the CHANGE_PERMISSIONS permission on the identified group to update the group&#39;s ACL. 
     *
     * @param id The ID of the FormGroup. (required)
     * @param accessControlList  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update the ACL for a FormGroup.", nickname = "updateGroupAcl", notes = "Update the Access Control List (ACL) for a FormGroup.  The following define the permissions in this context:  * READ - Grants read access to the group. READ does not grant access to FormData of the group. * CHANGE_PERMISSIONS - Grants access to update the group's ACL. * SUBMIT - Grants access to both create and submit FormData to the group. * READ_PRIVATE_SUBMISSION - Grants administrator's access to the submitted FormData, including both FormData reads and status updates. This permission should be reserved for the service account that evaluates submissions.  Users automatically have read/update access to FormData that they create.  Note: The caller must have the CHANGE_PERMISSIONS permission on the identified group to update the group's ACL. ", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Form Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @PutMapping(
        value = "/form/group/{id}/acl",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessControlList> updateGroupAcl(@ApiParam(value = "The ID of the FormGroup.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AccessControlList accessControlList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
