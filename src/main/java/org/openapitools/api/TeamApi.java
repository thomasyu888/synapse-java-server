/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccessControlList;
import org.openapitools.model.IdList;
import org.openapitools.model.ListWrapperOfTeamMember;
import org.openapitools.model.PaginatedResultsOfAccessRequirement;
import org.openapitools.model.PaginatedResultsOfMembershipInvitation;
import org.openapitools.model.PaginatedResultsOfMembershipRequest;
import org.openapitools.model.Team;
import org.openapitools.model.TeamMember;
import org.openapitools.model.TeamMembershipStatus;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "team", description = "the team API")
public interface TeamApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /team/{id}/member/{principalId} : Add a member to the Team.
     * Add a member to the Team.  If the one making the request is the user to be added, then the user must have an open invitation from the Team.  If the one making the request is an administrator on the Team, then there must be a pending request from the user to the Team, asking to be added. If both teamEndpoint and notificationUnsubscribeEndpoint are provided, notification email(s) will be sent to the appropriate parties. 
     *
     * @param id the ID of the Team. (required)
     * @param principalId the member&#39;s principal ID (required)
     * @param notificationUnsubscribeEndpoint the portal prefix for one-click email unsubscription. A signed, serialized token is appended to create the complete URL: &lt;ahref&#x3D;\&quot;${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}\&quot;&gt;NotificationSettingsSignedToken&lt;/a&gt;&#39;  (optional)
     * @param teamEndpoint the portal prefix for the Team URL. The team ID is appended to create the complete URL.  (optional)
     * @return The resource has been added. (status code 204)
     */
    @ApiOperation(value = "Add a member to the Team.", nickname = "addTeamMember", notes = "Add a member to the Team.  If the one making the request is the user to be added, then the user must have an open invitation from the Team.  If the one making the request is an administrator on the Team, then there must be a pending request from the user to the Team, asking to be added. If both teamEndpoint and notificationUnsubscribeEndpoint are provided, notification email(s) will be sent to the appropriate parties. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been added.") })
    @PutMapping(
        value = "/team/{id}/member/{principalId}"
    )
    default ResponseEntity<Void> addTeamMember(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = "the member's principal ID",required=true) @PathVariable("principalId") String principalId,@ApiParam(value = "the portal prefix for one-click email unsubscription. A signed, serialized token is appended to create the complete URL: <ahref=\"${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}\">NotificationSettingsSignedToken</a>' ") @Valid @RequestParam(value = "notificationUnsubscribeEndpoint", required = false) String notificationUnsubscribeEndpoint,@ApiParam(value = "the portal prefix for the Team URL. The team ID is appended to create the complete URL. ") @Valid @RequestParam(value = "teamEndpoint", required = false) String teamEndpoint) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /team : Create a new Team.
     * Create a new Team.  To specify a Team icon, the icon file must first be uploaded to Synapse as FileHandle.  The FileHandle ID can then be put into the Team&#39;s icon field. 
     *
     * @param team  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a new Team.", nickname = "createTeam", notes = "Create a new Team.  To specify a Team icon, the icon file must first be uploaded to Synapse as FileHandle.  The FileHandle ID can then be put into the Team's icon field. ", response = Team.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = Team.class) })
    @PostMapping(
        value = "/team",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Team> createTeam(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Team team) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"canPublicJoin\" : true, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"icon\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /team/{id} : Delete the Team.
     * Delete the Team. Note: The client must be a Team administrator to make this request. 
     *
     * @param id the ID of the Team. (required)
     * @return The resource has been deleted. (status code 204)
     */
    @ApiOperation(value = "Delete the Team.", nickname = "deleteTeam", notes = "Delete the Team. Note: The client must be a Team administrator to make this request. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted.") })
    @DeleteMapping(
        value = "/team/{id}"
    )
    default ResponseEntity<Void> deleteTeam(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id}/icon/preview : Retrieve the download URL for the Team icon preview, or receive a redirect response to said URL. 
     * Retrieve the download URL for the Team icon preview, or receive a redirect response to said URL. 
     *
     * @param id the ID of the Team. (required)
     * @param redirect if true or omitted, then redirect to the URL.  If false then simply return the URL.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve the download URL for the Team icon preview, or receive a redirect response to said URL. ", nickname = "filePreviewRedirectUrlForTeamIcon", notes = "Retrieve the download URL for the Team icon preview, or receive a redirect response to said URL. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/team/{id}/icon/preview",
        produces = { "application/json" }
    )
    default ResponseEntity<String> filePreviewRedirectUrlForTeamIcon(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = "if true or omitted, then redirect to the URL.  If false then simply return the URL. ") @Valid @RequestParam(value = "redirect", required = false) Boolean redirect) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id}/icon : Retrieve the download URL for the Team icon, or receive a redirect response to said URL 
     * Retrieve the download URL for the Team icon, or receive a redirect response to said URL.
     *
     * @param id the ID of the Team. (required)
     * @param redirect if true or omitted, then redirect to the URL.  If false then simply return the URL.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve the download URL for the Team icon, or receive a redirect response to said URL ", nickname = "fileRedirectUrlForTeamIcon", notes = "Retrieve the download URL for the Team icon, or receive a redirect response to said URL.", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/team/{id}/icon",
        produces = { "application/json" }
    )
    default ResponseEntity<String> fileRedirectUrlForTeamIcon(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = "if true or omitted, then redirect to the URL.  If false then simply return the URL. ") @Valid @RequestParam(value = "redirect", required = false) Boolean redirect) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id}/openInvitation : Retrieve the open invitations from a Team, optionally filtering by the invitee. 
     * Retrieve the open invitations from a Team, optionally filtering by the invitee. An invitation is only open if it has not expired and if the user has not joined the Team. Note: certain fields may be omitted when returned if the field value is null 
     *
     * @param id the ID of the Team. (required)
     * @param inviteeId the ID of the Synapse user to which invitations have been extended (optional)
     * @param limit the maximum number of invitations to return (optional, default to 10)
     * @param offset the starting index of the returned results (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve the open invitations from a Team, optionally filtering by the invitee. ", nickname = "getOpenInvitationsByTeam", notes = "Retrieve the open invitations from a Team, optionally filtering by the invitee. An invitation is only open if it has not expired and if the user has not joined the Team. Note: certain fields may be omitted when returned if the field value is null ", response = PaginatedResultsOfMembershipInvitation.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Membership Invitation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfMembershipInvitation.class) })
    @GetMapping(
        value = "/team/{id}/openInvitation",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfMembershipInvitation> getOpenInvitationsByTeam(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = "the ID of the Synapse user to which invitations have been extended") @Valid @RequestParam(value = "inviteeId", required = false) String inviteeId,@Min(10) @Max(100) @ApiParam(value = "the maximum number of invitations to return", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "the starting index of the returned results", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"effectiveSchema\" : \"...\", \"results\" : [ { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"expiresOn\" : \"...\", \"id\" : \"...\", \"inviteeEmail\" : \"...\", \"inviteeId\" : \"...\", \"message\" : \"...\", \"teamId\" : \"...\" }, { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"expiresOn\" : \"...\", \"id\" : \"...\", \"inviteeEmail\" : \"...\", \"inviteeId\" : \"...\", \"message\" : \"...\", \"teamId\" : \"...\" } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id}/openRequest : Retrieve the open requests submitted to a Team, optionally filtering by the requester.
     * Retrieve the open requests submitted to a Team, optionally filtering by the requester. An request is only open if it has not expired and if the requester has not been added the Team.  &lt;p&gt;  &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum frequency this method can be called&lt;/td&gt;  &lt;td&gt;40 calls per minute&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/p&gt;&#39; 
     *
     * @param id the ID of the Team. (required)
     * @param limit the maximum number of requests to return (default 10) (optional, default to 10)
     * @param offset the starting index of the returned results (default 0) (optional, default to 0)
     * @param requestorId the ID of the user requesting admission to the Team (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve the open requests submitted to a Team, optionally filtering by the requester.", nickname = "getOpenRequestsByTeam", notes = "Retrieve the open requests submitted to a Team, optionally filtering by the requester. An request is only open if it has not expired and if the requester has not been added the Team.  <p>  <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum frequency this method can be called</td>  <td>40 calls per minute</td>  </tr>  </table>  </p>' ", response = PaginatedResultsOfMembershipRequest.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Membership Request Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfMembershipRequest.class) })
    @GetMapping(
        value = "/team/{id}/openRequest",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfMembershipRequest> getOpenRequestsByTeam(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@Min(10) @Max(100) @ApiParam(value = "the maximum number of requests to return (default 10)", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "the starting index of the returned results (default 0)", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "the ID of the user requesting admission to the Team") @Valid @RequestParam(value = "requestorId", required = false) String requestorId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"effectiveSchema\" : \"...\", \"results\" : [ { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"expiresOn\" : \"...\", \"id\" : \"...\", \"message\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\" }, { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"expiresOn\" : \"...\", \"id\" : \"...\", \"message\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\" } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id} : Retrieve the metadata for a specified Team.
     * Retrieve the metadata for a specified Team.  &lt;p&gt;  &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum frequency this method can be called&lt;/td&gt;  &lt;td&gt;1 calls per second&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/p&gt; 
     *
     * @param id the ID of the Team. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve the metadata for a specified Team.", nickname = "getTeam", notes = "Retrieve the metadata for a specified Team.  <p>  <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum frequency this method can be called</td>  <td>1 calls per second</td>  </tr>  </table>  </p> ", response = Team.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Team.class) })
    @GetMapping(
        value = "/team/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Team> getTeam(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"canPublicJoin\" : true, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"icon\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id}/accessApproval : Retrieve the Access Approvals for the given Team.
     * Retrieve the Access Approvals for the given Team.  This service is only available to the ACT.
     *
     * @param id the ID of the Team. (required)
     * @param limit Limits the size of the page returned. For example, a page size of 10 require limit &#x3D; 10. The maximum limit for this call is 50.  (optional, default to 10)
     * @param offset The index of the pagination offset. For a page size of 10, the first page would be at offset &#x3D; 0, and the second page would be at offset &#x3D; 10.  (optional, default to 0)
     * @return Success (status code 200)
     *         or Success (status code 410)
     * @deprecated
     */
    @ApiOperation(value = "Retrieve the Access Approvals for the given Team.", nickname = "getTeamAccessApprovals", notes = "Retrieve the Access Approvals for the given Team.  This service is only available to the ACT.", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Approval Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class),
        @ApiResponse(code = 410, message = "Success") })
    @GetMapping(
        value = "/team/{id}/accessApproval",
        produces = { "application/json" }
    )
    default ResponseEntity<String> getTeamAccessApprovals(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@Min(10) @Max(50) @ApiParam(value = "Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum limit for this call is 50. ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id}/accessRequirement : Retrieve paginated list of ALL Access Requirements associated with a Team.
     * Retrieve paginated list of ALL Access Requirements associated with a Team. 
     *
     * @param id the ID of the Team. (required)
     * @param limit Limits the size of the page returned. For example, a page size of 10 require limit &#x3D; 10. The maximum limit for this call is 50.  (optional, default to 10)
     * @param offset The index of the pagination offset. For a page size of 10, the first page would be at offset &#x3D; 0, and the second page would be at offset &#x3D; 10.  (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve paginated list of ALL Access Requirements associated with a Team.", nickname = "getTeamAccessRequirements", notes = "Retrieve paginated list of ALL Access Requirements associated with a Team. ", response = PaginatedResultsOfAccessRequirement.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Requirement Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfAccessRequirement.class) })
    @GetMapping(
        value = "/team/{id}/accessRequirement",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfAccessRequirement> getTeamAccessRequirements(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@Min(10) @Max(50) @ApiParam(value = "Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum limit for this call is 50. ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"accessType\" : \"READ\", \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"subjectIds\" : [ { \"id\" : \"...\", \"type\" : \"EVALUATION\" }, { \"id\" : \"...\", \"type\" : \"TEAM\" } ], \"versionNumber\" : 12345 }, { \"accessType\" : \"UPLOAD\", \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"subjectIds\" : [ { \"id\" : \"...\", \"type\" : \"ENTITY\" }, { \"id\" : \"...\", \"type\" : \"TEAM\" } ], \"versionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id}/acl : Retrieve the AccessControlList for a specified Team.
     * Retrieve the AccessControlList for a specified Team.
     *
     * @param id the ID of the Team. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve the AccessControlList for a specified Team.", nickname = "getTeamAcl", notes = "Retrieve the AccessControlList for a specified Team.", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @GetMapping(
        value = "/team/{id}/acl",
        produces = { "application/json" }
    )
    default ResponseEntity<AccessControlList> getTeamAcl(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id}/member/{principalId} : .
     * &#39;&lt;p&gt;  &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum frequency this method can be called&lt;/td&gt;  &lt;td&gt;1 calls per second&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/p&gt;&#39; 
     *
     * @param id the ID of the Team. (required)
     * @param principalId the member&#39;s principal ID (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = ".", nickname = "getTeamMember", notes = "'<p>  <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum frequency this method can be called</td>  <td>1 calls per second</td>  </tr>  </table>  </p>' ", response = TeamMember.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TeamMember.class) })
    @GetMapping(
        value = "/team/{id}/member/{principalId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TeamMember> getTeamMember(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = "the member's principal ID",required=true) @PathVariable("principalId") String principalId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isAdmin\" : true, \"member\" : { \"displayName\" : \"...\", \"email\" : \"...\", \"firstName\" : \"...\", \"isIndividual\" : true, \"lastName\" : \"...\", \"ownerId\" : \"...\", \"userName\" : \"...\" }, \"teamId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /team/{id}/member/{principalId}/membershipStatus : Retrieve the Team Membership Status bundle for a team and user.
     * Retrieve the Team Membership Status bundle for a team and user.  This says whether a user is a member of a Team, whether there are outstanding membership requests or invitations, and whether the client making the request can add the given user to the given Team. 
     *
     * @param id the ID of the Team. (required)
     * @param principalId the member&#39;s principal ID (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve the Team Membership Status bundle for a team and user.", nickname = "getTeamMembershipStatus", notes = "Retrieve the Team Membership Status bundle for a team and user.  This says whether a user is a member of a Team, whether there are outstanding membership requests or invitations, and whether the client making the request can add the given user to the given Team. ", response = TeamMembershipStatus.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TeamMembershipStatus.class) })
    @GetMapping(
        value = "/team/{id}/member/{principalId}/membershipStatus",
        produces = { "application/json" }
    )
    default ResponseEntity<TeamMembershipStatus> getTeamMembershipStatus(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = "the member's principal ID",required=true) @PathVariable("principalId") String principalId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"canJoin\" : true, \"canSendEmail\" : true, \"hasOpenInvitation\" : true, \"hasOpenRequest\" : true, \"hasUnmetAccessRequirement\" : true, \"isMember\" : true, \"membershipApprovalRequired\" : true, \"teamId\" : \"...\", \"userId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /team/{id}/memberList : Returns the TeamMember info for a team and a given list of members&#39; principal IDs. 
     * Returns the TeamMember info for a team and a given list of members&#39; principal IDs. Invalid IDs in the list are ignored:  The results list is simply smaller than the list of IDs passed in. 
     *
     * @param id the ID of the Team. (required)
     * @param idList  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Returns the TeamMember info for a team and a given list of members' principal IDs. ", nickname = "listTeamMembersGivenTeamandUserList", notes = "Returns the TeamMember info for a team and a given list of members' principal IDs. Invalid IDs in the list are ignored:  The results list is simply smaller than the list of IDs passed in. ", response = ListWrapperOfTeamMember.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ListWrapperOfTeamMember.class) })
    @PostMapping(
        value = "/team/{id}/memberList",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ListWrapperOfTeamMember> listTeamMembersGivenTeamandUserList(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) IdList idList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"list\" : [ { \"isAdmin\" : true, \"member\" : { \"displayName\" : \"...\", \"email\" : \"...\", \"firstName\" : \"...\", \"isIndividual\" : true, \"lastName\" : \"...\", \"ownerId\" : \"...\", \"userName\" : \"...\" }, \"teamId\" : \"...\" }, { \"isAdmin\" : true, \"member\" : { \"displayName\" : \"...\", \"email\" : \"...\", \"firstName\" : \"...\", \"isIndividual\" : true, \"lastName\" : \"...\", \"ownerId\" : \"...\", \"userName\" : \"...\" }, \"teamId\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /team/{id}/member/{principalId} : Remove the given member from the specified Team.
     * Remove the given member from the specified Team. Note:  The client must either be a Team administrator or the member being removed. 
     *
     * @param id the ID of the Team. (required)
     * @param principalId the member&#39;s principal ID (required)
     * @return The resource has been deleted. (status code 204)
     */
    @ApiOperation(value = "Remove the given member from the specified Team.", nickname = "removeTeamMember", notes = "Remove the given member from the specified Team. Note:  The client must either be a Team administrator or the member being removed. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted.") })
    @DeleteMapping(
        value = "/team/{id}/member/{principalId}"
    )
    default ResponseEntity<Void> removeTeamMember(@ApiParam(value = "the ID of the Team.",required=true) @PathVariable("id") String id,@ApiParam(value = "the member's principal ID",required=true) @PathVariable("principalId") String principalId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /team : Update the Team metadata for the specified Team.
     * Update the Team metadata for the specified Team. Note: The client must be a Team administrator to make this request. 
     *
     * @param team the new metadata for the Team (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update the Team metadata for the specified Team.", nickname = "updateTeam", notes = "Update the Team metadata for the specified Team. Note: The client must be a Team administrator to make this request. ", response = Team.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Team.class) })
    @PutMapping(
        value = "/team",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Team> updateTeam(@ApiParam(value = "the new metadata for the Team"  )  @Valid @RequestBody(required = false) Team team) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"canPublicJoin\" : true, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"icon\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /team/acl : Update the Access Control List for the specified Team.
     * Update the Access Control List for the specified Team.
     *
     * @param accessControlList the updated Access Control List (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update the Access Control List for the specified Team.", nickname = "updateTeamAcl", notes = "Update the Access Control List for the specified Team.", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Team Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @PutMapping(
        value = "/team/acl",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessControlList> updateTeamAcl(@ApiParam(value = "the updated Access Control List"  )  @Valid @RequestBody(required = false) AccessControlList accessControlList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
