/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Challenge;
import org.openapitools.model.ChallengePagedResults;
import org.openapitools.model.ChallengeTeam;
import org.openapitools.model.ChallengeTeamPagedResults;
import org.openapitools.model.PaginatedIds;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "challenge", description = "the challenge API")
public interface ChallengeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /challenge : Create a Challenge object, associated with a Project.
     * Create a Challenge object, associated with a Project.  A participant Team must be specified.  To create a Challenge one must have CREATE permission on the associated Project. 
     *
     * @param challenge  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a Challenge object, associated with a Project.", nickname = "createChallenge", notes = "Create a Challenge object, associated with a Project.  A participant Team must be specified.  To create a Challenge one must have CREATE permission on the associated Project. ", response = Challenge.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = Challenge.class) })
    @PostMapping(
        value = "/challenge",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Challenge> createChallenge(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Challenge challenge) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"etag\" : \"32439w3qsdfw\", \"projectId\" : \"syn22222\", \"participantTeamId\" : \"333333\", \"id\" : \"4321\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /challenge/{challengeId}/challengeTeam : Register a Team with a Challenge.
     * Register a Team with a Challenge. You must be a member of the Challenge&#39;s participant Team (i.e. you must be already registered for the Challenge) and be an administrator on the Team being registered. 
     *
     * @param challengeId The ID of the challenge. (required)
     * @param challengeTeam  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Register a Team with a Challenge.", nickname = "createChallengeTeam", notes = "Register a Team with a Challenge. You must be a member of the Challenge's participant Team (i.e. you must be already registered for the Challenge) and be an administrator on the Team being registered. ", response = ChallengeTeam.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = ChallengeTeam.class) })
    @PostMapping(
        value = "/challenge/{challengeId}/challengeTeam",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ChallengeTeam> createChallengeTeam(@ApiParam(value = "The ID of the challenge.",required=true) @PathVariable("challengeId") Integer challengeId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ChallengeTeam challengeTeam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"1111\", \"teamId\" : \"222222\", \"challengeId\" : \"3423\", \"message\" : \"Testing\", \"etag\" : \"33492273ssdf\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /challenge/{challengeId} : Delete a Challenge.
     * Delete a Challenge.  The caller must have DELETE permission on the project associated with the Challenge. 
     *
     * @param challengeId The ID of the challenge. (required)
     * @return The resource was deleted successfully. (status code 204)
     */
    @ApiOperation(value = "Delete a Challenge.", nickname = "deleteChallenge", notes = "Delete a Challenge.  The caller must have DELETE permission on the project associated with the Challenge. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource was deleted successfully.") })
    @DeleteMapping(
        value = "/challenge/{challengeId}"
    )
    default ResponseEntity<Void> deleteChallenge(@ApiParam(value = "The ID of the challenge.",required=true) @PathVariable("challengeId") Integer challengeId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /challenge/{challengeId} : Retrieve a Challenge given its ID.
     * Retrieve a Challenge given its ID.  To retrieve a Challenge one must have READ permission on the associated Project. 
     *
     * @param challengeId The ID of the challenge. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve a Challenge given its ID.", nickname = "getChallenge", notes = "Retrieve a Challenge given its ID.  To retrieve a Challenge one must have READ permission on the associated Project. ", response = Challenge.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Challenge.class) })
    @GetMapping(
        value = "/challenge/{challengeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Challenge> getChallenge(@ApiParam(value = "The ID of the challenge.",required=true) @PathVariable("challengeId") Integer challengeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"etag\" : \"32439w3qsdfw\", \"projectId\" : \"syn22222\", \"participantTeamId\" : \"333333\", \"id\" : \"4321\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /challenge/{challengeId}/challengeTeam : List the Teams registered for a Challenge.
     * List the Teams registered for a Challenge.  You must have READ permission in the associated Project to make this request. 
     *
     * @param challengeId The ID of the challenge. (required)
     * @param limit Maximum number of results returned (optional, default to 10)
     * @param offset Index of the first result that must be returned (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List the Teams registered for a Challenge.", nickname = "listChallengeTeams", notes = "List the Teams registered for a Challenge.  You must have READ permission in the associated Project to make this request. ", response = ChallengeTeamPagedResults.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ChallengeTeamPagedResults.class) })
    @GetMapping(
        value = "/challenge/{challengeId}/challengeTeam",
        produces = { "application/json" }
    )
    default ResponseEntity<ChallengeTeamPagedResults> listChallengeTeams(@ApiParam(value = "The ID of the challenge.",required=true) @PathVariable("challengeId") Integer challengeId,@Min(10) @Max(100) @ApiParam(value = "Maximum number of results returned", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "Index of the first result that must be returned", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalNumberOfResults\" : 12345, \"results\" : [ { \"id\" : \"1111\", \"teamId\" : \"222222\", \"challengeId\" : \"3423\", \"message\" : \"Testing\", \"etag\" : \"33492273ssdf\" }, { \"id\" : \"1112\", \"teamId\" : \"222233\", \"challengeId\" : \"3421\", \"message\" : \"Testing foo\", \"etag\" : \"33492273ssdddf\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /challenge : List the Challenges for which the given participant is registered.
     * List the Challenges for which the given participant is registered. To be in the returned list the caller must have READ permission on the project associated with the Challenge. 
     *
     * @param participantId Synapse user id (required)
     * @param limit Maximum number of results returned (optional, default to 10)
     * @param offset Index of the first result that must be returned (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List the Challenges for which the given participant is registered.", nickname = "listChallengesForParticipant", notes = "List the Challenges for which the given participant is registered. To be in the returned list the caller must have READ permission on the project associated with the Challenge. ", response = ChallengePagedResults.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ChallengePagedResults.class) })
    @GetMapping(
        value = "/challenge",
        produces = { "application/json" }
    )
    default ResponseEntity<ChallengePagedResults> listChallengesForParticipant(@NotNull @ApiParam(value = "Synapse user id", required = true) @Valid @RequestParam(value = "participantId", required = true) Integer participantId,@Min(10) @Max(100) @ApiParam(value = "Maximum number of results returned", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "Index of the first result that must be returned", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalNumberOfResults\" : 12345, \"results\" : [ { \"etag\" : \"32439w3qsdfw\", \"projectId\" : \"syn22222\", \"participantTeamId\" : \"333333\", \"id\" : \"4321\" }, { \"etag\" : \"32439w3qsdfwasd\", \"projectId\" : \"syn33333\", \"participantTeamId\" : \"4444\", \"id\" : \"4322\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /challenge/{challengeId}/participant : List the participants registered for a Challenge.
     * List the participants registered for a Challenge. The caller must have READ permission on the project associated with the Challenge.
     *
     * @param challengeId The ID of the challenge. (required)
     * @param affiliated If affiliated&#x3D;true, return just participants affiliated with some registered Team.  If false, return those not affiliated with any registered Team. If omitted return all participants.  (optional)
     * @param limit Maximum number of results returned (optional, default to 10)
     * @param offset Index of the first result that must be returned (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List the participants registered for a Challenge.", nickname = "listParticipantsInChallenge", notes = "List the participants registered for a Challenge. The caller must have READ permission on the project associated with the Challenge.", response = PaginatedIds.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedIds.class) })
    @GetMapping(
        value = "/challenge/{challengeId}/participant",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedIds> listParticipantsInChallenge(@ApiParam(value = "The ID of the challenge.",required=true) @PathVariable("challengeId") Integer challengeId,@ApiParam(value = "If affiliated=true, return just participants affiliated with some registered Team.  If false, return those not affiliated with any registered Team. If omitted return all participants. ") @Valid @RequestParam(value = "affiliated", required = false) Boolean affiliated,@Min(10) @Max(100) @ApiParam(value = "Maximum number of results returned", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "Index of the first result that must be returned", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalNumberOfResults\" : 12345, \"results\" : [ \"test1\", \"test2\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /challenge/{challengeId}/registratableTeam : List the Teams that caller can register for the Challenge.
     * List the Teams that caller can register for the Challenge, i.e. Teams on which the caller is an administrator and which are not already registered. The caller must have READ permission on the project associated with the Challenge to make this request. 
     *
     * @param challengeId The ID of the challenge. (required)
     * @param limit Maximum number of results returned (optional, default to 10)
     * @param offset Index of the first result that must be returned (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List the Teams that caller can register for the Challenge.", nickname = "listRegistratableTeams", notes = "List the Teams that caller can register for the Challenge, i.e. Teams on which the caller is an administrator and which are not already registered. The caller must have READ permission on the project associated with the Challenge to make this request. ", response = PaginatedIds.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedIds.class) })
    @GetMapping(
        value = "/challenge/{challengeId}/registratableTeam",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedIds> listRegistratableTeams(@ApiParam(value = "The ID of the challenge.",required=true) @PathVariable("challengeId") Integer challengeId,@Min(10) @Max(100) @ApiParam(value = "Maximum number of results returned", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "Index of the first result that must be returned", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalNumberOfResults\" : 12345, \"results\" : [ \"test1\", \"test2\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /challenge/{challengeId}/submissionTeams : List the Teams under which the given submitter may submit to the Challenge.
     * List the Teams under which the given submitter may submit to the Challenge, i.e. the Teams on which the user is a member and which are registered for the Challenge. 
     *
     * @param challengeId The ID of the challenge. (required)
     * @param limit Maximum number of results returned (optional, default to 10)
     * @param offset Index of the first result that must be returned (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List the Teams under which the given submitter may submit to the Challenge.", nickname = "listSubmissionTeams", notes = "List the Teams under which the given submitter may submit to the Challenge, i.e. the Teams on which the user is a member and which are registered for the Challenge. ", response = PaginatedIds.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedIds.class) })
    @GetMapping(
        value = "/challenge/{challengeId}/submissionTeams",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedIds> listSubmissionTeams(@ApiParam(value = "The ID of the challenge.",required=true) @PathVariable("challengeId") Integer challengeId,@Min(10) @Max(100) @ApiParam(value = "Maximum number of results returned", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "Index of the first result that must be returned", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalNumberOfResults\" : 12345, \"results\" : [ \"test1\", \"test2\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /challenge/{challengeId} : Update a Challenge.
     * Update a Challenge.  The caller must have UPDATE permission on the project associated with the Challenge.  It is not permitted to change the project associated with a Challenge. 
     *
     * @param challengeId The ID of the challenge. (required)
     * @param challenge  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update a Challenge.", nickname = "updateChallenge", notes = "Update a Challenge.  The caller must have UPDATE permission on the project associated with the Challenge.  It is not permitted to change the project associated with a Challenge. ", response = Challenge.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Challenge.class) })
    @PutMapping(
        value = "/challenge/{challengeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Challenge> updateChallenge(@ApiParam(value = "The ID of the challenge.",required=true) @PathVariable("challengeId") Integer challengeId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Challenge challenge) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"etag\" : \"32439w3qsdfw\", \"projectId\" : \"syn22222\", \"participantTeamId\" : \"333333\", \"id\" : \"4321\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /challenge/{challengeId}/challengeTeam/{challengeTeamId} : Update a Challenge Team.
     * Update a Challenge Team. You must be a member of the Challenge&#39;s participant Team (i.e. you must be already registered for the Challenge) and be an administrator on the associated Team. 
     *
     * @param challengeId The ID of the challenge. (required)
     * @param challengeTeamId The ID of the challenge team. (required)
     * @param challengeTeam  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update a Challenge Team.", nickname = "updateChallengeTeam", notes = "Update a Challenge Team. You must be a member of the Challenge's participant Team (i.e. you must be already registered for the Challenge) and be an administrator on the associated Team. ", response = ChallengeTeam.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ChallengeTeam.class) })
    @PutMapping(
        value = "/challenge/{challengeId}/challengeTeam/{challengeTeamId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ChallengeTeam> updateChallengeTeam(@ApiParam(value = "The ID of the challenge.",required=true) @PathVariable("challengeId") Integer challengeId,@ApiParam(value = "The ID of the challenge team.",required=true) @PathVariable("challengeTeamId") Integer challengeTeamId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ChallengeTeam challengeTeam) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"1111\", \"teamId\" : \"222222\", \"challengeId\" : \"3423\", \"message\" : \"Testing\", \"etag\" : \"33492273ssdf\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
