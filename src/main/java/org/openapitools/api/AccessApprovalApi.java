/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccessApproval;
import org.openapitools.model.AccessApprovalNotificationRequest;
import org.openapitools.model.AccessApprovalNotificationResponse;
import org.openapitools.model.AccessorGroupRequest;
import org.openapitools.model.AccessorGroupResponse;
import org.openapitools.model.BatchAccessApprovalInfoRequest;
import org.openapitools.model.BatchAccessApprovalInfoResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "accessApproval", description = "the accessApproval API")
public interface AccessApprovalApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /accessApproval : Create an Access Approval, thereby fulfilling an Access Requirement for a given user. 
     * Create an Access Approval, thereby fulfilling an Access Requirement for a given user.  Self-signed Access Approvals may be generated by the user being approved.  ACT Access Approvals may be generated only by the Synapse Access and Compliance Team (ACT).  Since an Access Requirement may apply to multiple entities, fulfilling an Access Requirement provides access to all entities restricted by the fulfilled requirement. 
     *
     * @param accessApproval the Access Approval to create (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create an Access Approval, thereby fulfilling an Access Requirement for a given user. ", nickname = "createAccessApproval", notes = "Create an Access Approval, thereby fulfilling an Access Requirement for a given user.  Self-signed Access Approvals may be generated by the user being approved.  ACT Access Approvals may be generated only by the Synapse Access and Compliance Team (ACT).  Since an Access Requirement may apply to multiple entities, fulfilling an Access Requirement provides access to all entities restricted by the fulfilled requirement. ", response = AccessApproval.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Approval Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AccessApproval.class) })
    @PostMapping(
        value = "/accessApproval",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessApproval> createAccessApproval(@ApiParam(value = "the Access Approval to create"  )  @Valid @RequestBody(required = false) AccessApproval accessApproval) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessorId\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"expiredOn\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"requirementId\" : 12345, \"requirementVersion\" : 12345, \"state\" : \"APPROVED\", \"submitterId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /accessApproval/{approvalId} : Delete an Access Approval.
     * Delete a selected Access Approval.  This service is only available to the ACT. 
     *
     * @param approvalId The ID of the approval. (required)
     * @return The resource has been deleted. (status code 204)
     * @deprecated
     */
    @ApiOperation(value = "Delete an Access Approval.", nickname = "deleteAccessApproval", notes = "Delete a selected Access Approval.  This service is only available to the ACT. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Approval Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted.") })
    @DeleteMapping(
        value = "/accessApproval/{approvalId}"
    )
    default ResponseEntity<Void> deleteAccessApproval(@ApiParam(value = "The ID of the approval.",required=true) @PathVariable("approvalId") String approvalId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accessApproval/{approvalId} : Retrieving an AccessApproval given its ID.
     * Retrieving an AccessApproval given its ID.
     *
     * @param approvalId The ID of the approval. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieving an AccessApproval given its ID.", nickname = "getAccessApproval", notes = "Retrieving an AccessApproval given its ID.", response = AccessApproval.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Approval Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessApproval.class) })
    @GetMapping(
        value = "/accessApproval/{approvalId}",
        produces = { "application/json" }
    )
    default ResponseEntity<AccessApproval> getAccessApproval(@ApiParam(value = "The ID of the approval.",required=true) @PathVariable("approvalId") String approvalId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessorId\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"expiredOn\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"requirementId\" : 12345, \"requirementVersion\" : 12345, \"state\" : \"APPROVED\", \"submitterId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accessApproval/information : Retrieve a batch of AccessApprovalInfo for a single user.
     * Retrieve a batch of AccessApprovalInfo for a single user.
     *
     * @param batchAccessApprovalInfoRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve a batch of AccessApprovalInfo for a single user.", nickname = "getBatchAccessApprovalInfo", notes = "Retrieve a batch of AccessApprovalInfo for a single user.", response = BatchAccessApprovalInfoResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Approval Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BatchAccessApprovalInfoResponse.class) })
    @PostMapping(
        value = "/accessApproval/information",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BatchAccessApprovalInfoResponse> getBatchAccessApprovalInfo(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) BatchAccessApprovalInfoRequest batchAccessApprovalInfoRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"accessRequirementId\" : \"...\", \"hasAccessApproval\" : true, \"userId\" : \"...\" }, { \"accessRequirementId\" : \"...\", \"hasAccessApproval\" : true, \"userId\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accessApproval/group : Retrieving a page of AccessorGroup.
     * Retrieving a page of AccessorGroup.  This service is only available for ACT. ACT can filter on AccessRequirementId, submitterId, and expiredOn by setting the associated fields in AccessorGroupRequest.&#39; 
     *
     * @param accessorGroupRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieving a page of AccessorGroup.", nickname = "listAccessorGroup", notes = "Retrieving a page of AccessorGroup.  This service is only available for ACT. ACT can filter on AccessRequirementId, submitterId, and expiredOn by setting the associated fields in AccessorGroupRequest.' ", response = AccessorGroupResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Approval Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessorGroupResponse.class) })
    @PostMapping(
        value = "/accessApproval/group",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessorGroupResponse> listAccessorGroup(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AccessorGroupRequest accessorGroupRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"results\" : [ { \"accessRequirementId\" : \"...\", \"accessorIds\" : [ \"...\", \"...\" ], \"expiredOn\" : \"...\", \"submitterId\" : \"...\" }, { \"accessRequirementId\" : \"...\", \"accessorIds\" : [ \"...\", \"...\" ], \"expiredOn\" : \"...\", \"submitterId\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accessApproval/notifications : Fetches the notifications sent for an access requirement and a list of recipients. 
     * Fetches the notifications sent for an access requirement and a list of recipients.  This service is only available for ACT. 
     *
     * @param accessApprovalNotificationRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Fetches the notifications sent for an access requirement and a list of recipients. ", nickname = "listNotifications", notes = "Fetches the notifications sent for an access requirement and a list of recipients.  This service is only available for ACT. ", response = AccessApprovalNotificationResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Approval Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessApprovalNotificationResponse.class) })
    @PostMapping(
        value = "/accessApproval/notifications",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessApprovalNotificationResponse> listNotifications(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AccessApprovalNotificationRequest accessApprovalNotificationRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"requirementId\" : 12345, \"results\" : [ { \"notificationType\" : \"REVOCATION\", \"recipientId\" : 12345, \"requirementId\" : 12345, \"sentOn\" : \"...\" }, { \"notificationType\" : \"REVOCATION\", \"recipientId\" : 12345, \"requirementId\" : 12345, \"sentOn\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /accessApproval : Revoke all Access Approvals an accessor may have for a given Access Requirement.
     * Revoke all Access Approvals an accessor may have for a given Access Requirement.  This service is only available to the ACT. Note: requirementId must be the ID of an ACT AccessRequirement. 
     *
     * @param accessorId The user whose access is being revoked (required)
     * @param requirementId The ID of the Access Requirement. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Revoke all Access Approvals an accessor may have for a given Access Requirement.", nickname = "revokeAccessApprovals", notes = "Revoke all Access Approvals an accessor may have for a given Access Requirement.  This service is only available to the ACT. Note: requirementId must be the ID of an ACT AccessRequirement. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Approval Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @DeleteMapping(
        value = "/accessApproval",
        produces = { "application/json" }
    )
    default ResponseEntity<String> revokeAccessApprovals(@NotNull @ApiParam(value = "The user whose access is being revoked", required = true) @Valid @RequestParam(value = "accessorId", required = true) String accessorId,@NotNull @ApiParam(value = "The ID of the Access Requirement.", required = true) @Valid @RequestParam(value = "requirementId", required = true) String requirementId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
