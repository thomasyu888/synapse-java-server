/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccessControlList;
import org.openapitools.model.BatchUploadResponse;
import org.openapitools.model.BooleanResult;
import org.openapitools.model.Evaluation;
import org.openapitools.model.EvaluationRound;
import org.openapitools.model.EvaluationRoundListRequest;
import org.openapitools.model.EvaluationRoundListResponse;
import org.openapitools.model.PaginatedResultsOfEvaluation;
import org.openapitools.model.PaginatedResultsOfSubmission;
import org.openapitools.model.PaginatedResultsOfSubmissionBundle;
import org.openapitools.model.PaginatedResultsOfSubmissionStatus;
import org.openapitools.model.SubmissionModel;
import org.openapitools.model.SubmissionStatusBatch;
import org.openapitools.model.SubmissionStatusModel;
import org.openapitools.model.TeamSubmissionEligibility;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "evaluation", description = "the evaluation API")
public interface EvaluationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /evaluation : Creates a new Evaluation.
     * &#39;Creates a new Evaluation. The passed request body should contain the following fields:  &lt;ul&gt;  &lt;li&gt;name - Give your new Evaluation a name.&lt;/li&gt;  &lt;li&gt;contentSource - The ID of the parent Entity, such as a Folder or Project.&lt;/li&gt;  &lt;li&gt;status - The initial state of the Evaluation, an  &lt;a href&#x3D;\&quot;${org.sagebionetworks.evaluation.model.EvaluationStatus}\&quot;&gt;EvaluationStatus&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;  &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.CREATE&lt;/a&gt; on the contentSource Entity.  &lt;/p&gt; 
     *
     * @param evaluation  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Creates a new Evaluation.", nickname = "createEvaluation", notes = "'Creates a new Evaluation. The passed request body should contain the following fields:  <ul>  <li>name - Give your new Evaluation a name.</li>  <li>contentSource - The ID of the parent Entity, such as a Folder or Project.</li>  <li>status - The initial state of the Evaluation, an  <a href=\"${org.sagebionetworks.evaluation.model.EvaluationStatus}\">EvaluationStatus</a></li>  </ul>  <p>  <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CREATE</a> on the contentSource Entity.  </p> ", response = Evaluation.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = Evaluation.class) })
    @PostMapping(
        value = "/evaluation",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Evaluation> createEvaluation(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Evaluation evaluation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /evaluation/{evalId}/round : Create Evaluation Round
     * Create Evaluation Round
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param evaluationRound  (optional)
     * @return Success (status code 201)
     * @deprecated
     */
    @ApiOperation(value = "Create Evaluation Round", nickname = "createEvaluationRound", notes = "Create Evaluation Round", response = EvaluationRound.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = EvaluationRound.class) })
    @PostMapping(
        value = "/evaluation/{evalId}/round",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EvaluationRound> createEvaluationRound(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EvaluationRound evaluationRound) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"etag\" : \"...\", \"evaluationId\" : \"...\", \"id\" : \"...\", \"limits\" : [ { \"limitType\" : \"TOTAL\", \"maximumSubmissions\" : 12345 }, { \"limitType\" : \"WEEKLY\", \"maximumSubmissions\" : 12345 } ], \"roundEnd\" : \"12345\", \"roundStart\" : \"12345\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /evaluation/submission : Creates a Submission and sends a submission notification email to the submitter&#39;s team members. 
     * Creates a Submission and sends a submission notification email to the submitter&#39;s team members.  The passed request body should contain the following fields:  &lt;ul&gt;  &lt;li&gt;evaluationId - The ID of the Evaluation to which this Submission belongs.&lt;/li&gt;  &lt;li&gt;entityId - The ID of the Entity being submitted.&lt;/li&gt;  &lt;li&gt;versionNumber - The specific version of the Entity being submitted.&lt;/li&gt;  &lt;/ul&gt;  &lt;p&gt;  A Submission must be either a Team or an Individual submission.  A Team submission must include a Team ID in the teamId field and the request must include a submissionEligibilityHash request parameter.  A Team submission may also include a list of submission contributors. (The submitter is taken to be a contributor and need not be included in the list.) An individual submission must have a null teamId, a null or empty contributor list, and no submissionEligibilityHash parameter.  &lt;/p&gt;  &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.SUBMIT&lt;/a&gt;.  &lt;/p&gt;  &lt;p&gt;  This call also creates an associated &lt;a href&#x3D;\&quot;${org.sagebionetworks.evaluation.model.SubmissionStatus}\&quot;&gt;SubmissionStatus&lt;/a&gt;, initialized with a SubmissionStatusEnum value of RECEIVED.  &lt;/p&gt; 
     *
     * @param challengeEndpoint The portal endpoint prefix to the an entity/challenge page. The entity ID of the challenge project is appended to create the complete URL. In normal operation, this parameter should be omitted.&#39;  (optional)
     * @param etag The current eTag of the Entity being submitted (optional)
     * @param notificationUnsubscribeEndpoint The portal endpoint prefix for one-click email unsubscription. A signed, serialized token is appended to create the complete URL: &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}\&quot;&gt;NotificationSettingsSignedToken&lt;/a&gt;. In normal operation, this parameter should be omitted.&#39;  (optional)
     * @param submissionEligibilityHash The hash provided by the &lt;a href&#x3D;\&quot;${org.sagebionetworks.evaluation.model.TeamSubmissionEligibility}\&quot;&gt;TeamSubmissionEligibility&lt;/a&gt; object.  (optional)
     * @param submissionModel  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Creates a Submission and sends a submission notification email to the submitter's team members. ", nickname = "createSubmission", notes = "Creates a Submission and sends a submission notification email to the submitter's team members.  The passed request body should contain the following fields:  <ul>  <li>evaluationId - The ID of the Evaluation to which this Submission belongs.</li>  <li>entityId - The ID of the Entity being submitted.</li>  <li>versionNumber - The specific version of the Entity being submitted.</li>  </ul>  <p>  A Submission must be either a Team or an Individual submission.  A Team submission must include a Team ID in the teamId field and the request must include a submissionEligibilityHash request parameter.  A Team submission may also include a list of submission contributors. (The submitter is taken to be a contributor and need not be included in the list.) An individual submission must have a null teamId, a null or empty contributor list, and no submissionEligibilityHash parameter.  </p>  <p>  <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.SUBMIT</a>.  </p>  <p>  This call also creates an associated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionStatus}\">SubmissionStatus</a>, initialized with a SubmissionStatusEnum value of RECEIVED.  </p> ", response = SubmissionModel.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = SubmissionModel.class) })
    @PostMapping(
        value = "/evaluation/submission",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SubmissionModel> createSubmission(@ApiParam(value = "The portal endpoint prefix to the an entity/challenge page. The entity ID of the challenge project is appended to create the complete URL. In normal operation, this parameter should be omitted.' ") @Valid @RequestParam(value = "challengeEndpoint", required = false) String challengeEndpoint,@ApiParam(value = "The current eTag of the Entity being submitted") @Valid @RequestParam(value = "etag", required = false) String etag,@ApiParam(value = "The portal endpoint prefix for one-click email unsubscription. A signed, serialized token is appended to create the complete URL: <a href=\"${org.sagebionetworks.repo.model.message.NotificationSettingsSignedToken}\">NotificationSettingsSignedToken</a>. In normal operation, this parameter should be omitted.' ") @Valid @RequestParam(value = "notificationUnsubscribeEndpoint", required = false) String notificationUnsubscribeEndpoint,@ApiParam(value = "The hash provided by the <a href=\"${org.sagebionetworks.evaluation.model.TeamSubmissionEligibility}\">TeamSubmissionEligibility</a> object. ") @Valid @RequestParam(value = "submissionEligibilityHash", required = false) String submissionEligibilityHash,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) SubmissionModel submissionModel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contributors\" : [ { \"createdOn\" : \"...\", \"principalId\" : \"...\" }, { \"createdOn\" : \"...\", \"principalId\" : \"...\" } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /evaluation/{evalId}/acl : This method is deprecated and should be removed from future versions of the API.
     * This method is deprecated and should be removed from future versions of the API.  Deletes the ACL (access control list) of the specified evaluation. The user should have the proper &lt;a href&#x3D;\&quot;${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\&quot;&gt;permissions&lt;/a&gt; to delete the ACL. 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @return The resource was deleted (status code 204)
     * @deprecated
     */
    @ApiOperation(value = "This method is deprecated and should be removed from future versions of the API.", nickname = "deleteAcl", notes = "This method is deprecated and should be removed from future versions of the API.  Deletes the ACL (access control list) of the specified evaluation. The user should have the proper <a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a> to delete the ACL. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource was deleted") })
    @DeleteMapping(
        value = "/evaluation/{evalId}/acl"
    )
    default ResponseEntity<Void> deleteAcl(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /evaluation/{evalId} : Deletes an Evaluation.
     * Deletes an Evaluation.  &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.DELETE&lt;/a&gt; on the specified Evaluation.  &lt;/p&gt; 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @return The resource was deleted. (status code 204)
     */
    @ApiOperation(value = "Deletes an Evaluation.", nickname = "deleteEvaluation", notes = "Deletes an Evaluation.  <p>  <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.DELETE</a> on the specified Evaluation.  </p> ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource was deleted.") })
    @DeleteMapping(
        value = "/evaluation/{evalId}"
    )
    default ResponseEntity<Void> deleteEvaluation(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /evaluation/{evalId}/round/{roundId} : Delete Evaluation Round
     * Delete Evaluation Round
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param roundId The ID of the evaluation round (required)
     * @return The resouce has been deleted (status code 204)
     * @deprecated
     */
    @ApiOperation(value = "Delete Evaluation Round", nickname = "deleteEvaluationRound", notes = "Delete Evaluation Round", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resouce has been deleted") })
    @DeleteMapping(
        value = "/evaluation/{evalId}/round/{roundId}"
    )
    default ResponseEntity<Void> deleteEvaluationRound(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@ApiParam(value = "The ID of the evaluation round",required=true) @PathVariable("roundId") String roundId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /evaluation/submission/{subId} : Deletes a Submission and its accompanying SubmissionStatus.
     * Deletes a Submission and its accompanying SubmissionStatus.  &lt;b&gt;This service is intended to only be used by ChallengesInfrastructure service account.&lt;/b&gt;  &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.DELETE_SUBMISSION&lt;/a&gt; on the specified Evaluation.  &lt;/p&gt; 
     *
     * @param subId The ID of the Submission (required)
     * @return The resource has been deleted. (status code 204)
     */
    @ApiOperation(value = "Deletes a Submission and its accompanying SubmissionStatus.", nickname = "deleteSubmission", notes = "Deletes a Submission and its accompanying SubmissionStatus.  <b>This service is intended to only be used by ChallengesInfrastructure service account.</b>  <p>  <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.DELETE_SUBMISSION</a> on the specified Evaluation.  </p> ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted.") })
    @DeleteMapping(
        value = "/evaluation/submission/{subId}"
    )
    default ResponseEntity<Void> deleteSubmission(@ApiParam(value = "The ID of the Submission",required=true) @PathVariable("subId") String subId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/name/{name} : Finds an Evaluation by name.
     * Finds an Evaluation by name. &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ&lt;/a&gt; on the specified Evaluation. &lt;/p&gt; 
     *
     * @param name The name of the desired Evaluation. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Finds an Evaluation by name.", nickname = "findEvaluation", notes = "Finds an Evaluation by name. <p> <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> on the specified Evaluation. </p> ", response = Evaluation.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Evaluation.class) })
    @GetMapping(
        value = "/evaluation/name/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<Evaluation> findEvaluation(@ApiParam(value = "The name of the desired Evaluation.",required=true) @PathVariable("name") String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/acl : Gets the access control list (ACL) governing the given evaluation.
     * Gets the access control list (ACL) governing the given evaluation. The user should have the proper &lt;a href&#x3D;\&quot;${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\&quot;&gt;permissions&lt;/a&gt; to read the ACL. 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets the access control list (ACL) governing the given evaluation.", nickname = "getAcl", notes = "Gets the access control list (ACL) governing the given evaluation. The user should have the proper <a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a> to read the ACL. ", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/acl",
        produces = { "application/json" }
    )
    default ResponseEntity<AccessControlList> getAcl(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /evaluation/{evalId}/round/list : Get all rounds of an Evaluation
     * Get all rounds of an Evaluation
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param evaluationRoundListRequest  (optional)
     * @return Success (status code 200)
     * @deprecated
     */
    @ApiOperation(value = "Get all rounds of an Evaluation", nickname = "getAllEvaluationRounds", notes = "Get all rounds of an Evaluation", response = EvaluationRoundListResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EvaluationRoundListResponse.class) })
    @PostMapping(
        value = "/evaluation/{evalId}/round/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EvaluationRoundListResponse> getAllEvaluationRounds(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EvaluationRoundListRequest evaluationRoundListRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"page\" : [ { \"etag\" : \"...\", \"evaluationId\" : \"...\", \"id\" : \"...\", \"limits\" : [ { \"limitType\" : \"TOTAL\", \"maximumSubmissions\" : 12345 }, { \"limitType\" : \"TOTAL\", \"maximumSubmissions\" : 12345 } ], \"roundEnd\" : \"12345\", \"roundStart\" : \"12345\" }, { \"etag\" : \"...\", \"evaluationId\" : \"...\", \"id\" : \"...\", \"limits\" : [ { \"limitType\" : \"TOTAL\", \"maximumSubmissions\" : 12345 }, { \"limitType\" : \"MONTHLY\", \"maximumSubmissions\" : 12345 } ], \"roundEnd\" : \"12345\", \"roundStart\" : \"12345\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/submission/bundle/all : Gets a collection of bundled Submissions and SubmissionStatuses to a given Evaluation.
     * Gets a collection of bundled Submissions and SubmissionStatuses to a given Evaluation.  &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ_PRIVATE_SUBMISSION&lt;/a&gt; on the specified Evaluation. &lt;/p&gt; 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param limit Limits the number of entities that will be fetched for this page. When null it will default to 10.&#39;  (optional, default to 10)
     * @param offset The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0.  (optional, default to 0)
     * @param status Submission Status (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets a collection of bundled Submissions and SubmissionStatuses to a given Evaluation.", nickname = "getAllSubmissionBundles", notes = "Gets a collection of bundled Submissions and SubmissionStatuses to a given Evaluation.  <p> <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation. </p> ", response = PaginatedResultsOfSubmissionBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfSubmissionBundle.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/submission/bundle/all",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfSubmissionBundle> getAllSubmissionBundles(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@Min(10) @Max(100) @ApiParam(value = "Limits the number of entities that will be fetched for this page. When null it will default to 10.' ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@ApiParam(value = "The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Submission Status") @Valid @RequestParam(value = "status", required = false) String status) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"submission\" : { \"contributors\" : [ { }, { } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 }, \"submissionStatus\" : { \"annotations\" : { }, \"canCancel\" : true, \"cancelRequested\" : true, \"entityId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedOn\" : \"...\", \"status\" : \"REJECTED\", \"statusVersion\" : 12345, \"submissionAnnotations\" : { }, \"versionNumber\" : 12345 } }, { \"submission\" : { \"contributors\" : [ { }, { } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 }, \"submissionStatus\" : { \"annotations\" : { }, \"canCancel\" : true, \"cancelRequested\" : true, \"entityId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedOn\" : \"...\", \"status\" : \"VALIDATED\", \"statusVersion\" : 12345, \"submissionAnnotations\" : { }, \"versionNumber\" : 12345 } } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/submission/status/all : Gets a collection of SubmissionStatuses to a specified Evaluation.
     * &#39;Gets a collection of SubmissionStatuses to a specified Evaluation.  &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ&lt;/a&gt; on the specified Evaluation. Furthermore, the caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ_PRIVATE_SUBMISSION&lt;/a&gt; to see all data marked as \&quot;private\&quot; in the SubmissionStatuses.  &lt;/p&gt; 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param limit Limits the number of entities that will be fetched for this page. When null it will default to 10.&#39;  (optional, default to 10)
     * @param offset The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0.  (optional, default to 0)
     * @param status Submission status (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets a collection of SubmissionStatuses to a specified Evaluation.", nickname = "getAllSubmissionStatuses", notes = "'Gets a collection of SubmissionStatuses to a specified Evaluation.  <p>  <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> on the specified Evaluation. Furthermore, the caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> to see all data marked as \"private\" in the SubmissionStatuses.  </p> ", response = PaginatedResultsOfSubmissionStatus.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfSubmissionStatus.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/submission/status/all",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfSubmissionStatus> getAllSubmissionStatuses(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@Min(10) @Max(100) @ApiParam(value = "Limits the number of entities that will be fetched for this page. When null it will default to 10.' ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@ApiParam(value = "The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Submission status") @Valid @RequestParam(value = "status", required = false) String status) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"annotations\" : { \"doubleAnnos\" : [ { }, { } ], \"longAnnos\" : [ { }, { } ], \"objectId\" : \"...\", \"scopeId\" : \"...\", \"stringAnnos\" : [ { }, { } ], \"version\" : 12345 }, \"canCancel\" : true, \"cancelRequested\" : true, \"entityId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedOn\" : \"...\", \"status\" : \"ACCEPTED\", \"statusVersion\" : 12345, \"submissionAnnotations\" : { \"annotations\" : { \"property1\" : { }, \"property2\" : { } }, \"etag\" : \"...\", \"id\" : \"...\" }, \"versionNumber\" : 12345 }, { \"annotations\" : { \"doubleAnnos\" : [ { }, { } ], \"longAnnos\" : [ { }, { } ], \"objectId\" : \"...\", \"scopeId\" : \"...\", \"stringAnnos\" : [ { }, { } ], \"version\" : 12345 }, \"canCancel\" : true, \"cancelRequested\" : true, \"entityId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedOn\" : \"...\", \"status\" : \"ACCEPTED\", \"statusVersion\" : 12345, \"submissionAnnotations\" : { \"annotations\" : { \"property1\" : { }, \"property2\" : { } }, \"etag\" : \"...\", \"id\" : \"...\" }, \"versionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/submission/all : Gets a collection of Submissions to a specified Evaluation.
     * &#39;Gets a collection of Submissions to a specified Evaluation. &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ_PRIVATE_SUBMISSION&lt;/a&gt; on the specified Evaluation. &lt;/p&gt; 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param limit Limits the number of entities that will be fetched for this page. When null it will default to 10, max value 100.  (optional, default to 10)
     * @param offset The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0.  (optional, default to 0)
     * @param status Status of submission. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets a collection of Submissions to a specified Evaluation.", nickname = "getAllSubmissions", notes = "'Gets a collection of Submissions to a specified Evaluation. <p> <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation. </p> ", response = PaginatedResultsOfSubmission.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfSubmission.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/submission/all",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfSubmission> getAllSubmissions(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@Min(10) @Max(100) @ApiParam(value = "Limits the number of entities that will be fetched for this page. When null it will default to 10, max value 100. ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@ApiParam(value = "The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Status of submission.") @Valid @RequestParam(value = "status", required = false) String status) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"contributors\" : [ { \"createdOn\" : \"...\", \"principalId\" : \"...\" }, { \"createdOn\" : \"...\", \"principalId\" : \"...\" } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 }, { \"contributors\" : [ { \"createdOn\" : \"...\", \"principalId\" : \"...\" }, { \"createdOn\" : \"...\", \"principalId\" : \"...\" } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/available : Gets a collection of Evaluations in which the user has SUBMIT permission, within a given range. 
     * Gets a collection of Evaluations in which the user has SUBMIT permission, within a given range. &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; The response will contain only those Evaluations on which the caller must is granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.SUBMIT&lt;/a&gt; permission. &lt;/p&gt; 
     *
     * @param activeOnly Retrieve active only evaluation queues (optional, default to false)
     * @param evaluationIds an optional, comma-delimited list of evaluation IDs to which the response is limited  (optional)
     * @param limit Limits the number of entities that will be fetched for this page. When null it will default to 10.&#39;  (optional, default to 10)
     * @param offset The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0.  (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets a collection of Evaluations in which the user has SUBMIT permission, within a given range. ", nickname = "getAvailableEvaluationsPaginated", notes = "Gets a collection of Evaluations in which the user has SUBMIT permission, within a given range. <p> <b>Note:</b> The response will contain only those Evaluations on which the caller must is granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.SUBMIT</a> permission. </p> ", response = PaginatedResultsOfEvaluation.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfEvaluation.class) })
    @GetMapping(
        value = "/evaluation/available",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfEvaluation> getAvailableEvaluationsPaginated(@ApiParam(value = "Retrieve active only evaluation queues", defaultValue = "false") @Valid @RequestParam(value = "activeOnly", required = false, defaultValue="false") Boolean activeOnly,@ApiParam(value = "an optional, comma-delimited list of evaluation IDs to which the response is limited ") @Valid @RequestParam(value = "evaluationIds", required = false) String evaluationIds,@Min(10) @Max(100) @ApiParam(value = "Limits the number of entities that will be fetched for this page. When null it will default to 10.' ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@ApiParam(value = "The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalNumberOfResults\" : 0, \"results\" : [ { \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" }, { \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId} : Gets an Evaluation.
     * Gets an Evaluation.   &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a  href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;  &gt;ACCESS_TYPE.READ&lt;/a&gt; on the specified Evaluation.  &lt;/p&gt; 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets an Evaluation.", nickname = "getEvaluation", notes = "Gets an Evaluation.   <p>  <b>Note:</b> The caller must be granted the <a  href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\"  >ACCESS_TYPE.READ</a> on the specified Evaluation.  </p> ", response = Evaluation.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Evaluation.class) })
    @GetMapping(
        value = "/evaluation/{evalId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Evaluation> getEvaluation(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/round/{roundId} : Get Evaluation Round
     * Get Evaluation Round
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param roundId The ID of the evaluation round (required)
     * @return Success (status code 200)
     * @deprecated
     */
    @ApiOperation(value = "Get Evaluation Round", nickname = "getEvaluationRound", notes = "Get Evaluation Round", response = EvaluationRound.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EvaluationRound.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/round/{roundId}",
        produces = { "application/json" }
    )
    default ResponseEntity<EvaluationRound> getEvaluationRound(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@ApiParam(value = "The ID of the evaluation round",required=true) @PathVariable("roundId") String roundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"etag\" : \"...\", \"evaluationId\" : \"...\", \"id\" : \"...\", \"limits\" : [ { \"limitType\" : \"TOTAL\", \"maximumSubmissions\" : 12345 }, { \"limitType\" : \"WEEKLY\", \"maximumSubmissions\" : 12345 } ], \"roundEnd\" : \"12345\", \"roundStart\" : \"12345\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation : Gets a collection of Evaluations, within a given range.
     * Gets a collection of Evaluations, within a given range.  &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The response will contain only those Evaluations on which the caller is  granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ&lt;/a&gt;  permission, unless specified otherwise with the accessType parameter.  &lt;/p&gt; 
     *
     * @param accessType The type of access for the user to filter for, optional and defaults to &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ&lt;/a&gt;  (optional, default to READ)
     * @param activeOnly If &#39;true&#39; then return only those evaluations with rounds defined and for which the current time is in one of the rounds.  (optional, default to false)
     * @param evaluationIds an optional, comma-delimited list of evaluation IDs to which the response is limited  (optional)
     * @param limit Maximum number of results returned (optional, default to 10)
     * @param offset The index of the pagination offset. For a page size of 10, the first page would be at offset &#x3D; 0, and the second page would be at offset &#x3D; 10.  (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets a collection of Evaluations, within a given range.", nickname = "getEvaluationsPaginated", notes = "Gets a collection of Evaluations, within a given range.  <p>  <b>Note:</b> The response will contain only those Evaluations on which the caller is  granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a>  permission, unless specified otherwise with the accessType parameter.  </p> ", response = PaginatedResultsOfEvaluation.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfEvaluation.class) })
    @GetMapping(
        value = "/evaluation",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfEvaluation> getEvaluationsPaginated(@ApiParam(value = "The type of access for the user to filter for, optional and defaults to <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> ", allowableValues = "CHANGE_PERMISSIONS, CHANGE_SETTINGS, CREATE, DELETE, DELETE_SUBMISSION, DOWNLOAD, MODERATE, PARTICIPATE, READ, READ_PRIVATE_SUBMISSION, SEND_MESSAGE, SUBMIT, TEAM_MEMBERSHIP_UPDATE, UPDATE, UPDATE_SUBMISSION, UPLOAD", defaultValue = "READ") @Valid @RequestParam(value = "accessType", required = false, defaultValue="READ") String accessType,@ApiParam(value = "If 'true' then return only those evaluations with rounds defined and for which the current time is in one of the rounds. ", defaultValue = "false") @Valid @RequestParam(value = "activeOnly", required = false, defaultValue="false") Boolean activeOnly,@ApiParam(value = "an optional, comma-delimited list of evaluation IDs to which the response is limited ") @Valid @RequestParam(value = "evaluationIds", required = false) String evaluationIds,@Min(10) @Max(100) @ApiParam(value = "Maximum number of results returned", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalNumberOfResults\" : 0, \"results\" : [ { \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" }, { \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/submission/bundle : Gets the requesting users bundled Submissions and SubmissionStatuses to a specified Evaluation.&#39; 
     * Gets the requesting user&#39;s bundled Submissions and SubmissionStatuses to a specified Evaluation. 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param limit Limits the number of entities that will be fetched for this page. When null it will default to 10.&#39;  (optional, default to 10)
     * @param offset The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0.  (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets the requesting users bundled Submissions and SubmissionStatuses to a specified Evaluation.' ", nickname = "getMySubmissionBundles", notes = "Gets the requesting user's bundled Submissions and SubmissionStatuses to a specified Evaluation. ", response = PaginatedResultsOfSubmissionBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfSubmissionBundle.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/submission/bundle",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfSubmissionBundle> getMySubmissionBundles(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@Min(10) @Max(100) @ApiParam(value = "Limits the number of entities that will be fetched for this page. When null it will default to 10.' ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@ApiParam(value = "The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"submission\" : { \"contributors\" : [ { }, { } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 }, \"submissionStatus\" : { \"annotations\" : { }, \"canCancel\" : true, \"cancelRequested\" : true, \"entityId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedOn\" : \"...\", \"status\" : \"REJECTED\", \"statusVersion\" : 12345, \"submissionAnnotations\" : { }, \"versionNumber\" : 12345 } }, { \"submission\" : { \"contributors\" : [ { }, { } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 }, \"submissionStatus\" : { \"annotations\" : { }, \"canCancel\" : true, \"cancelRequested\" : true, \"entityId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedOn\" : \"...\", \"status\" : \"VALIDATED\", \"statusVersion\" : 12345, \"submissionAnnotations\" : { }, \"versionNumber\" : 12345 } } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/submission : Gets the requesting user&#39;s Submissions to a specified Evaluation.
     * Gets the requesting user&#39;s Submissions to a specified Evaluation. 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param limit Limits the number of entities that will be fetched for this page. When null it will default to 10. (optional, default to 10)
     * @param offset The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0.&#39;  (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets the requesting user's Submissions to a specified Evaluation.", nickname = "getMySubmissions", notes = "Gets the requesting user's Submissions to a specified Evaluation. ", response = PaginatedResultsOfSubmission.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfSubmission.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/submission",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfSubmission> getMySubmissions(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@Min(10) @Max(100) @ApiParam(value = "Limits the number of entities that will be fetched for this page. When null it will default to 10.", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0.' ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"contributors\" : [ { \"createdOn\" : \"...\", \"principalId\" : \"...\" }, { \"createdOn\" : \"...\", \"principalId\" : \"...\" } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 }, { \"contributors\" : [ { \"createdOn\" : \"...\", \"principalId\" : \"...\" }, { \"createdOn\" : \"...\", \"principalId\" : \"...\" } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/submission/{subId} : Gets a Submission.
     * Gets a Submission.  &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ_PRIVATE_SUBMISSION&lt;/a&gt; on the specified Evaluation.  &lt;/p&gt; 
     *
     * @param subId The ID of the Submission (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets a Submission.", nickname = "getSubmission", notes = "Gets a Submission.  <p>  <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation.  </p> ", response = SubmissionModel.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SubmissionModel.class) })
    @GetMapping(
        value = "/evaluation/submission/{subId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SubmissionModel> getSubmission(@ApiParam(value = "The ID of the Submission",required=true) @PathVariable("subId") String subId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contributors\" : [ { \"createdOn\" : \"...\", \"principalId\" : \"...\" }, { \"createdOn\" : \"...\", \"principalId\" : \"...\" } ], \"createdOn\" : \"...\", \"dockerDigest\" : \"...\", \"dockerRepositoryName\" : \"...\", \"entityBundleJSON\" : \"...\", \"entityId\" : \"...\", \"evaluationId\" : \"...\", \"evaluationRoundId\" : \"...\", \"id\" : \"...\", \"name\" : \"...\", \"submitterAlias\" : \"...\", \"teamId\" : \"...\", \"userId\" : \"...\", \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/submission/count : Gets the number of Submissions to a specified Evaluation.
     * Gets the number of Submissions to a specified Evaluation. &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ_PRIVATE_SUBMISSION&lt;/a&gt; on the specified Evaluation. &lt;/p&gt; 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets the number of Submissions to a specified Evaluation.", nickname = "getSubmissionCount", notes = "Gets the number of Submissions to a specified Evaluation. <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation. </p> ", response = Integer.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Integer.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/submission/count",
        produces = { "application/json" }
    )
    default ResponseEntity<Integer> getSubmissionCount(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/submission/{subId}/status : Gets the SubmissionStatus object associated with a specified Submission.
     * Gets the SubmissionStatus object associated with a specified Submission. &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ&lt;/a&gt; on the specified Evaluation. Furthermore, the caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ_PRIVATE_SUBMISSION&lt;/a&gt; to see all data marked as \&quot;private\&quot; in the SubmissionStatus.   &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum frequency this method can be called&lt;/td&gt;  &lt;td&gt;1 calls per second&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/p&gt; 
     *
     * @param subId The ID of the Submission (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets the SubmissionStatus object associated with a specified Submission.", nickname = "getSubmissionStatus", notes = "Gets the SubmissionStatus object associated with a specified Submission. <p> <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> on the specified Evaluation. Furthermore, the caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> to see all data marked as \"private\" in the SubmissionStatus.   <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum frequency this method can be called</td>  <td>1 calls per second</td>  </tr>  </table>  </p> ", response = SubmissionStatusModel.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SubmissionStatusModel.class) })
    @GetMapping(
        value = "/evaluation/submission/{subId}/status",
        produces = { "application/json" }
    )
    default ResponseEntity<SubmissionStatusModel> getSubmissionStatus(@ApiParam(value = "The ID of the Submission",required=true) @PathVariable("subId") String subId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"annotations\" : { \"doubleAnnos\" : [ { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : 12345 }, { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : 12345 } ], \"longAnnos\" : [ { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : 12345 }, { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : 12345 } ], \"objectId\" : \"...\", \"scopeId\" : \"...\", \"stringAnnos\" : [ { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : \"...\" }, { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : \"...\" } ], \"version\" : 12345 }, \"canCancel\" : true, \"cancelRequested\" : true, \"entityId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedOn\" : \"12345\", \"status\" : \"ACCEPTED\", \"statusVersion\" : 12345, \"submissionAnnotations\" : { \"annotations\" : { \"property1\" : { \"type\" : \"TIMESTAMP_MS\", \"value\" : [ \"...\", \"...\" ] }, \"property2\" : { \"type\" : \"TIMESTAMP_MS\", \"value\" : [ \"...\", \"...\" ] } }, \"etag\" : \"...\", \"id\" : \"...\" }, \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/team/{id}/SubmissionEligibility : Find out whether a Team and its members are eligible to submit to a given Evaluation queue (at the current time).&#39; 
     * Find out whether a Team and its members are eligible to submit to a given Evaluation queue (at the current time).  The request must include an Evaluation ID and a Team ID.   The &#39;eligibilityStateHash&#39; field of the returned object is a required parameter of the subsequent Team Submission request made for the given Evaluation and Team. (See: &lt;a href&#x3D;\&quot;${POST.evaluation.submission}\&quot;&gt;POST/evaluation/submission&lt;/a&gt;)&#39; 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param id The ID of a Team. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Find out whether a Team and its members are eligible to submit to a given Evaluation queue (at the current time).' ", nickname = "getTeamSubmissionEligibility", notes = "Find out whether a Team and its members are eligible to submit to a given Evaluation queue (at the current time).  The request must include an Evaluation ID and a Team ID.   The 'eligibilityStateHash' field of the returned object is a required parameter of the subsequent Team Submission request made for the given Evaluation and Team. (See: <a href=\"${POST.evaluation.submission}\">POST/evaluation/submission</a>)' ", response = TeamSubmissionEligibility.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TeamSubmissionEligibility.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/team/{id}/SubmissionEligibility",
        produces = { "application/json" }
    )
    default ResponseEntity<TeamSubmissionEligibility> getTeamSubmissionEligibility(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@ApiParam(value = "The ID of a Team.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eligibilityStateHash\" : 12345, \"evaluationId\" : \"...\", \"membersEligibility\" : [ { \"hasConflictingSubmission\" : true, \"isEligible\" : true, \"isQuotaFilled\" : true, \"isRegistered\" : true, \"principalId\" : 12345 }, { \"hasConflictingSubmission\" : true, \"isEligible\" : true, \"isQuotaFilled\" : true, \"isRegistered\" : true, \"principalId\" : 12345 } ], \"teamEligibility\" : { \"isEligible\" : true, \"isQuotaFilled\" : true, \"isRegistered\" : true }, \"teamId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/{evalId}/access : Determines whether a specified Synapse user has a certain access type on evaluation.
     * Determines whether the logged in user has a certain &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE&lt;/a&gt; on the specified Evaluation. 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param accessType Synapse access type (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Determines whether a specified Synapse user has a certain access type on evaluation.", nickname = "hasAccess2", notes = "Determines whether the logged in user has a certain <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE</a> on the specified Evaluation. ", response = BooleanResult.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BooleanResult.class) })
    @GetMapping(
        value = "/evaluation/{evalId}/access",
        produces = { "application/json" }
    )
    default ResponseEntity<BooleanResult> hasAccess2(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@NotNull @ApiParam(value = "Synapse access type", required = true) @Valid @RequestParam(value = "accessType", required = true) String accessType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /evaluation/submission/{subId}/file/{fileHandleId} : Gets a pre-signed URL to access a requested File contained within a specified Submission. 
     * Gets a pre-signed URL to access a requested File contained within a specified Submission. &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ_PRIVATE_SUBMISSION&lt;/a&gt; on the specified Evaluation. &lt;/p&gt; 
     *
     * @param fileHandleId the ID of the requested FileHandle contained in the Submission. (required)
     * @param subId The ID of the Submission (required)
     * @param redirect To redirect (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets a pre-signed URL to access a requested File contained within a specified Submission. ", nickname = "redirectUrlForFileHandle", notes = "Gets a pre-signed URL to access a requested File contained within a specified Submission. <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ_PRIVATE_SUBMISSION</a> on the specified Evaluation. </p> ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/evaluation/submission/{subId}/file/{fileHandleId}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> redirectUrlForFileHandle(@ApiParam(value = "the ID of the requested FileHandle contained in the Submission.",required=true) @PathVariable("fileHandleId") String fileHandleId,@ApiParam(value = "The ID of the Submission",required=true) @PathVariable("subId") String subId,@ApiParam(value = "To redirect") @Valid @RequestParam(value = "redirect", required = false) Boolean redirect) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /evaluation/submission/{subId}/cancellation : User requests to cancel their submission.
     * User requests to cancel their submission. Only the user who submitted a submission can make this request. 
     *
     * @param subId The ID of the Submission (required)
     * @return The request has been made. (status code 204)
     */
    @ApiOperation(value = "User requests to cancel their submission.", nickname = "requestToCancelSubmission", notes = "User requests to cancel their submission. Only the user who submitted a submission can make this request. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The request has been made.") })
    @PutMapping(
        value = "/evaluation/submission/{subId}/cancellation"
    )
    default ResponseEntity<Void> requestToCancelSubmission(@ApiParam(value = "The ID of the Submission",required=true) @PathVariable("subId") String subId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /evaluation/acl : Updates the supplied access control list (ACL) for an evaluation.
     * Updates the supplied access control list (ACL) for an evaluation. The &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.AccessControlList}\&quot;&gt;ACL&lt;/a&gt; to be updated should have the ID of the evaluation. The user should have the proper &lt;a href&#x3D;\&quot;${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\&quot;&gt;permissions&lt;/a&gt; in order to update the ACL. 
     *
     * @param accessControlList The ACL being updated. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Updates the supplied access control list (ACL) for an evaluation.", nickname = "updateAcl", notes = "Updates the supplied access control list (ACL) for an evaluation. The <a href=\"${org.sagebionetworks.repo.model.AccessControlList}\">ACL</a> to be updated should have the ID of the evaluation. The user should have the proper <a href=\"${org.sagebionetworks.evaluation.model.UserEvaluationPermissions}\">permissions</a> in order to update the ACL. ", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @PutMapping(
        value = "/evaluation/acl",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessControlList> updateAcl(@ApiParam(value = "The ACL being updated."  )  @Valid @RequestBody(required = false) AccessControlList accessControlList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /evaluation/{evalId} : Updates an Evaluation.
     * &#39;Updates an Evaluation.   &lt;p&gt;  Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle  concurrent updates. Each time an Evaluation is updated a new etag will be  issued to the Evaluation. When an update is requested, Synapse will compare the  etag of the passed Evaluation with the current etag of the Evaluation. If the  etags do not match, then the update will be rejected with a  PRECONDITION_FAILED (412) response. When this occurs, the caller should  fetch the latest copy of the Evaluation and re-apply any changes, then re-attempt  the Evaluation update.  &lt;/p&gt;   &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a  href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;  &gt;ACCESS_TYPE.UPDATE&lt;/a&gt; on the specified Evaluation.  &lt;/p&gt; 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param evaluation  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Updates an Evaluation.", nickname = "updateEvaluation", notes = "'Updates an Evaluation.   <p>  Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle  concurrent updates. Each time an Evaluation is updated a new etag will be  issued to the Evaluation. When an update is requested, Synapse will compare the  etag of the passed Evaluation with the current etag of the Evaluation. If the  etags do not match, then the update will be rejected with a  PRECONDITION_FAILED (412) response. When this occurs, the caller should  fetch the latest copy of the Evaluation and re-apply any changes, then re-attempt  the Evaluation update.  </p>   <p>  <b>Note:</b> The caller must be granted the <a  href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\"  >ACCESS_TYPE.UPDATE</a> on the specified Evaluation.  </p> ", response = Evaluation.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Evaluation.class) })
    @PutMapping(
        value = "/evaluation/{evalId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Evaluation> updateEvaluation(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Evaluation evaluation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /evaluation/{evalId}/round/{roundId} : Update Evaluation Round
     * Update Evaluation Round
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param roundId The ID of the evaluation round (required)
     * @param evaluationRound  (optional)
     * @return Success (status code 200)
     * @deprecated
     */
    @ApiOperation(value = "Update Evaluation Round", nickname = "updateEvaluationRound", notes = "Update Evaluation Round", response = EvaluationRound.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EvaluationRound.class) })
    @PutMapping(
        value = "/evaluation/{evalId}/round/{roundId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EvaluationRound> updateEvaluationRound(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@ApiParam(value = "The ID of the evaluation round",required=true) @PathVariable("roundId") String roundId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EvaluationRound evaluationRound) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"etag\" : \"...\", \"evaluationId\" : \"...\", \"id\" : \"...\", \"limits\" : [ { \"limitType\" : \"TOTAL\", \"maximumSubmissions\" : 12345 }, { \"limitType\" : \"WEEKLY\", \"maximumSubmissions\" : 12345 } ], \"roundEnd\" : \"12345\", \"roundStart\" : \"12345\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /evaluation/submission/{subId}/status : Updates a SubmissionStatus object.
     * Updates a SubmissionStatus object.   &lt;p&gt;  Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Each time an SubmissionStatus is updated a new etag will be issued to the SubmissionStatus. When an update is requested, Synapse will compare the etag of the passed SubmissionStatus with the current etag of the SubmissionStatus. If the etags do not match, then the update will be rejected with a PRECONDITION_FAILED (412) response. When this occurs, the caller should fetch the latest copy of the SubmissionStatus and re-apply any changes, then re-attempt the SubmissionStatus update.  &lt;/p&gt;  &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.UPDATE_SUBMISSION&lt;/a&gt; on the specified Evaluation.  &lt;/p&gt;  &lt;/p&gt;  &lt;p&gt;  &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum frequency this method can be called&lt;/td&gt;  &lt;td&gt;1 calls per second&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/p&gt; 
     *
     * @param subId The ID of the Submission (required)
     * @param submissionStatusModel  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Updates a SubmissionStatus object.", nickname = "updateSubmissionStatus", notes = "Updates a SubmissionStatus object.   <p>  Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Each time an SubmissionStatus is updated a new etag will be issued to the SubmissionStatus. When an update is requested, Synapse will compare the etag of the passed SubmissionStatus with the current etag of the SubmissionStatus. If the etags do not match, then the update will be rejected with a PRECONDITION_FAILED (412) response. When this occurs, the caller should fetch the latest copy of the SubmissionStatus and re-apply any changes, then re-attempt the SubmissionStatus update.  </p>  <p>  <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE_SUBMISSION</a> on the specified Evaluation.  </p>  </p>  <p>  <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum frequency this method can be called</td>  <td>1 calls per second</td>  </tr>  </table>  </p> ", response = SubmissionStatusModel.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SubmissionStatusModel.class) })
    @PutMapping(
        value = "/evaluation/submission/{subId}/status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SubmissionStatusModel> updateSubmissionStatus(@ApiParam(value = "The ID of the Submission",required=true) @PathVariable("subId") String subId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) SubmissionStatusModel submissionStatusModel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"annotations\" : { \"doubleAnnos\" : [ { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : 12345 }, { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : 12345 } ], \"longAnnos\" : [ { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : 12345 }, { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : 12345 } ], \"objectId\" : \"...\", \"scopeId\" : \"...\", \"stringAnnos\" : [ { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : \"...\" }, { \"isPrivate\" : true, \"key\" : \"...\", \"value\" : \"...\" } ], \"version\" : 12345 }, \"canCancel\" : true, \"cancelRequested\" : true, \"entityId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedOn\" : \"12345\", \"status\" : \"ACCEPTED\", \"statusVersion\" : 12345, \"submissionAnnotations\" : { \"annotations\" : { \"property1\" : { \"type\" : \"TIMESTAMP_MS\", \"value\" : [ \"...\", \"...\" ] }, \"property2\" : { \"type\" : \"TIMESTAMP_MS\", \"value\" : [ \"...\", \"...\" ] } }, \"etag\" : \"...\", \"id\" : \"...\" }, \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /evaluation/{evalId}/statusBatch : Update multiple SubmissionStatuses.
     * Update multiple SubmissionStatuses. The maximum batch size is 500.  To allow upload of more than this maximum, the system supports uploading of a &lt;i&gt;series&lt;/i&gt; of batches. Synapse employs optimistic concurrency on the series in the form of a batch token. Each request (except the first) must include the &#39;&#39;batch token&#39;&#39; returned in the response to the previous batch. If another client begins batch upload simultaneously, a PRECONDITION_FAILED (412) response will be generated and upload must restart from the first batch.  After the final batch is uploaded, the data for the Evaluation queue will be mirrored to the tables which support querying.  Therefore uploaded data will not appear in Evaluation queries until after the final batch is successfully uploaded.  It is the client&#39;&#39;s responsibility to note in each batch request (1) whether it is the first batch in the series and (2) whether it is the last batch.  (For a single batch both are set to &#39;&#39;true&#39;&#39;.)  Failure to use the flags correctly risks corrupted data (due to simultaneous, conflicting uploads by multiple clients) or data not appearing in query results.   &lt;p&gt;  &lt;b&gt;Note:&lt;/b&gt; The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.UPDATE_SUBMISSION&lt;/a&gt; on the specified Evaluation.  &lt;/p&gt; 
     *
     * @param evalId The ID of the specified Evaluation. (required)
     * @param submissionStatusBatch  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update multiple SubmissionStatuses.", nickname = "updateSubmissionStatusBatch", notes = "Update multiple SubmissionStatuses. The maximum batch size is 500.  To allow upload of more than this maximum, the system supports uploading of a <i>series</i> of batches. Synapse employs optimistic concurrency on the series in the form of a batch token. Each request (except the first) must include the ''batch token'' returned in the response to the previous batch. If another client begins batch upload simultaneously, a PRECONDITION_FAILED (412) response will be generated and upload must restart from the first batch.  After the final batch is uploaded, the data for the Evaluation queue will be mirrored to the tables which support querying.  Therefore uploaded data will not appear in Evaluation queries until after the final batch is successfully uploaded.  It is the client''s responsibility to note in each batch request (1) whether it is the first batch in the series and (2) whether it is the last batch.  (For a single batch both are set to ''true''.)  Failure to use the flags correctly risks corrupted data (due to simultaneous, conflicting uploads by multiple clients) or data not appearing in query results.   <p>  <b>Note:</b> The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE_SUBMISSION</a> on the specified Evaluation.  </p> ", response = BatchUploadResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BatchUploadResponse.class) })
    @PutMapping(
        value = "/evaluation/{evalId}/statusBatch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BatchUploadResponse> updateSubmissionStatusBatch(@ApiParam(value = "The ID of the specified Evaluation.",required=true) @PathVariable("evalId") String evalId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) SubmissionStatusBatch submissionStatusBatch) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextUploadToken\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
