/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateDiscussionThread;
import org.openapitools.model.DiscussionThreadBundle;
import org.openapitools.model.MessageURL;
import org.openapitools.model.PaginatedResultsOfDiscussionReplyBundle;
import org.openapitools.model.ReplyCount;
import org.openapitools.model.UpdateThreadMessage;
import org.openapitools.model.UpdateThreadTitle;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "thread", description = "the thread API")
public interface ThreadApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /thread : Create a new thread in a forum.
     * This API is used to create a new thread in a forum.  Target users: anyone who has READ permission to the project. 
     *
     * @param createDiscussionThread  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a new thread in a forum.", nickname = "createThread", notes = "This API is used to create a new thread in a forum.  Target users: anyone who has READ permission to the project. ", response = DiscussionThreadBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = DiscussionThreadBundle.class) })
    @PostMapping(
        value = "/thread",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DiscussionThreadBundle> createThread(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) CreateDiscussionThread createDiscussionThread) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"activeAuthors\" : [ \"...\", \"...\" ], \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"isPinned\" : true, \"lastActivity\" : \"...\", \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"numberOfReplies\" : 12345, \"numberOfViews\" : 12345, \"projectId\" : \"...\", \"title\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /thread/{threadId} : Delete a Thread.
     * This API is used to mark a thread as deleted.  Target users: only forum&#39;s moderator can mark a thread as deleted. 
     *
     * @param threadId The ID of a thread. (required)
     * @return The resource has been deleted. (status code 204)
     */
    @ApiOperation(value = "Delete a Thread.", nickname = "deleteThread", notes = "This API is used to mark a thread as deleted.  Target users: only forum's moderator can mark a thread as deleted. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted.") })
    @DeleteMapping(
        value = "/thread/{threadId}"
    )
    default ResponseEntity<Void> deleteThread(@ApiParam(value = "The ID of a thread.",required=true) @PathVariable("threadId") String threadId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /thread/{threadId}/replies : Get N number of replies for a given thread ID.
     * This API is used to get N number of replies for a given thread ID.  Target users: anyone who has READ permission to the project. 
     *
     * @param threadId The ID of a thread. (required)
     * @param filter Filter deleted not deleted replies. (required)
     * @param ascending The direction of sort: true for ascending, and false for descending (optional)
     * @param limit Limits the size of the page returned. For example, a page size of 10 require limit &#x3D; 10.  (optional, default to 10)
     * @param offset The index of the pagination offset. For a page size of 10, the first page would be at offset &#x3D; 0, and the second page would be at offset &#x3D; 10.&#39;  (optional, default to 0)
     * @param sort The field to sort the resulting replies on.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get N number of replies for a given thread ID.", nickname = "getRepliesForThread", notes = "This API is used to get N number of replies for a given thread ID.  Target users: anyone who has READ permission to the project. ", response = PaginatedResultsOfDiscussionReplyBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfDiscussionReplyBundle.class) })
    @GetMapping(
        value = "/thread/{threadId}/replies",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfDiscussionReplyBundle> getRepliesForThread(@ApiParam(value = "The ID of a thread.",required=true) @PathVariable("threadId") String threadId,@NotNull @ApiParam(value = "Filter deleted not deleted replies.", required = true, allowableValues = "DELETED_ONLY, EXCLUDE_DELETED, NO_FILTER") @Valid @RequestParam(value = "filter", required = true) String filter,@ApiParam(value = "The direction of sort: true for ascending, and false for descending") @Valid @RequestParam(value = "ascending", required = false) Boolean ascending,@Min(0) @Max(100) @ApiParam(value = "Limits the size of the page returned. For example, a page size of 10 require limit = 10. ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.' ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "The field to sort the resulting replies on. ", allowableValues = "CREATED_ON") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"projectId\" : \"...\", \"threadId\" : \"...\" }, { \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"projectId\" : \"...\", \"threadId\" : \"...\" } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /thread/{threadId}/replycount : Get the total number of replies for a given Thread. 
     * This API is used to get the total number of replies for a given thread ID.  Target users: anyone who has READ permission to the project.&#39; 
     *
     * @param threadId The ID of a thread. (required)
     * @param filter Filter deleted not deleted replies. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the total number of replies for a given Thread. ", nickname = "getReplyCountForThread", notes = "This API is used to get the total number of replies for a given thread ID.  Target users: anyone who has READ permission to the project.' ", response = ReplyCount.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ReplyCount.class) })
    @GetMapping(
        value = "/thread/{threadId}/replycount",
        produces = { "application/json" }
    )
    default ResponseEntity<ReplyCount> getReplyCountForThread(@ApiParam(value = "The ID of a thread.",required=true) @PathVariable("threadId") String threadId,@NotNull @ApiParam(value = "Filter deleted not deleted replies.", required = true, allowableValues = "DELETED_ONLY, EXCLUDE_DELETED, NO_FILTER") @Valid @RequestParam(value = "filter", required = true) String filter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"count\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /thread/{threadId} : Get a thread.
     * This API is used to get a thread and its statistic given its ID.  Target users: anyone who has READ permission to the project. 
     *
     * @param threadId The ID of a thread. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a thread.", nickname = "getThread", notes = "This API is used to get a thread and its statistic given its ID.  Target users: anyone who has READ permission to the project. ", response = DiscussionThreadBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DiscussionThreadBundle.class) })
    @GetMapping(
        value = "/thread/{threadId}",
        produces = { "application/json" }
    )
    default ResponseEntity<DiscussionThreadBundle> getThread(@ApiParam(value = "The ID of a thread.",required=true) @PathVariable("threadId") String threadId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"activeAuthors\" : [ \"...\", \"...\" ], \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"isPinned\" : true, \"lastActivity\" : \"...\", \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"numberOfReplies\" : 12345, \"numberOfViews\" : 12345, \"projectId\" : \"...\", \"title\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /thread/messageUrl : Get the message URL of a thread.
     * This API is used to get the message URL of a thread. The message URL is the URL to download the file which contains the thread message.  Target users: anyone who has READ permission to the project.  The resulting URL will be signed with Content-Type &#x3D;\&quot;text/plain; charset&#x3D;utf-8\&quot;; therefore, this header must be included with the GET on the URL. 
     *
     * @param messageKey Message Key (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the message URL of a thread.", nickname = "getThreadUrl", notes = "This API is used to get the message URL of a thread. The message URL is the URL to download the file which contains the thread message.  Target users: anyone who has READ permission to the project.  The resulting URL will be signed with Content-Type =\"text/plain; charset=utf-8\"; therefore, this header must be included with the GET on the URL. ", response = MessageURL.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MessageURL.class) })
    @GetMapping(
        value = "/thread/messageUrl",
        produces = { "application/json" }
    )
    default ResponseEntity<MessageURL> getThreadUrl(@NotNull @ApiParam(value = "Message Key", required = true) @Valid @RequestParam(value = "messageKey", required = true) String messageKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"messageUrl\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /thread/{threadId}/pin : Pin a Thread.
     * This API is used to mark a thread as pinned.  Target users: only forum&#39;s moderator can mark a thread as pinned. 
     *
     * @param threadId The ID of a thread. (required)
     * @return Success (status code 204)
     */
    @ApiOperation(value = "Pin a Thread.", nickname = "pinThread", notes = "This API is used to mark a thread as pinned.  Target users: only forum's moderator can mark a thread as pinned. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success") })
    @PutMapping(
        value = "/thread/{threadId}/pin"
    )
    default ResponseEntity<Void> pinThread(@ApiParam(value = "The ID of a thread.",required=true) @PathVariable("threadId") String threadId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /thread/{threadId}/restore : Restore a deleted thread.
     * This API is used to restore a deleted thread.  Target users: only forum&#39;s moderator can restore a deleted thread. 
     *
     * @param threadId The ID of a thread. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Restore a deleted thread.", nickname = "restoreDeletedThread", notes = "This API is used to restore a deleted thread.  Target users: only forum's moderator can restore a deleted thread. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @PutMapping(
        value = "/thread/{threadId}/restore",
        produces = { "application/json" }
    )
    default ResponseEntity<String> restoreDeletedThread(@ApiParam(value = "The ID of a thread.",required=true) @PathVariable("threadId") String threadId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /thread/{threadId}/unpin : Unpin a thread.
     * This API is used to unpin a thread.  Target users: only forum&#39;s moderator can unpin a thread. 
     *
     * @param threadId The ID of a thread. (required)
     * @return Success (status code 204)
     */
    @ApiOperation(value = "Unpin a thread.", nickname = "unpinThread", notes = "This API is used to unpin a thread.  Target users: only forum's moderator can unpin a thread. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success") })
    @PutMapping(
        value = "/thread/{threadId}/unpin"
    )
    default ResponseEntity<Void> unpinThread(@ApiParam(value = "The ID of a thread.",required=true) @PathVariable("threadId") String threadId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /thread/{threadId}/message : Update the message of a thread.
     * This API is used to update the message of a thread.  Target users: only the author of the thread can update its message.&#39; 
     *
     * @param threadId The ID of a thread. (required)
     * @param updateThreadMessage  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Update the message of a thread.", nickname = "updateThreadMessage", notes = "This API is used to update the message of a thread.  Target users: only the author of the thread can update its message.' ", response = DiscussionThreadBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = DiscussionThreadBundle.class) })
    @PutMapping(
        value = "/thread/{threadId}/message",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DiscussionThreadBundle> updateThreadMessage(@ApiParam(value = "The ID of a thread.",required=true) @PathVariable("threadId") String threadId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UpdateThreadMessage updateThreadMessage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"activeAuthors\" : [ \"...\", \"...\" ], \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"isPinned\" : true, \"lastActivity\" : \"...\", \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"numberOfReplies\" : 12345, \"numberOfViews\" : 12345, \"projectId\" : \"...\", \"title\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /thread/{threadId}/title : Update the title of a Thread.
     * This API is used to update the title of a thread.  Target users: only the author of the thread can update its title.&#39; 
     *
     * @param threadId The ID of a thread. (required)
     * @param updateThreadTitle  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Update the title of a Thread.", nickname = "updateThreadTitle", notes = "This API is used to update the title of a thread.  Target users: only the author of the thread can update its title.' ", response = DiscussionThreadBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = DiscussionThreadBundle.class) })
    @PutMapping(
        value = "/thread/{threadId}/title",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DiscussionThreadBundle> updateThreadTitle(@ApiParam(value = "The ID of a thread.",required=true) @PathVariable("threadId") String threadId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UpdateThreadTitle updateThreadTitle) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"activeAuthors\" : [ \"...\", \"...\" ], \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"isPinned\" : true, \"lastActivity\" : \"...\", \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"numberOfReplies\" : 12345, \"numberOfViews\" : 12345, \"projectId\" : \"...\", \"title\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
