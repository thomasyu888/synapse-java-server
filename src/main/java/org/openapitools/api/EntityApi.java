/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ACCESSTYPE;
import org.openapitools.model.AccessControlList;
import org.openapitools.model.AccessRequirement;
import org.openapitools.model.Activity;
import org.openapitools.model.AnnotationsV2;
import org.openapitools.model.AsyncJobId;
import java.math.BigDecimal;
import org.openapitools.model.BindSchemaToEntityRequest;
import org.openapitools.model.BooleanResult;
import org.openapitools.model.Challenge;
import org.openapitools.model.DataTypeResponse;
import org.openapitools.model.DockerCommit;
import org.openapitools.model.DownloadFromTableRequest;
import org.openapitools.model.DownloadFromTableResult;
import org.openapitools.model.Entity;
import org.openapitools.model.EntityBundleCreateV2;
import org.openapitools.model.EntityBundleRequest;
import org.openapitools.model.EntityBundleV2;
import org.openapitools.model.EntityChildrenRequest;
import org.openapitools.model.EntityChildrenResponse;
import org.openapitools.model.EntityHeader;
import org.openapitools.model.EntityId;
import org.openapitools.model.EntityIdList;
import org.openapitools.model.EntityLookupRequest;
import org.openapitools.model.EntityPath;
import org.openapitools.model.EntityThreadCounts;
import org.openapitools.model.FileHandleResults;
import org.openapitools.model.FileHandleUpdateRequest;
import org.openapitools.model.JsonSchemaObjectBinding;
import org.openapitools.model.ListValidationResultsRequest;
import org.openapitools.model.ListValidationResultsResponse;
import org.openapitools.model.MessageToUser;
import org.openapitools.model.PaginatedColumnModels;
import org.openapitools.model.PaginatedResultsOfAccessRequirement;
import org.openapitools.model.PaginatedResultsOfDiscussionThreadBundle;
import org.openapitools.model.PaginatedResultsOfDockerCommit;
import org.openapitools.model.PaginatedResultsOfEntityHeader;
import org.openapitools.model.PaginatedResultsOfEvaluation;
import org.openapitools.model.PaginatedResultsOfVersionInfo;
import org.openapitools.model.QueryBundleRequest;
import org.openapitools.model.QueryResultBundle;
import org.openapitools.model.ReferenceList;
import org.openapitools.model.RowReferenceSet;
import org.openapitools.model.SnapshotRequest;
import org.openapitools.model.SnapshotResponse;
import org.openapitools.model.StsCredentials;
import org.openapitools.model.TableFileHandleResults;
import org.openapitools.model.TableUpdateTransactionRequest;
import org.openapitools.model.TableUpdateTransactionResponse;
import org.openapitools.model.UserEntityPermissions;
import org.openapitools.model.ValidationResults;
import org.openapitools.model.ValidationSummaryStatistics;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "entity", description = "the entity API")
public interface EntityApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /entity/{id}/dockerCommit : Add a commit (tag and digest) for an external/unmanaged Docker repository.
     * Add a commit (tag and digest) for an external/unmanaged Docker repository. (Commits for managed repositories are added via direct integration with the Synapse Docker registry.) 
     *
     * @param id the ID of the Docker repository entity (required)
     * @param dockerCommit the new tag/digest pair for the repository (optional)
     * @return Success (status code 204)
     */
    @ApiOperation(value = "Add a commit (tag and digest) for an external/unmanaged Docker repository.", nickname = "addDockerCommit", notes = "Add a commit (tag and digest) for an external/unmanaged Docker repository. (Commits for managed repositories are added via direct integration with the Synapse Docker registry.) ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Docker Commit Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success") })
    @PostMapping(
        value = "/entity/{id}/dockerCommit",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addDockerCommit(@ApiParam(value = "the ID of the Docker repository entity",required=true) @PathVariable("id") String id,@ApiParam(value = "the new tag/digest pair for the repository"  )  @Valid @RequestBody(required = false) DockerCommit dockerCommit) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity/{id}/schema/binding : Bind a JSON schema to an Entity.
     * Bind a JSON schema to an Entity. The bound schema will be used to validate the Entity&#39;&#39;s metadata (annotations). Any child Entity that does not have a bound schema will inherit the first bound schema found in its hierarchy.  Only a single schema can be bound to an Entity at a time. If you have more than one schema to bind to an Entity you will need to create and bind a single composition schema using keywords such as &#39;anyOf&#39;, &#39;allOf&#39; or &#39;oneOf&#39; that defines how the schemas should be used for validation.  Note: The caller must be granted the UPDATE ermission on the Entity to bind. 
     *
     * @param id The ID of an Entity. (required)
     * @param bindSchemaToEntityRequest The request identifies the JSON schema to bind. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Bind a JSON schema to an Entity.", nickname = "bindJsonSchemaToEntity", notes = "Bind a JSON schema to an Entity. The bound schema will be used to validate the Entity''s metadata (annotations). Any child Entity that does not have a bound schema will inherit the first bound schema found in its hierarchy.  Only a single schema can be bound to an Entity at a time. If you have more than one schema to bind to an Entity you will need to create and bind a single composition schema using keywords such as 'anyOf', 'allOf' or 'oneOf' that defines how the schemas should be used for validation.  Note: The caller must be granted the UPDATE ermission on the Entity to bind. ", response = JsonSchemaObjectBinding.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = JsonSchemaObjectBinding.class) })
    @PutMapping(
        value = "/entity/{id}/schema/binding",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<JsonSchemaObjectBinding> bindJsonSchemaToEntity(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "The request identifies the JSON schema to bind."  )  @Valid @RequestBody(required = false) BindSchemaToEntityRequest bindSchemaToEntityRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"jsonSchemaVersionInfo\" : { \"$id\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"jsonSHA256Hex\" : \"...\", \"organizationId\" : \"...\", \"organizationName\" : \"...\", \"schemaId\" : \"...\", \"schemaName\" : \"...\", \"semanticVersion\" : \"...\", \"versionId\" : \"...\" }, \"objectId\" : 12345, \"objectType\" : \"entity\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity/{id}/datatype : Change the.
     * Change the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.DataType}\&quot; &gt;DataType&lt;/a&gt; of the given entity. The entity&#39;s DataType controls how the entity can be accessed. For example, an entity&#39;s DataType must be set to &#39;open_data&#39; in order for anonymous to be allowed to access its contents.  &lt;p&gt;  Note: The caller must be a member of the &#39;Synapse Access and Compliance Team&#39; (id&#x3D;464532) in order to change an Entity&#39;s type to &#39;OPEN_DATA&#39;. The caller must be granted UPDATED on the Entity to change the its type to any other value.  &lt;/p&gt;&#39; 
     *
     * @param id The ID of an Entity. (required)
     * @param type Type of data (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Change the.", nickname = "changeEntityDataType", notes = "Change the <a href=\"${org.sagebionetworks.repo.model.DataType}\" >DataType</a> of the given entity. The entity's DataType controls how the entity can be accessed. For example, an entity's DataType must be set to 'open_data' in order for anonymous to be allowed to access its contents.  <p>  Note: The caller must be a member of the 'Synapse Access and Compliance Team' (id=464532) in order to change an Entity's type to 'OPEN_DATA'. The caller must be granted UPDATED on the Entity to change the its type to any other value.  </p>' ", response = DataTypeResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DataTypeResponse.class) })
    @PutMapping(
        value = "/entity/{id}/datatype",
        produces = { "application/json" }
    )
    default ResponseEntity<DataTypeResponse> changeEntityDataType(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@NotNull @ApiParam(value = "Type of data", required = true, allowableValues = "OPEN_DATA, SENSITIVE_DATA") @Valid @RequestParam(value = "type", required = true) String type) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dataType\" : \"OPEN_DATA\", \"objectId\" : \"...\", \"objectType\" : \"FORM_GROUP\", \"updatedBy\" : \"...\", \"updatedOn\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /entity/{id}/schema/binding : Clear the bound JSON schema from this Entity.
     * Clear the bound JSON schema from this Entity. The schema will no longer be used to validate this Entity or its children.  Note: The caller must be granted the DELETE permission on the Entity. 
     *
     * @param id The ID of an Entity. (required)
     * @return The resource has been deleted (status code 204)
     */
    @ApiOperation(value = "Clear the bound JSON schema from this Entity.", nickname = "clearBoundSchema", notes = "Clear the bound JSON schema from this Entity. The schema will no longer be used to validate this Entity or its children.  Note: The caller must be granted the DELETE permission on the Entity. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted") })
    @DeleteMapping(
        value = "/entity/{id}/schema/binding"
    )
    default ResponseEntity<Void> clearBoundSchema(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity : Create a new Entity.
     * Create a new Entity. This method is used to create Projects, Folders, FileEntities and Records (coming soon). The passed request body should contain the following fields:  &lt;ul&gt;  &lt;li&gt;name - Give your new entity a Name. &lt;b&gt;Note:&lt;/b&gt; A name must be unique within the given parent, similar to a file in a folder.&lt;/li&gt;  &lt;li&gt;parentId - The ID of the parent Entity, such as a Folder or Project. This field should be excluded when creating a Project.&lt;/li&gt;  &lt;li&gt;concreteType - Indicates the type of Entity to create. The value should be one of the following: org.sagebionetworks.repo.model.Project, org.sagebionetworks.repo.model.Folder, or org.sagebionetworks.repo.model.FileEntity&lt;/li&gt;  &lt;/ul&gt;  &lt;p&gt;  Note: To create an Entity the caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.CREATE&lt;/a&gt; on the parent Entity. Any authenticated caller can create a new Project (with parentId&#x3D;null).  &lt;/p&gt;  &lt;p&gt;  &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum number of children for a single parent entity&lt;/td&gt;  &lt;td&gt;10 K&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/p&gt; 
     *
     * @param generatedBy To track the Provenance of an Entity create, include the ID of the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.provenance.Activity}\&quot;&gt;Activity&lt;/a&gt; that was created to track the change. For more information see: &lt;a href&#x3D;\&quot;${POST.activity}\&quot;&gt;POST /activity&lt;/a&gt;. You must be the creator of the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.provenance.Activity}\&quot;&gt;Activity&lt;/a&gt; used here.&#39;  (optional)
     * @param entity  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a new Entity.", nickname = "createEntity", notes = "Create a new Entity. This method is used to create Projects, Folders, FileEntities and Records (coming soon). The passed request body should contain the following fields:  <ul>  <li>name - Give your new entity a Name. <b>Note:</b> A name must be unique within the given parent, similar to a file in a folder.</li>  <li>parentId - The ID of the parent Entity, such as a Folder or Project. This field should be excluded when creating a Project.</li>  <li>concreteType - Indicates the type of Entity to create. The value should be one of the following: org.sagebionetworks.repo.model.Project, org.sagebionetworks.repo.model.Folder, or org.sagebionetworks.repo.model.FileEntity</li>  </ul>  <p>  Note: To create an Entity the caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CREATE</a> on the parent Entity. Any authenticated caller can create a new Project (with parentId=null).  </p>  <p>  <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum number of children for a single parent entity</td>  <td>10 K</td>  </tr>  </table>  </p> ", response = Entity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = Entity.class) })
    @PostMapping(
        value = "/entity",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Entity> createEntity(@ApiParam(value = "To track the Provenance of an Entity create, include the ID of the <a href=\"${org.sagebionetworks.repo.model.provenance.Activity}\">Activity</a> that was created to track the change. For more information see: <a href=\"${POST.activity}\">POST /activity</a>. You must be the creator of the <a href=\"${org.sagebionetworks.repo.model.provenance.Activity}\">Activity</a> used here.' ") @Valid @RequestParam(value = "generatedBy", required = false) String generatedBy,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Entity entity) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"Trial ' + (_) . 09\", \"parentId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/acl : Create a new Access Control List (ACL), overriding inheritance.
     * Create a new Access Control List (ACL), overriding inheritance.  &lt;p&gt; By default, Entities such as FileEntity and Folder inherit their permission from their containing Project. For such Entities the Project is the Entity&#39;s &#39;benefactor&#39;. This permission inheritance can be overridden by creating an ACL for the Entity. When this occurs the Entity becomes its own benefactor and all permission are determined by its own ACL.  &lt;/p&gt;  &lt;p&gt;  If the ACL of an Entity is deleted, then its benefactor will automatically be set to its parent&#39;s benefactor.  &lt;/p&gt;  &lt;p&gt;  Note: The caller must be granted  &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.CHANGE_PERMISSIONS&lt;/a&gt; on the Entity to call this method.  &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @param accessControlList  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a new Access Control List (ACL), overriding inheritance.", nickname = "createEntityAcl", notes = "Create a new Access Control List (ACL), overriding inheritance.  <p> By default, Entities such as FileEntity and Folder inherit their permission from their containing Project. For such Entities the Project is the Entity's 'benefactor'. This permission inheritance can be overridden by creating an ACL for the Entity. When this occurs the Entity becomes its own benefactor and all permission are determined by its own ACL.  </p>  <p>  If the ACL of an Entity is deleted, then its benefactor will automatically be set to its parent's benefactor.  </p>  <p>  Note: The caller must be granted  <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CHANGE_PERMISSIONS</a> on the Entity to call this method.  </p> ", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AccessControlList.class) })
    @PostMapping(
        value = "/entity/{id}/acl",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessControlList> createEntityAcl(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AccessControlList accessControlList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/bundle2/create : Create an entity and associated components with a single POST.
     * Create an entity and associated components with a single POST. Specifically, this operation supports creation of an Entity, its Annotations, and its ACL.  Upon successful creation, an EntityBundle is returned containing the requested components, as defined by the partsMask in the request object.&#39; 
     *
     * @param generatedBy Generated By (optional)
     * @param entityBundleCreateV2  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create an entity and associated components with a single POST.", nickname = "createEntityBundle2", notes = "Create an entity and associated components with a single POST. Specifically, this operation supports creation of an Entity, its Annotations, and its ACL.  Upon successful creation, an EntityBundle is returned containing the requested components, as defined by the partsMask in the request object.' ", response = EntityBundleV2.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Bundle V2 Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = EntityBundleV2.class) })
    @PostMapping(
        value = "/entity/bundle2/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EntityBundleV2> createEntityBundle2(@ApiParam(value = "Generated By") @Valid @RequestParam(value = "generatedBy", required = false) String generatedBy,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EntityBundleCreateV2 entityBundleCreateV2) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessControlList\" : { \"createdBy\" : \"...\", \"creationDate\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"resourceAccess\" : [ { \"accessType\" : [ \"CHANGE_PERMISSIONS\", \"UPDATE_SUBMISSION\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"DOWNLOAD\", \"MODERATE\" ], \"principalId\" : 12345 } ] }, \"annotations\" : { \"annotations\" : { \"property1\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] }, \"property2\" : { \"type\" : \"TIMESTAMP_MS\", \"value\" : [ \"...\", \"...\" ] } }, \"etag\" : \"...\", \"id\" : \"...\" }, \"benefactorAcl\" : { \"createdBy\" : \"...\", \"creationDate\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPLOAD\", \"DELETE\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"CHANGE_SETTINGS\", \"CREATE\" ], \"principalId\" : 12345 } ] }, \"doiAssociation\" : { \"associatedBy\" : \"...\", \"associatedOn\" : \"...\", \"associationId\" : \"...\", \"doiUri\" : \"...\", \"doiUrl\" : \"...\", \"etag\" : \"...\", \"objectId\" : \"...\", \"objectType\" : \"VERIFICATION_SUBMISSION\", \"objectVersion\" : 12345, \"updatedBy\" : \"...\", \"updatedOn\" : \"...\" }, \"entity\" : { \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"parentId\" : \"...\" }, \"entityType\" : \"entityview\", \"fileHandles\" : [ { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 }, { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 } ], \"fileName\" : \"...\", \"hasChildren\" : true, \"path\" : { \"path\" : [ { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ] }, \"permissions\" : { \"canAddChild\" : true, \"canCertifiedUserAddChild\" : true, \"canCertifiedUserEdit\" : true, \"canChangePermissions\" : true, \"canChangeSettings\" : true, \"canDelete\" : true, \"canDownload\" : true, \"canEdit\" : true, \"canEnableInheritance\" : true, \"canModerate\" : true, \"canPublicRead\" : true, \"canUpload\" : true, \"canView\" : true, \"isCertificationRequired\" : true, \"isCertifiedUser\" : true, \"ownerPrincipalId\" : 12345 }, \"restrictionInformation\" : { \"hasUnmetAccessRequirement\" : true, \"restrictionLevel\" : \"RESTRICTED_BY_TERMS_OF_USE\" }, \"rootWikiId\" : \"...\", \"tableBundle\" : { \"columnModels\" : [ { \"columnType\" : \"STRING\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"enumeration\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" }, { \"columnType\" : \"USERID_LIST\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"range\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" } ], \"maxRowsPerPage\" : 12345 }, \"threadCount\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/lockAccessRequirement : Add a temporary access restriction that prevents access pending review by the Synapse ACT. 
     * Add a temporary access restriction that prevents access pending review by the Synapse Access and Compliance Team. This service may be used only by an administrator of the specified entity. 
     *
     * @param id The ID of an Entity. (required)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Add a temporary access restriction that prevents access pending review by the Synapse ACT. ", nickname = "createLockAccessRequirement", notes = "Add a temporary access restriction that prevents access pending review by the Synapse Access and Compliance Team. This service may be used only by an administrator of the specified entity. ", response = AccessRequirement.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Requirement Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AccessRequirement.class) })
    @PostMapping(
        value = "/entity/{id}/lockAccessRequirement",
        produces = { "application/json" }
    )
    default ResponseEntity<AccessRequirement> createLockAccessRequirement(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessType\" : \"SUBMIT\", \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"subjectIds\" : [ { \"id\" : \"...\", \"type\" : \"EVALUATION\" }, { \"id\" : \"...\", \"type\" : \"TEAM\" } ], \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/table/snapshot : Request to create a new snapshot of a table.
     * Request to create a new snapshot of a table. The provided comment, label, and activity ID will be applied to the current version thereby creating a snapshot and locking the current version. After the snapshot is created a new version will be started with an &#39;in-progress&#39; label.  NOTE: This service is for TableEntity only. Snapshots of EntityView require asynchronous processing and can be created via: POST /entity/{id}/table/transaction/async/start 
     *
     * @param id The ID of a Table Entity. (required)
     * @param snapshotRequest  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Request to create a new snapshot of a table.", nickname = "createSnapshot", notes = "Request to create a new snapshot of a table. The provided comment, label, and activity ID will be applied to the current version thereby creating a snapshot and locking the current version. After the snapshot is created a new version will be started with an 'in-progress' label.  NOTE: This service is for TableEntity only. Snapshots of EntityView require asynchronous processing and can be created via: POST /entity/{id}/table/transaction/async/start ", response = SnapshotResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = SnapshotResponse.class) })
    @PostMapping(
        value = "/entity/{id}/table/snapshot",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SnapshotResponse> createSnapshot(@ApiParam(value = "The ID of a Table Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) SnapshotRequest snapshotRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"snapshotVersionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/table/download/csv/async/get/{asyncToken} : Asynchronously get the results of a csv download started with.
     * Asynchronously get the results of a csv download started with POST  Note: When the result is not ready yet, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus 
     *
     * @param id The ID of a TableEntity. (required)
     * @param asyncToken Async Token (required)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Asynchronously get the results of a csv download started with.", nickname = "csvDownloadAsyncGet", notes = "Asynchronously get the results of a csv download started with POST  Note: When the result is not ready yet, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus ", response = DownloadFromTableResult.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = DownloadFromTableResult.class) })
    @GetMapping(
        value = "/entity/{id}/table/download/csv/async/get/{asyncToken}",
        produces = { "application/json" }
    )
    default ResponseEntity<DownloadFromTableResult> csvDownloadAsyncGet(@ApiParam(value = "The ID of a TableEntity.",required=true) @PathVariable("id") String id,@ApiParam(value = "Async Token",required=true) @PathVariable("asyncToken") String asyncToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"concreteType\" : \"...\", \"etag\" : \"...\", \"headers\" : [ { \"columnType\" : \"LINK\", \"id\" : \"...\", \"name\" : \"...\" }, { \"columnType\" : \"STRING_LIST\", \"id\" : \"...\", \"name\" : \"...\" } ], \"resultsFileHandleId\" : \"...\", \"tableId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/table/download/csv/async/start : Asynchronously start a csv download.
     * Asynchronously start a csv download. Use the returned job id and  /entity/{id}/table/download/csv/async/get to get the results of the query 
     *
     * @param id The ID of a TableEntity. (required)
     * @param downloadFromTableRequest  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Asynchronously start a csv download.", nickname = "csvDownloadAsyncStart", notes = "Asynchronously start a csv download. Use the returned job id and  /entity/{id}/table/download/csv/async/get to get the results of the query ", response = AsyncJobId.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AsyncJobId.class) })
    @PostMapping(
        value = "/entity/{id}/table/download/csv/async/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AsyncJobId> csvDownloadAsyncStart(@ApiParam(value = "The ID of a TableEntity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) DownloadFromTableRequest downloadFromTableRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /entity/{id}/generatedBy : Deletes the activity relationship for the current version of an Entity.
     * Deletes the activity relationship for the current version of an Entity. 
     *
     * @param id The ID of an Entity. (required)
     * @param body  (optional)
     * @return This resource has been deleted (status code 204)
     */
    @ApiOperation(value = "Deletes the activity relationship for the current version of an Entity.", nickname = "deleteActivityForEntity", notes = "Deletes the activity relationship for the current version of an Entity. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "This resource has been deleted") })
    @DeleteMapping(
        value = "/entity/{id}/generatedBy",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> deleteActivityForEntity(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /entity/{id} : Deletes an Entity
     * Moves an entity in the trash can, if the skipTrashCan is set to true will flag the entity for purge and it will be deleted as soon as possible.  &lt;p&gt;  Note: To delete an Entity the caller must be granted the  &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.DELETE&lt;/a&gt; on the Entity.  &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @param skipTrashCan If true the entity will be flag for priority purge and deleted as soon as possible  (optional)
     * @param body  (optional)
     * @return The resource has been deleted (status code 204)
     */
    @ApiOperation(value = "Deletes an Entity", nickname = "deleteEntity", notes = "Moves an entity in the trash can, if the skipTrashCan is set to true will flag the entity for purge and it will be deleted as soon as possible.  <p>  Note: To delete an Entity the caller must be granted the  <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.DELETE</a> on the Entity.  </p> ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted") })
    @DeleteMapping(
        value = "/entity/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> deleteEntity(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "If true the entity will be flag for priority purge and deleted as soon as possible ") @Valid @RequestParam(value = "skipTrashCan", required = false) Boolean skipTrashCan,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /entity/{id}/acl : Delete the Access Control List (ACL) for a given Entity.
     * Delete the Access Control List (ACL) for a given Entity.  &lt;p&gt;  By default, Entities such as FileEntity and Folder inherit their permission from their containing Project. For such Entities the Project is the Entity&#39;s &#39;benefactor&#39;. This permission inheritance can be overridden by creating an ACL for the Entity. When this occurs the Entity becomes its own benefactor and all permission are determined by its own ACL.  &lt;/p&gt;  &lt;p&gt;  If the ACL of an Entity is deleted, then its benefactor will automatically be set to its parent&#39;&#39;s benefactor. The ACL for a Project cannot be deleted.  &lt;/p&gt;  &lt;p&gt;  Note: The caller must be granted &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.CHANGE_PERMISSIONS&lt;/a&gt; on the Entity to call this method.  &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @param body  (optional)
     * @return This resource has been deleted. (status code 204)
     */
    @ApiOperation(value = "Delete the Access Control List (ACL) for a given Entity.", nickname = "deleteEntityAcl", notes = "Delete the Access Control List (ACL) for a given Entity.  <p>  By default, Entities such as FileEntity and Folder inherit their permission from their containing Project. For such Entities the Project is the Entity's 'benefactor'. This permission inheritance can be overridden by creating an ACL for the Entity. When this occurs the Entity becomes its own benefactor and all permission are determined by its own ACL.  </p>  <p>  If the ACL of an Entity is deleted, then its benefactor will automatically be set to its parent''s benefactor. The ACL for a Project cannot be deleted.  </p>  <p>  Note: The caller must be granted <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CHANGE_PERMISSIONS</a> on the Entity to call this method.  </p> ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "This resource has been deleted.") })
    @DeleteMapping(
        value = "/entity/{id}/acl",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> deleteEntityAcl(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /entity/{id}/version/{versionNumber} : Delete a specific version of a FileEntity.
     * Delete a specific version of a FileEntity.
     *
     * @param id The ID of the Entity (required)
     * @param versionNumber The version number of the Entity. (required)
     * @param body  (optional)
     * @return The resource has been deleted. (status code 204)
     */
    @ApiOperation(value = "Delete a specific version of a FileEntity.", nickname = "deleteEntityVersion", notes = "Delete a specific version of a FileEntity.", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource has been deleted.") })
    @DeleteMapping(
        value = "/entity/{id}/version/{versionNumber}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> deleteEntityVersion(@ApiParam(value = "The ID of the Entity",required=true) @PathVariable("id") String id,@ApiParam(value = "The version number of the Entity.",required=true) @PathVariable("versionNumber") Integer versionNumber,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/filepreview : Get the preview URL of the file associated with a specific version of a row and file handle column. 
     * Get the preview URL of the file associated with a specific version of a row and file handle column.  Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. 
     *
     * @param columnId The ID of the Table column (required)
     * @param id The ID of the FileEntity to get. (required)
     * @param rowId The ID of the Table Row (required)
     * @param versionNumber The version of the Table Row (required)
     * @param redirect When set to false, the URL will be returned as text/plain instead of redirecting.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the preview URL of the file associated with a specific version of a row and file handle column. ", nickname = "filePreviewRedirectUrlForRow", notes = "Get the preview URL of the file associated with a specific version of a row and file handle column.  Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/filepreview",
        produces = { "application/json" }
    )
    default ResponseEntity<String> filePreviewRedirectUrlForRow(@ApiParam(value = "The ID of the Table column",required=true) @PathVariable("columnId") String columnId,@ApiParam(value = "The ID of the FileEntity to get.",required=true) @PathVariable("id") String id,@ApiParam(value = "The ID of the Table Row",required=true) @PathVariable("rowId") BigDecimal rowId,@ApiParam(value = "The version of the Table Row",required=true) @PathVariable("versionNumber") BigDecimal versionNumber,@ApiParam(value = "When set to false, the URL will be returned as text/plain instead of redirecting. ") @Valid @RequestParam(value = "redirect", required = false) Boolean redirect) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/version/{versionNumber}/filepreview : Get the URL of the preview file associated with a specific version of a FileEntity. 
     * Get the URL of the preview file associated with a specific version of a FileEntity.  Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. 
     *
     * @param id The ID of the Entity. (required)
     * @param versionNumber The version number of the Entity. (required)
     * @param redirect When set to false, the URL will be returned as text/plain instead of redirecting.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the URL of the preview file associated with a specific version of a FileEntity. ", nickname = "filePreviewRedirectUrlForVersion", notes = "Get the URL of the preview file associated with a specific version of a FileEntity.  Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/entity/{id}/version/{versionNumber}/filepreview",
        produces = { "application/json" }
    )
    default ResponseEntity<String> filePreviewRedirectUrlForVersion(@ApiParam(value = "The ID of the Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "The version number of the Entity.",required=true) @PathVariable("versionNumber") Integer versionNumber,@ApiParam(value = "When set to false, the URL will be returned as text/plain instead of redirecting. ") @Valid @RequestParam(value = "redirect", required = false) Boolean redirect) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/file : Get the actual URL of the file associated with a specific version of a row and file handle column. 
     * Get the actual URL of the file associated with a specific version of a row and file handle column.  Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. 
     *
     * @param columnId The ID of the Table column (required)
     * @param id The ID of the FileEntity to get. (required)
     * @param rowId The ID of the Table Row (required)
     * @param versionNumber The version of the Table Row (required)
     * @param redirect When set to false, the URL will be returned as text/plain instead of redirecting.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the actual URL of the file associated with a specific version of a row and file handle column. ", nickname = "fileRedirectUrlForRow", notes = "Get the actual URL of the file associated with a specific version of a row and file handle column.  Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/entity/{id}/table/column/{columnId}/row/{rowId}/version/{versionNumber}/file",
        produces = { "application/json" }
    )
    default ResponseEntity<String> fileRedirectUrlForRow(@ApiParam(value = "The ID of the Table column",required=true) @PathVariable("columnId") String columnId,@ApiParam(value = "The ID of the FileEntity to get.",required=true) @PathVariable("id") String id,@ApiParam(value = "The ID of the Table Row",required=true) @PathVariable("rowId") BigDecimal rowId,@ApiParam(value = "The version of the Table Row",required=true) @PathVariable("versionNumber") BigDecimal versionNumber,@ApiParam(value = "When set to false, the URL will be returned as text/plain instead of redirecting. ") @Valid @RequestParam(value = "redirect", required = false) Boolean redirect) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/generatedBy : Get an existing activity for the current version of an Entity.
     * Get an existing activity for the current version of an Entity.
     *
     * @param id The ID of an Entity. (required)
     * @param body Get an existing activity for the current version of an Entity. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get an existing activity for the current version of an Entity.", nickname = "getActivityForEntity", notes = "Get an existing activity for the current version of an Entity.", response = Activity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Activity.class) })
    @GetMapping(
        value = "/entity/{id}/generatedBy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Activity> getActivityForEntity(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "Get an existing activity for the current version of an Entity."  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"used\" : [ { \"concreteType\" : \"...\", \"wasExecuted\" : true }, { \"concreteType\" : \"...\", \"wasExecuted\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/version/{versionNumber}/generatedBy : Get an existing activity for a specific version of an Entity.
     * Get an existing activity for a specific version of an Entity.
     *
     * @param id The ID of the Entity. (required)
     * @param versionNumber The version number of the Entity. (required)
     * @param body Get an existing activity for a specific version of an Entity. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get an existing activity for a specific version of an Entity.", nickname = "getActivityForEntityVersion", notes = "Get an existing activity for a specific version of an Entity.", response = Activity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Activity.class) })
    @GetMapping(
        value = "/entity/{id}/version/{versionNumber}/generatedBy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Activity> getActivityForEntityVersion(@ApiParam(value = "The ID of the Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "The version number of the Entity.",required=true) @PathVariable("versionNumber") Integer versionNumber,@ApiParam(value = "Get an existing activity for a specific version of an Entity."  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"used\" : [ { \"concreteType\" : \"...\", \"wasExecuted\" : true }, { \"concreteType\" : \"...\", \"wasExecuted\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/version : Get all versions of an Entity one page at a time.
     * Get all versions of an Entity one page at a time.
     *
     * @param id The ID of the Entity. (required)
     * @param limit Limits the number of entities that will be fetched for this page. When null it will default to 10.  (optional, default to 10)
     * @param offset The offset index determines where this page will start from. When null it will default to 0.  (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get all versions of an Entity one page at a time.", nickname = "getAllVersionsOfEntity", notes = "Get all versions of an Entity one page at a time.", response = PaginatedResultsOfVersionInfo.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfVersionInfo.class) })
    @GetMapping(
        value = "/entity/{id}/version",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfVersionInfo> getAllVersionsOfEntity(@ApiParam(value = "The ID of the Entity.",required=true) @PathVariable("id") String id,@Min(10)@ApiParam(value = "Limits the number of entities that will be fetched for this page. When null it will default to 10. ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "The offset index determines where this page will start from. When null it will default to 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"contentMd5\" : \"...\", \"contentSize\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedByPrincipalId\" : \"...\", \"modifiedOn\" : \"...\", \"versionComment\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"contentMd5\" : \"...\", \"contentSize\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedByPrincipalId\" : \"...\", \"modifiedOn\" : \"...\", \"versionComment\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/schema/binding : Get information about a JSON schema bound to an Entity.
     * Get information about a JSON schema bound to an Entity. Note: Any child Entity that does not have a bound schema will inherit the first bound schema found in its hierarchy.  Note: The caller must be granted the READ permission on the Entity. 
     *
     * @param id The ID of an Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get information about a JSON schema bound to an Entity.", nickname = "getBoundJsonSchema", notes = "Get information about a JSON schema bound to an Entity. Note: Any child Entity that does not have a bound schema will inherit the first bound schema found in its hierarchy.  Note: The caller must be granted the READ permission on the Entity. ", response = JsonSchemaObjectBinding.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = JsonSchemaObjectBinding.class) })
    @GetMapping(
        value = "/entity/{id}/schema/binding",
        produces = { "application/json" }
    )
    default ResponseEntity<JsonSchemaObjectBinding> getBoundJsonSchema(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"jsonSchemaVersionInfo\" : { \"$id\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"jsonSHA256Hex\" : \"...\", \"organizationId\" : \"...\", \"organizationName\" : \"...\", \"schemaId\" : \"...\", \"schemaName\" : \"...\", \"semanticVersion\" : \"...\", \"versionId\" : \"...\" }, \"objectId\" : 12345, \"objectType\" : \"entity\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/challenge : Retrieve a Challenge given the ID of its associated Project.
     * Retrieve a Challenge given the ID of its associated Project.  To retrieve a Challenge one must have READ permission on the Project. 
     *
     * @param id Synapse Project id (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve a Challenge given the ID of its associated Project.", nickname = "getChallengeByProjectId", notes = "Retrieve a Challenge given the ID of its associated Project.  To retrieve a Challenge one must have READ permission on the Project. ", response = Challenge.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Challenge Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Challenge.class) })
    @GetMapping(
        value = "/entity/{id}/challenge",
        produces = { "application/json" }
    )
    default ResponseEntity<Challenge> getChallengeByProjectId(@ApiParam(value = "Synapse Project id",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"etag\" : \"32439w3qsdfw\", \"projectId\" : \"syn22222\", \"participantTeamId\" : \"333333\", \"id\" : \"4321\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/children : Get a page of children for a given parent ID.
     * Get a page of children for a given parent ID. This service can also be used to list projects by setting the parentId to NULL in EntityChildrenRequest. 
     *
     * @param entityChildrenRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a page of children for a given parent ID.", nickname = "getChildren", notes = "Get a page of children for a given parent ID. This service can also be used to list projects by setting the parentId to NULL in EntityChildrenRequest. ", response = EntityChildrenResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityChildrenResponse.class) })
    @PostMapping(
        value = "/entity/children",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EntityChildrenResponse> getChildren(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EntityChildrenRequest entityChildrenRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"page\" : [ { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ], \"sumFileSizesBytes\" : 12345, \"totalChildCount\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/column : Given the ID of a.
     * Given the ID of a &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.table.TableEntity}\&quot;&gt;TableEntity&lt;/a&gt;, get its list of &lt;ahref&#x3D;\&quot;${org.sagebionetworks.repo.model.table.ColumnModel}\&quot;&gt;ColumnModels&lt;/a&gt; that are currently assigned to the table.  &lt;p&gt;  &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum frequency this method can be called&lt;/td&gt;  &lt;td&gt;6 calls per minute&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/p&gt; 
     *
     * @param id The ID of a Table. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Given the ID of a.", nickname = "getColumnForTable", notes = "Given the ID of a <a href=\"${org.sagebionetworks.repo.model.table.TableEntity}\">TableEntity</a>, get its list of <ahref=\"${org.sagebionetworks.repo.model.table.ColumnModel}\">ColumnModels</a> that are currently assigned to the table.  <p>  <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum frequency this method can be called</td>  <td>6 calls per minute</td>  </tr>  </table>  </p> ", response = PaginatedColumnModels.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedColumnModels.class) })
    @GetMapping(
        value = "/entity/{id}/column",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedColumnModels> getColumnForTable(@ApiParam(value = "The ID of a Table.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"columnType\" : \"LINK\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"range\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" }, { \"columnType\" : \"SUBMISSIONID\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"range\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id} : Get an Entity
     * Get an Entity using its ID.  &lt;p&gt; Note: To get an Entity the caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot; &gt;ACCESS_TYPE.READ&lt;/a&gt; on the Entity.  &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get an Entity", nickname = "getEntity", notes = "Get an Entity using its ID.  <p> Note: To get an Entity the caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\" >ACCESS_TYPE.READ</a> on the Entity.  </p> ", response = Entity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Entity.class) })
    @GetMapping(
        value = "/entity/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Entity> getEntity(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"Trial ' + (_) . 09\", \"parentId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/accessRequirement : Retrieve paginated list of ALL Access Requirements associated with an entity.
     * Retrieve paginated list of ALL Access Requirements associated with an entity. 
     *
     * @param id The ID of an Entity. (required)
     * @param limit Limits the size of the page returned. For example, a page size of 10 require limit &#x3D; 10. The maximum limit for this call is 50.  (optional)
     * @param offset The index of the pagination offset. For a page size of 10, the first page would be at offset &#x3D; 0, and the second page would be at offset &#x3D; 10.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve paginated list of ALL Access Requirements associated with an entity.", nickname = "getEntityAccessRequirements", notes = "Retrieve paginated list of ALL Access Requirements associated with an entity. ", response = PaginatedResultsOfAccessRequirement.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Requirement Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfAccessRequirement.class) })
    @GetMapping(
        value = "/entity/{id}/accessRequirement",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfAccessRequirement> getEntityAccessRequirements(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@Min(10) @Max(50) @ApiParam(value = "Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum limit for this call is 50. ") @Valid @RequestParam(value = "limit", required = false) Integer limit,@Min(0)@ApiParam(value = "The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10. ") @Valid @RequestParam(value = "offset", required = false) Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"accessType\" : \"READ\", \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"subjectIds\" : [ { \"id\" : \"...\", \"type\" : \"EVALUATION\" }, { \"id\" : \"...\", \"type\" : \"TEAM\" } ], \"versionNumber\" : 12345 }, { \"accessType\" : \"UPLOAD\", \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"subjectIds\" : [ { \"id\" : \"...\", \"type\" : \"ENTITY\" }, { \"id\" : \"...\", \"type\" : \"TEAM\" } ], \"versionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/acl : Get the Access Control List (ACL) for a given entity.
     * Get the Access Control List (ACL) for a given entity.  &lt;p&gt; Note: If this method is called on an Entity that is inheriting its permission from another Entity a NOT_FOUND (404) response will be generated. The error response message will include the Entity&#39;&#39;s benefactor ID. &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the Access Control List (ACL) for a given entity.", nickname = "getEntityAcl", notes = "Get the Access Control List (ACL) for a given entity.  <p> Note: If this method is called on an Entity that is inheriting its permission from another Entity a NOT_FOUND (404) response will be generated. The error response message will include the Entity''s benefactor ID. </p> ", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @GetMapping(
        value = "/entity/{id}/acl",
        produces = { "application/json" }
    )
    default ResponseEntity<AccessControlList> getEntityAcl(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/annotations2 : Get the annotations for an entity.
     * Get the annotations for an entity.  &lt;p&gt;  Note: The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot; &gt;ACCESS_TYPE.READ&lt;/a&gt; on the Entity, to get its annotations.  &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the annotations for an entity.", nickname = "getEntityAnnotations", notes = "Get the annotations for an entity.  <p>  Note: The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\" >ACCESS_TYPE.READ</a> on the Entity, to get its annotations.  </p> ", response = AnnotationsV2.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AnnotationsV2.class) })
    @GetMapping(
        value = "/entity/{id}/annotations2",
        produces = { "application/json" }
    )
    default ResponseEntity<AnnotationsV2> getEntityAnnotations(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"annotations\" : { \"property1\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] }, \"property2\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] } }, \"etag\" : \"...\", \"id\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/version/{versionNumber}/annotations2 : Get an Entity&#39;s annotations for a specific version of a FileEntity.
     * Get an Entity&#39;s annotations for a specific version of a FileEntity.
     *
     * @param id The ID of the Entity. (required)
     * @param versionNumber The version number of the Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get an Entity's annotations for a specific version of a FileEntity.", nickname = "getEntityAnnotationsV2ForVersion", notes = "Get an Entity's annotations for a specific version of a FileEntity.", response = AnnotationsV2.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AnnotationsV2.class) })
    @GetMapping(
        value = "/entity/{id}/version/{versionNumber}/annotations2",
        produces = { "application/json" }
    )
    default ResponseEntity<AnnotationsV2> getEntityAnnotationsV2ForVersion(@ApiParam(value = "The ID of the Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "The version number of the Entity.",required=true) @PathVariable("versionNumber") Integer versionNumber) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"annotations\" : { \"property1\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] }, \"property2\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] } }, \"etag\" : \"...\", \"id\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/benefactor : Get an Entity&#39;s benefactor.
     * Get an Entity&#39;s benefactor.  &lt;p&gt;  The term &#39;benefactor&#39; is used indicate which Entity an Entity inherits is ACL from. For example, a newly created Project will have its own ACL and therefore, it will be its own benefactor. A Folder will inherit its ACL (by default) from its containing Project so the Project will be the Folder&#39;s benefactor. This method will return the EntityHeader of an Entity&#39;s benefactor. &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @param body  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get an Entity's benefactor.", nickname = "getEntityBenefactor", notes = "Get an Entity's benefactor.  <p>  The term 'benefactor' is used indicate which Entity an Entity inherits is ACL from. For example, a newly created Project will have its own ACL and therefore, it will be its own benefactor. A Folder will inherit its ACL (by default) from its containing Project so the Project will be the Folder's benefactor. This method will return the EntityHeader of an Entity's benefactor. </p> ", response = EntityHeader.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityHeader.class) })
    @GetMapping(
        value = "/entity/{id}/benefactor",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EntityHeader> getEntityBenefactor(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/bundle2 : Get an entity and related data with a single POST.
     * Get an entity and related data with a single POST.
     *
     * @param id The ID of an Entity. (required)
     * @param entityBundleRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get an entity and related data with a single POST.", nickname = "getEntityBundle", notes = "Get an entity and related data with a single POST.", response = EntityBundleV2.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Bundle V2 Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityBundleV2.class) })
    @PostMapping(
        value = "/entity/{id}/bundle2",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EntityBundleV2> getEntityBundle(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EntityBundleRequest entityBundleRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessControlList\" : { \"createdBy\" : \"...\", \"creationDate\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"resourceAccess\" : [ { \"accessType\" : [ \"CHANGE_PERMISSIONS\", \"UPDATE_SUBMISSION\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"DOWNLOAD\", \"MODERATE\" ], \"principalId\" : 12345 } ] }, \"annotations\" : { \"annotations\" : { \"property1\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] }, \"property2\" : { \"type\" : \"TIMESTAMP_MS\", \"value\" : [ \"...\", \"...\" ] } }, \"etag\" : \"...\", \"id\" : \"...\" }, \"benefactorAcl\" : { \"createdBy\" : \"...\", \"creationDate\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPLOAD\", \"DELETE\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"CHANGE_SETTINGS\", \"CREATE\" ], \"principalId\" : 12345 } ] }, \"doiAssociation\" : { \"associatedBy\" : \"...\", \"associatedOn\" : \"...\", \"associationId\" : \"...\", \"doiUri\" : \"...\", \"doiUrl\" : \"...\", \"etag\" : \"...\", \"objectId\" : \"...\", \"objectType\" : \"VERIFICATION_SUBMISSION\", \"objectVersion\" : 12345, \"updatedBy\" : \"...\", \"updatedOn\" : \"...\" }, \"entity\" : { \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"parentId\" : \"...\" }, \"entityType\" : \"entityview\", \"fileHandles\" : [ { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 }, { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 } ], \"fileName\" : \"...\", \"hasChildren\" : true, \"path\" : { \"path\" : [ { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ] }, \"permissions\" : { \"canAddChild\" : true, \"canCertifiedUserAddChild\" : true, \"canCertifiedUserEdit\" : true, \"canChangePermissions\" : true, \"canChangeSettings\" : true, \"canDelete\" : true, \"canDownload\" : true, \"canEdit\" : true, \"canEnableInheritance\" : true, \"canModerate\" : true, \"canPublicRead\" : true, \"canUpload\" : true, \"canView\" : true, \"isCertificationRequired\" : true, \"isCertifiedUser\" : true, \"ownerPrincipalId\" : 12345 }, \"restrictionInformation\" : { \"hasUnmetAccessRequirement\" : true, \"restrictionLevel\" : \"RESTRICTED_BY_TERMS_OF_USE\" }, \"rootWikiId\" : \"...\", \"tableBundle\" : { \"columnModels\" : [ { \"columnType\" : \"STRING\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"enumeration\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" }, { \"columnType\" : \"USERID_LIST\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"range\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" } ], \"maxRowsPerPage\" : 12345 }, \"threadCount\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/version/{versionNumber}/bundle2 : Get an entity at a specific version and its related data with a single POST. 
     * Get an entity at a specific version and its related data with a single POST.
     *
     * @param id The ID of the Entity. (required)
     * @param versionNumber The version number of the Entity. (required)
     * @param entityBundleRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get an entity at a specific version and its related data with a single POST. ", nickname = "getEntityBundle2", notes = "Get an entity at a specific version and its related data with a single POST.", response = EntityBundleV2.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Bundle V2 Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityBundleV2.class) })
    @PostMapping(
        value = "/entity/{id}/version/{versionNumber}/bundle2",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EntityBundleV2> getEntityBundle2(@ApiParam(value = "The ID of the Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "The version number of the Entity.",required=true) @PathVariable("versionNumber") Integer versionNumber,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EntityBundleRequest entityBundleRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessControlList\" : { \"createdBy\" : \"...\", \"creationDate\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"resourceAccess\" : [ { \"accessType\" : [ \"CHANGE_PERMISSIONS\", \"UPDATE_SUBMISSION\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"DOWNLOAD\", \"MODERATE\" ], \"principalId\" : 12345 } ] }, \"annotations\" : { \"annotations\" : { \"property1\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] }, \"property2\" : { \"type\" : \"TIMESTAMP_MS\", \"value\" : [ \"...\", \"...\" ] } }, \"etag\" : \"...\", \"id\" : \"...\" }, \"benefactorAcl\" : { \"createdBy\" : \"...\", \"creationDate\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPLOAD\", \"DELETE\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"CHANGE_SETTINGS\", \"CREATE\" ], \"principalId\" : 12345 } ] }, \"doiAssociation\" : { \"associatedBy\" : \"...\", \"associatedOn\" : \"...\", \"associationId\" : \"...\", \"doiUri\" : \"...\", \"doiUrl\" : \"...\", \"etag\" : \"...\", \"objectId\" : \"...\", \"objectType\" : \"VERIFICATION_SUBMISSION\", \"objectVersion\" : 12345, \"updatedBy\" : \"...\", \"updatedOn\" : \"...\" }, \"entity\" : { \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"parentId\" : \"...\" }, \"entityType\" : \"entityview\", \"fileHandles\" : [ { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 }, { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 } ], \"fileName\" : \"...\", \"hasChildren\" : true, \"path\" : { \"path\" : [ { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ] }, \"permissions\" : { \"canAddChild\" : true, \"canCertifiedUserAddChild\" : true, \"canCertifiedUserEdit\" : true, \"canChangePermissions\" : true, \"canChangeSettings\" : true, \"canDelete\" : true, \"canDownload\" : true, \"canEdit\" : true, \"canEnableInheritance\" : true, \"canModerate\" : true, \"canPublicRead\" : true, \"canUpload\" : true, \"canView\" : true, \"isCertificationRequired\" : true, \"isCertifiedUser\" : true, \"ownerPrincipalId\" : 12345 }, \"restrictionInformation\" : { \"hasUnmetAccessRequirement\" : true, \"restrictionLevel\" : \"RESTRICTED_BY_TERMS_OF_USE\" }, \"rootWikiId\" : \"...\", \"tableBundle\" : { \"columnModels\" : [ { \"columnType\" : \"STRING\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"enumeration\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" }, { \"columnType\" : \"USERID_LIST\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"range\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" } ], \"maxRowsPerPage\" : 12345 }, \"threadCount\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/filehandles : Get the FileHandles of the file currently associated with the current version of the Entity. 
     * Get the FileHandles of the file currently associated with the current version of the Entity.  &lt;p&gt; If a preview exists for the file then the handle of the preview and the file will be returned with this call. &lt;/p&gt; 
     *
     * @param id The ID of a File Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the FileHandles of the file currently associated with the current version of the Entity. ", nickname = "getEntityFileHandles", notes = "Get the FileHandles of the file currently associated with the current version of the Entity.  <p> If a preview exists for the file then the handle of the preview and the file will be returned with this call. </p> ", response = FileHandleResults.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FileHandleResults.class) })
    @GetMapping(
        value = "/entity/{id}/filehandles",
        produces = { "application/json" }
    )
    default ResponseEntity<FileHandleResults> getEntityFileHandles(@ApiParam(value = "The ID of a File Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"list\" : [ { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 }, { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/version/{versionNumber}/filehandles : Get the FileHandles of the file associated with a specific version of a FileEntity. 
     * Get the FileHandles of the file associated with a specific version of a FileEntity.  If a preview exists for the file then the handle of the preview and the file will be returned with this call. 
     *
     * @param id The ID of the Entity. (required)
     * @param versionNumber The version number of the Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the FileHandles of the file associated with a specific version of a FileEntity. ", nickname = "getEntityFileHandlesForVersion", notes = "Get the FileHandles of the file associated with a specific version of a FileEntity.  If a preview exists for the file then the handle of the preview and the file will be returned with this call. ", response = FileHandleResults.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FileHandleResults.class) })
    @GetMapping(
        value = "/entity/{id}/version/{versionNumber}/filehandles",
        produces = { "application/json" }
    )
    default ResponseEntity<FileHandleResults> getEntityFileHandlesForVersion(@ApiParam(value = "The ID of the Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "The version number of the Entity.",required=true) @PathVariable("versionNumber") Integer versionNumber) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"list\" : [ { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 }, { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/version/{versionNumber} : Get a specific version of an Entity.
     * Get a specific version of an Entity.  Note: Only the current version of the Entity can be used for an Entity update. Therefore, only the current version of the Entity will be returned with the actual etag. All older versions will be returned with an eTag &#39;00000000-0000-0000-0000-000000000000&#39;. 
     *
     * @param id The ID of the Entity (required)
     * @param versionNumber The version number of the Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a specific version of an Entity.", nickname = "getEntityForVersion", notes = "Get a specific version of an Entity.  Note: Only the current version of the Entity can be used for an Entity update. Therefore, only the current version of the Entity will be returned with the actual etag. All older versions will be returned with an eTag '00000000-0000-0000-0000-000000000000'. ", response = Entity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Entity.class) })
    @GetMapping(
        value = "/entity/{id}/version/{versionNumber}",
        produces = { "application/json" }
    )
    default ResponseEntity<Entity> getEntityForVersion(@ApiParam(value = "The ID of the Entity",required=true) @PathVariable("id") String id,@ApiParam(value = "The version number of the Entity.",required=true) @PathVariable("versionNumber") Integer versionNumber) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"Trial ' + (_) . 09\", \"parentId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/md5/{md5} : Gets FileEntities matching the given MD5 string which the user has read access to. 
     * Gets at most 200 FileEntities matching the given MD5 string which the user has read access to. NOTE: Another option is to create a file view that includes MD5 values. https://docs.synapse.org/articles/views.html 
     *
     * @param md5 File MD5 (required)
     * @param body  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets FileEntities matching the given MD5 string which the user has read access to. ", nickname = "getEntityHeaderByMd5", notes = "Gets at most 200 FileEntities matching the given MD5 string which the user has read access to. NOTE: Another option is to create a file view that includes MD5 values. https://docs.synapse.org/articles/views.html ", response = PaginatedResultsOfEntityHeader.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfEntityHeader.class) })
    @GetMapping(
        value = "/entity/md5/{md5}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfEntityHeader> getEntityHeaderByMd5(@ApiParam(value = "File MD5",required=true) @PathVariable("md5") String md5,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/alias/{alias} : Lookup an Entity ID using an alias.
     * Lookup an Entity ID using an alias.
     *
     * @param alias Alias of an Entity (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Lookup an Entity ID using an alias.", nickname = "getEntityIdByAlias", notes = "Lookup an Entity ID using an alias.", response = EntityId.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityId.class) })
    @GetMapping(
        value = "/entity/alias/{alias}",
        produces = { "application/json" }
    )
    default ResponseEntity<EntityId> getEntityIdByAlias(@ApiParam(value = "Alias of an Entity",required=true) @PathVariable("alias") String alias) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/json : Get the raw JSON for the given entity.
     * Get the raw JSON for the given entity. The resulting JSON can be used for the validation of a entity against a &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.schema.JsonSchema}\&quot;&gt;JsonSchema&lt;/a&gt;.  &lt;p&gt;  Note: The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot; &gt;ACCESS_TYPE.READ&lt;/a&gt; permission on the Entity.  &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the raw JSON for the given entity.", nickname = "getEntityJson", notes = "Get the raw JSON for the given entity. The resulting JSON can be used for the validation of a entity against a <a href=\"${org.sagebionetworks.repo.model.schema.JsonSchema}\">JsonSchema</a>.  <p>  Note: The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\" >ACCESS_TYPE.READ</a> permission on the Entity.  </p> ", response = Object.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Object.class) })
    @GetMapping(
        value = "/entity/{id}/json",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> getEntityJson(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/path : Get the full path of an Entity as a List of EntityHeaders.
     * Get the full path of an Entity as a List of EntityHeaders. The first EntityHeader will be the Root Entity, and the last EntityHeader will be the requested Entity. 
     *
     * @param id The ID of an Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the full path of an Entity as a List of EntityHeaders.", nickname = "getEntityPath", notes = "Get the full path of an Entity as a List of EntityHeaders. The first EntityHeader will be the Root Entity, and the last EntityHeader will be the requested Entity. ", response = EntityPath.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityPath.class) })
    @GetMapping(
        value = "/entity/{id}/path",
        produces = { "application/json" }
    )
    default ResponseEntity<EntityPath> getEntityPath(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : [ { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/schema/validation : Get the validation results of an Entity against its bound JSON schema.
     * Get the validation results of an Entity against its bound JSON schema. The validation of an Entity against its bound schema is automatic and eventually consistent. The validation results include the etag of the Entity at the time of the last validation. If the returned etag does not match the current etag of the Entity then the results should be considered out-of-date. If an Entity has not been validated for the first time, or if the Entity does not have a bound schema, this method will return a 404 (not-found). Keep checking for the latest validation results.  Note: The caller must be granted the READ permission on the Entity. 
     *
     * @param id The ID of the Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the validation results of an Entity against its bound JSON schema.", nickname = "getEntitySchemaValidationResults", notes = "Get the validation results of an Entity against its bound JSON schema. The validation of an Entity against its bound schema is automatic and eventually consistent. The validation results include the etag of the Entity at the time of the last validation. If the returned etag does not match the current etag of the Entity then the results should be considered out-of-date. If an Entity has not been validated for the first time, or if the Entity does not have a bound schema, this method will return a 404 (not-found). Keep checking for the latest validation results.  Note: The caller must be granted the READ permission on the Entity. ", response = ValidationResults.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ValidationResults.class) })
    @GetMapping(
        value = "/entity/{id}/schema/validation",
        produces = { "application/json" }
    )
    default ResponseEntity<ValidationResults> getEntitySchemaValidationResults(@ApiParam(value = "The ID of the Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"allValidationMessages\" : [ \"...\", \"...\" ], \"isValid\" : true, \"objectEtag\" : \"...\", \"objectId\" : \"...\", \"objectType\" : \"entity\", \"schema$id\" : \"...\", \"validatedOn\" : \"...\", \"validationErrorMessage\" : \"...\", \"validationException\" : { \"causingExceptions\" : [ { }, { } ], \"keyword\" : \"...\", \"message\" : \"...\", \"pointerToViolation\" : \"...\", \"schemaLocation\" : \"...\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/schema/validation/statistics : Get the summary statistics of the JSON schema validation results for a single container Entity such as a Project or Folder. 
     * Get the The summary statistics of the JSON schema validation results for a single container Entity such as a Project or Folder. Only direct children of the container are included in the results. The statistics include the total number of children in the container, and the counts for both the invalid and valid children. If an Entity has not been validated for the first time, or it does not have bound schema it will be counted as &#39;unknown&#39;.  The validation of an Entity against its bound schema is automatic and eventually consistent. Keep checking this method to get the latest validation statistics for the given container.  Note: The caller must be granted the READ permission on the container Entity. The resulting statistics will only include children that the caller has the READ permission on. 
     *
     * @param id The ID of the container Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the summary statistics of the JSON schema validation results for a single container Entity such as a Project or Folder. ", nickname = "getEntitySchemaValidationStatistics", notes = "Get the The summary statistics of the JSON schema validation results for a single container Entity such as a Project or Folder. Only direct children of the container are included in the results. The statistics include the total number of children in the container, and the counts for both the invalid and valid children. If an Entity has not been validated for the first time, or it does not have bound schema it will be counted as 'unknown'.  The validation of an Entity against its bound schema is automatic and eventually consistent. Keep checking this method to get the latest validation statistics for the given container.  Note: The caller must be granted the READ permission on the container Entity. The resulting statistics will only include children that the caller has the READ permission on. ", response = ValidationSummaryStatistics.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ValidationSummaryStatistics.class) })
    @GetMapping(
        value = "/entity/{id}/schema/validation/statistics",
        produces = { "application/json" }
    )
    default ResponseEntity<ValidationSummaryStatistics> getEntitySchemaValidationStatistics(@ApiParam(value = "The ID of the container Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"containerId\" : \"...\", \"generatedOn\" : \"...\", \"numberOfInvalidChildren\" : 12345, \"numberOfUnknownChildren\" : 12345, \"numberOfValidChildren\" : 12345, \"totalNumberOfChildren\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/type : Get the EntityHeader of an Entity given its ID.
     * Get the EntityHeader of an Entity given its ID. The EntityHeader is a light weight object with basic information about an Entity includes its type. 
     *
     * @param id The ID of the Entity. (required)
     * @param body  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the EntityHeader of an Entity given its ID.", nickname = "getEntityType", notes = "Get the EntityHeader of an Entity given its ID. The EntityHeader is a light weight object with basic information about an Entity includes its type. ", response = EntityHeader.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityHeader.class) })
    @GetMapping(
        value = "/entity/{id}/type",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EntityHeader> getEntityType(@ApiParam(value = "The ID of the Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/type : Get a batch of EntityHeader given multile Entity IDs.
     * Get a batch of EntityHeader given multile Entity IDs. The EntityHeader is a light weight object with basic information about an Entity includes its type. 
     *
     * @param batch A comma separated list of Entity IDs to get EntityHeaders for.  (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a batch of EntityHeader given multile Entity IDs.", nickname = "getEntityTypeBatch", notes = "Get a batch of EntityHeader given multile Entity IDs. The EntityHeader is a light weight object with basic information about an Entity includes its type. ", response = PaginatedResultsOfEntityHeader.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfEntityHeader.class) })
    @GetMapping(
        value = "/entity/type",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfEntityHeader> getEntityTypeBatch(@NotNull @ApiParam(value = "A comma separated list of Entity IDs to get EntityHeaders for. ", required = true) @Valid @RequestParam(value = "batch", required = true) String batch) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/header : Get the EntityHeader for a list of references with a POST.
     * Get the EntityHeader for a list of references with a POST. If any item in the batch fails (e.g., with a 404) it will be EXCLUDED in the result set. 
     *
     * @param referenceList  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the EntityHeader for a list of references with a POST.", nickname = "getEntityVersionedTypeBatch", notes = "Get the EntityHeader for a list of references with a POST. If any item in the batch fails (e.g., with a 404) it will be EXCLUDED in the result set. ", response = PaginatedResultsOfEntityHeader.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfEntityHeader.class) })
    @PostMapping(
        value = "/entity/header",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfEntityHeader> getEntityVersionedTypeBatch(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ReferenceList referenceList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/evaluation : Gets Evaluations tied to a project.
     * Gets Evaluations tied to a project. &lt;b&gt;Note:&lt;/b&gt; The response will contain only those Evaluations on which the caller is granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ&lt;/a&gt; permission, unless specified otherwise with the accessType parameter. 
     *
     * @param id the ID of the project (required)
     * @param accessType The type of access for the user to filter for, optional and defaults to &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.READ&lt;/a&gt;  (optional)
     * @param activeOnly If &#39;true&#39; then return only those evaluations with rounds defined and for which the current time is in one of the rounds.  (optional, default to false)
     * @param evaluationIds an optional, comma-delimited list of evaluation IDs to which the response is limited  (optional)
     * @param limit Limits the number of entities that will be fetched for this page. When null it will default to 10.  (optional, default to 10)
     * @param offset The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0.  (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets Evaluations tied to a project.", nickname = "getEvaluationsByContentSourcePaginated", notes = "Gets Evaluations tied to a project. <b>Note:</b> The response will contain only those Evaluations on which the caller is granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> permission, unless specified otherwise with the accessType parameter. ", response = PaginatedResultsOfEvaluation.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Evaluation Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfEvaluation.class) })
    @GetMapping(
        value = "/entity/{id}/evaluation",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfEvaluation> getEvaluationsByContentSourcePaginated(@ApiParam(value = "the ID of the project",required=true) @PathVariable("id") String id,@ApiParam(value = "The type of access for the user to filter for, optional and defaults to <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.READ</a> ", allowableValues = "CREATE, READ, UPDATE, DELETE, CHANGE_PERMISSIONS, DOWNLOAD, UPLOAD, PARTICIPATE, SUBMIT, READ_PRIVATE_SUBMISSION, UPDATE_SUBMISSION, DELETE_SUBMISSION, TEAM_MEMBERSHIP_UPDATE, SEND_MESSAGE, CHANGE_SETTINGS, MODERATE") @Valid @RequestParam(value = "accessType", required = false) ACCESSTYPE accessType,@ApiParam(value = "If 'true' then return only those evaluations with rounds defined and for which the current time is in one of the rounds. ", defaultValue = "false") @Valid @RequestParam(value = "activeOnly", required = false, defaultValue="false") Boolean activeOnly,@ApiParam(value = "an optional, comma-delimited list of evaluation IDs to which the response is limited ") @Valid @RequestParam(value = "evaluationIds", required = false) String evaluationIds,@Min(0)@ApiParam(value = "Limits the number of entities that will be fetched for this page. When null it will default to 10. ", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "The offset index determines where this page will start from. An index of 0 is the first entity. When null it will default to 0. ", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalNumberOfResults\" : 0, \"results\" : [ { \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" }, { \"contentSource\" : \"syn234444\", \"createdOn\" : \"12345\", \"description\" : \"Evaluation Queue\", \"etag\" : \"aaaaa\", \"id\" : \"12345\", \"name\" : \"Test Evaluation\", \"ownerId\" : \"22222\", \"quota\" : { \"firstRoundStart\" : \"12345\", \"numberOfRounds\" : 12345, \"roundDurationMillis\" : 12345, \"submissionLimit\" : 12345 }, \"status\" : \"PLANNED\", \"submissionInstructionsMessage\" : \"Instructions\", \"submissionReceiptMessage\" : \"Received\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/table/filehandles : .
     * This method is used to get file handle information for rows in a TableEntity. The columns in the passed in RowReferenceSet need to be FILEHANDLEID columns and the rows in the passed in RowReferenceSet need to exists (a 400 will be returned if a row ID is provided that does not actually exist). The order of the returned rows of file handles is the same as the order of the rows requested, and the order of the file handles in each row is the same as the order of the columns requested.  Note: The caller must have the READ permission on the TableEntity to make this call.  &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum frequency this method can be called&lt;/td&gt;  &lt;td&gt;1 calls per second&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt; 
     *
     * @param id The ID of a TableEntity. (required)
     * @param rowReferenceSet  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = ".", nickname = "getFileHandles", notes = "This method is used to get file handle information for rows in a TableEntity. The columns in the passed in RowReferenceSet need to be FILEHANDLEID columns and the rows in the passed in RowReferenceSet need to exists (a 400 will be returned if a row ID is provided that does not actually exist). The order of the returned rows of file handles is the same as the order of the rows requested, and the order of the file handles in each row is the same as the order of the columns requested.  Note: The caller must have the READ permission on the TableEntity to make this call.  <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum frequency this method can be called</td>  <td>1 calls per second</td>  </tr>  </table> ", response = TableFileHandleResults.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TableFileHandleResults.class) })
    @PostMapping(
        value = "/entity/{id}/table/filehandles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TableFileHandleResults> getFileHandles(@ApiParam(value = "The ID of a TableEntity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) RowReferenceSet rowReferenceSet) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"headers\" : [ { \"columnType\" : \"EVALUATIONID\", \"id\" : \"...\", \"name\" : \"...\" }, { \"columnType\" : \"DATE_LIST\", \"id\" : \"...\", \"name\" : \"...\" } ], \"rows\" : [ { \"list\" : [ { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 }, { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 } ] }, { \"list\" : [ { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 }, { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 } ] } ], \"tableId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/filepreview : Get the URL of the preview file associated with the current version of a FileEntity. 
     * Get the URL of the preview file associated with the current version of a FileEntity.  &lt;p&gt; Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. &lt;/p&gt; 
     *
     * @param id The ID of a File Entity. (required)
     * @param redirect When set to false, the URL will be returned as text/plain instead of redirecting.  (optional)
     * @param status Status (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the URL of the preview file associated with the current version of a FileEntity. ", nickname = "getFilePreviewUrl", notes = "Get the URL of the preview file associated with the current version of a FileEntity.  <p> Note: This call will result in a HTTP temporary redirect (307), to the actual file URL if the caller meets all of the download requirements. </p> ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/entity/{id}/filepreview",
        produces = { "application/json" }
    )
    default ResponseEntity<String> getFilePreviewUrl(@ApiParam(value = "The ID of a File Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "When set to false, the URL will be returned as text/plain instead of redirecting. ") @Valid @RequestParam(value = "redirect", required = false) Boolean redirect,@ApiParam(value = "Status") @Valid @RequestParam(value = "status", required = false) Integer status) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/schema/validation/invalid : Get a single page of invalid JSON schema validation results for a container Entity (Project or Folder). 
     * Get a single page of invalid JSON schema validation results for a container Entity (Project or Folder). The validation of an Entity against its bound schema is automatic and eventually consistent. The validation results include the etag of the Entity at the time of the last validation. If the returned etag does not match the current etag of the Entity then the results should be considered out-of-date.  Note: The caller must be granted the READ permission on the container Entity. The results will only include children that the caller has the READ permission on. 
     *
     * @param id The ID of the container Entity. (required)
     * @param listValidationResultsRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a single page of invalid JSON schema validation results for a container Entity (Project or Folder). ", nickname = "getInvalidValidationResults", notes = "Get a single page of invalid JSON schema validation results for a container Entity (Project or Folder). The validation of an Entity against its bound schema is automatic and eventually consistent. The validation results include the etag of the Entity at the time of the last validation. If the returned etag does not match the current etag of the Entity then the results should be considered out-of-date.  Note: The caller must be granted the READ permission on the container Entity. The results will only include children that the caller has the READ permission on. ", response = ListValidationResultsResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ListValidationResultsResponse.class) })
    @PostMapping(
        value = "/entity/{id}/schema/validation/invalid",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ListValidationResultsResponse> getInvalidValidationResults(@ApiParam(value = "The ID of the container Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ListValidationResultsRequest listValidationResultsRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"page\" : [ { \"allValidationMessages\" : [ \"...\", \"...\" ], \"isValid\" : true, \"objectEtag\" : \"...\", \"objectId\" : \"...\", \"objectType\" : \"entity\", \"schema$id\" : \"...\", \"validatedOn\" : \"...\", \"validationErrorMessage\" : \"...\", \"validationException\" : { \"causingExceptions\" : [ { }, { } ], \"keyword\" : \"...\", \"message\" : \"...\", \"pointerToViolation\" : \"...\", \"schemaLocation\" : \"...\" } }, { \"allValidationMessages\" : [ \"...\", \"...\" ], \"isValid\" : true, \"objectEtag\" : \"...\", \"objectId\" : \"...\", \"objectType\" : \"entity\", \"schema$id\" : \"...\", \"validatedOn\" : \"...\", \"validationErrorMessage\" : \"...\", \"validationException\" : { \"causingExceptions\" : [ { }, { } ], \"keyword\" : \"...\", \"message\" : \"...\", \"pointerToViolation\" : \"...\", \"schemaLocation\" : \"...\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/table/transaction/async/get/{asyncToken} : Asynchronously get the results of a table update transaction started with.
     * Asynchronously get the results of a table update transaction started with POST /entity/{id}/table/transaction/async/start&lt;/a&gt;  Note: When the result is not ready yet, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object. 
     *
     * @param asyncToken The token returned when the job was started. (required)
     * @param id The ID of a Table entity. (required)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Asynchronously get the results of a table update transaction started with.", nickname = "getTableTransactionResult", notes = "Asynchronously get the results of a table update transaction started with POST /entity/{id}/table/transaction/async/start</a>  Note: When the result is not ready yet, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object. ", response = TableUpdateTransactionResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = TableUpdateTransactionResponse.class) })
    @GetMapping(
        value = "/entity/{id}/table/transaction/async/get/{asyncToken}",
        produces = { "application/json" }
    )
    default ResponseEntity<TableUpdateTransactionResponse> getTableTransactionResult(@ApiParam(value = "The token returned when the job was started.",required=true) @PathVariable("asyncToken") String asyncToken,@ApiParam(value = "The ID of a Table entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"concreteType\" : \"...\", \"results\" : [ { \"concreteType\" : \"...\" }, { \"concreteType\" : \"...\" } ], \"snapshotVersionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/sts : Gets the temporary S3 credentials from STS for the given entity.
     * Gets the temporary S3 credentials from STS for the given entity. These credentials are only good for the bucket and base key specified by the returned credentials and expire 12 hours after this API is called.  The specified entity must be a folder with an STS-enabled storage location. If that storage location is external storage, you may request read-only or read-write permissions. If that storage location is Synapse storage, you must request read-only permissions. 
     *
     * @param id The ID of the Folder with an STS-enabled storage location.  (required)
     * @param permission Read-only or read-write permissions.  (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Gets the temporary S3 credentials from STS for the given entity.", nickname = "getTemporaryCredentialsForEntity", notes = "Gets the temporary S3 credentials from STS for the given entity. These credentials are only good for the bucket and base key specified by the returned credentials and expire 12 hours after this API is called.  The specified entity must be a folder with an STS-enabled storage location. If that storage location is external storage, you may request read-only or read-write permissions. If that storage location is Synapse storage, you must request read-only permissions. ", response = StsCredentials.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = StsCredentials.class) })
    @GetMapping(
        value = "/entity/{id}/sts",
        produces = { "application/json" }
    )
    default ResponseEntity<StsCredentials> getTemporaryCredentialsForEntity(@ApiParam(value = "The ID of the Folder with an STS-enabled storage location. ",required=true) @PathVariable("id") String id,@NotNull @ApiParam(value = "Read-only or read-write permissions. ", required = true, allowableValues = "read_only, read_write") @Valid @RequestParam(value = "permission", required = true) String permission) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessKeyId\" : \"...\", \"baseKey\" : \"...\", \"bucket\" : \"...\", \"expiration\" : \"...\", \"secretAccessKey\" : \"...\", \"sessionToken\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/threadcounts : Get number of threads that belong to projects user can view and references the given entity. 
     * This API is used to get list of entity and count pairs, with count is the number of threads that belong to projects user can view and references the given entity.  Target users: anyone who has READ permission to the project. 
     *
     * @param entityIdList The requested list. Limit size 20. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get number of threads that belong to projects user can view and references the given entity. ", nickname = "getThreadCounts", notes = "This API is used to get list of entity and count pairs, with count is the number of threads that belong to projects user can view and references the given entity.  Target users: anyone who has READ permission to the project. ", response = EntityThreadCounts.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityThreadCounts.class) })
    @PostMapping(
        value = "/entity/threadcounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EntityThreadCounts> getThreadCounts(@ApiParam(value = "The requested list. Limit size 20."  )  @Valid @RequestBody(required = false) EntityIdList entityIdList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"list\" : [ { \"count\" : 12345, \"entityId\" : \"...\" }, { \"count\" : 12345, \"entityId\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/threads : This API is used to get N number of threads that belongs to projects user can view and references the given entity. 
     * This API is used to get N number of threads that belongs to projects user can view and references the given entity.  Target users: anyone who has READ permission to the entity. 
     *
     * @param id The ID of an Entity. (required)
     * @param ascending The direction of sort: true for ascending, and false for descending (optional)
     * @param limit Limits the size of the page returned. For example, a page size of 10 require limit &#x3D; 10. The maximum Limit for this call is 20.&#39;  (optional, default to new BigDecimal(&quot;10&quot;))
     * @param offset The index of the pagination offset. For a page size of 10, the first page would be at offset &#x3D; 0, and the second page would be at offset &#x3D; 10.&#39;  (optional, default to new BigDecimal(&quot;0&quot;))
     * @param sort The field to sort the resulting threads on. Available options DiscussionThreadOrder  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "This API is used to get N number of threads that belongs to projects user can view and references the given entity. ", nickname = "getThreadsForEntity", notes = "This API is used to get N number of threads that belongs to projects user can view and references the given entity.  Target users: anyone who has READ permission to the entity. ", response = PaginatedResultsOfDiscussionThreadBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfDiscussionThreadBundle.class) })
    @GetMapping(
        value = "/entity/{id}/threads",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfDiscussionThreadBundle> getThreadsForEntity(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "The direction of sort: true for ascending, and false for descending") @Valid @RequestParam(value = "ascending", required = false) Boolean ascending,@DecimalMin("10") @DecimalMax("20") @ApiParam(value = "Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 20.' ", defaultValue = "new BigDecimal("10")") @Valid @RequestParam(value = "limit", required = false, defaultValue="new BigDecimal("10")") BigDecimal limit,@DecimalMin("0")@ApiParam(value = "The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.' ", defaultValue = "new BigDecimal("0")") @Valid @RequestParam(value = "offset", required = false, defaultValue="new BigDecimal("0")") BigDecimal offset,@ApiParam(value = "The field to sort the resulting threads on. Available options DiscussionThreadOrder ", allowableValues = "NUMBER_OF_REPLIES, NUMBER_OF_VIEWS, PINNED_AND_LAST_ACTIVITY, THREAD_TITLE") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"activeAuthors\" : [ \"...\", \"...\" ], \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"isPinned\" : true, \"lastActivity\" : \"...\", \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"numberOfReplies\" : 12345, \"numberOfViews\" : 12345, \"projectId\" : \"...\", \"title\" : \"...\" }, { \"activeAuthors\" : [ \"...\", \"...\" ], \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"isPinned\" : true, \"lastActivity\" : \"...\", \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"numberOfReplies\" : 12345, \"numberOfViews\" : 12345, \"projectId\" : \"...\", \"title\" : \"...\" } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/permissions : Get the list of permission that the caller has on a given Entity.
     * Get the list of permission that the caller has on a given Entity.  A User&#39;s permission on an Entity is a calculation based several factors including the permission granted by the Entity&#39;s ACL and the User&#39;s group membership. There might also be extra requirement for an Entity, such as special terms-of-use or special restrictions for sensitive data. This means a client cannot accurately calculate a User&#39;s permission on an Entity simply by inspecting the Entity&#39;&#39;s ACL. Instead, all clients should use this method to get the calculated permission a User has on an Entity. 
     *
     * @param id The ID of an Entity. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the list of permission that the caller has on a given Entity.", nickname = "getUserEntityPermissions", notes = "Get the list of permission that the caller has on a given Entity.  A User's permission on an Entity is a calculation based several factors including the permission granted by the Entity's ACL and the User's group membership. There might also be extra requirement for an Entity, such as special terms-of-use or special restrictions for sensitive data. This means a client cannot accurately calculate a User's permission on an Entity simply by inspecting the Entity''s ACL. Instead, all clients should use this method to get the calculated permission a User has on an Entity. ", response = UserEntityPermissions.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserEntityPermissions.class) })
    @GetMapping(
        value = "/entity/{id}/permissions",
        produces = { "application/json" }
    )
    default ResponseEntity<UserEntityPermissions> getUserEntityPermissions(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"canAddChild\" : true, \"canCertifiedUserAddChild\" : true, \"canCertifiedUserEdit\" : true, \"canChangePermissions\" : true, \"canChangeSettings\" : true, \"canDelete\" : true, \"canDownload\" : true, \"canEdit\" : true, \"canEnableInheritance\" : true, \"canModerate\" : true, \"canPublicRead\" : true, \"canUpload\" : true, \"canView\" : true, \"isCertificationRequired\" : true, \"isCertifiedUser\" : true, \"ownerPrincipalId\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/access : Determine if the caller have a given permission on a given Entity.
     * Determine if the caller have a given permission on a given Entity.  &lt;p&gt;  A User&#39;s permission on an Entity is a calculation based several factors including the permission granted by the Entity&#39;s ACL and the User&#39;s group membership. There might also be extra requirement for an Entity, such as special terms-of-use or special restrictions for sensitive data. This means a client cannot accurately calculate a User&#39;s permission on an Entity simply by inspecting the Entity&#39;s ACL. Instead, all clients should use this method to get the calculated permission a User has on an Entity. &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @param accessType The permission to check. Must be from:  &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE&lt;/a&gt;&#39;  (optional)
     * @param body  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Determine if the caller have a given permission on a given Entity.", nickname = "hasAccess", notes = "Determine if the caller have a given permission on a given Entity.  <p>  A User's permission on an Entity is a calculation based several factors including the permission granted by the Entity's ACL and the User's group membership. There might also be extra requirement for an Entity, such as special terms-of-use or special restrictions for sensitive data. This means a client cannot accurately calculate a User's permission on an Entity simply by inspecting the Entity's ACL. Instead, all clients should use this method to get the calculated permission a User has on an Entity. </p> ", response = BooleanResult.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = BooleanResult.class) })
    @GetMapping(
        value = "/entity/{id}/access",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BooleanResult> hasAccess(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "The permission to check. Must be from:  <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE</a>' ") @Valid @RequestParam(value = "accessType", required = false) String accessType,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/dockerTag : List the tagged commits (tag/digest pairs) for the given Docker repository.
     * List the tagged commits (tag/digest pairs) for the given Docker repository.  Only the most recent digest for each tag is returned since, following Docker&#39;s convention, a tag may be reassigned to a newer commit. The list may be sorted by date or tag.  The default is to sort by date, descending (newest first).&#39; 
     *
     * @param id the ID of the Docker repository entity (required)
     * @param ascending Ascending (optional, default to false)
     * @param limit pagination parameter, optional (default is 20) (optional, default to 20)
     * @param offset pagination parameter, optional (default is 0) (optional, default to 0)
     * @param sort Sort results (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "List the tagged commits (tag/digest pairs) for the given Docker repository.", nickname = "listDockerTags", notes = "List the tagged commits (tag/digest pairs) for the given Docker repository.  Only the most recent digest for each tag is returned since, following Docker's convention, a tag may be reassigned to a newer commit. The list may be sorted by date or tag.  The default is to sort by date, descending (newest first).' ", response = PaginatedResultsOfDockerCommit.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Docker Commit Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfDockerCommit.class) })
    @GetMapping(
        value = "/entity/{id}/dockerTag",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfDockerCommit> listDockerTags(@ApiParam(value = "the ID of the Docker repository entity",required=true) @PathVariable("id") String id,@ApiParam(value = "Ascending", defaultValue = "false") @Valid @RequestParam(value = "ascending", required = false, defaultValue="false") Boolean ascending,@Min(0)@ApiParam(value = "pagination parameter, optional (default is 20)", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@Min(0)@ApiParam(value = "pagination parameter, optional (default is 0)", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "Sort results") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"createdOn\" : \"...\", \"digest\" : \"...\", \"tag\" : \"...\" }, { \"createdOn\" : \"...\", \"digest\" : \"...\", \"tag\" : \"...\" } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/child : Retrieve an entityId for a given parent ID and entity name.
     * Retrieve an entityId for a given parent ID and entity name. This service can also be used to lookup projectId by setting the parentId to NULL in EntityLookupRequest. 
     *
     * @param entityLookupRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve an entityId for a given parent ID and entity name.", nickname = "lookupChild", notes = "Retrieve an entityId for a given parent ID and entity name. This service can also be used to lookup projectId by setting the parentId to NULL in EntityLookupRequest. ", response = EntityId.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityId.class) })
    @PostMapping(
        value = "/entity/child",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EntityId> lookupChild(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EntityLookupRequest entityLookupRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity/{id}/table/query/async/get/{asyncToken} : Asynchronously get the results of a query started with.
     * Asynchronously get the results of a query started with POST /entity/{id}/table/query/async/start  Note: When the result is not ready yet, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object. 
     *
     * @param asyncToken Async Token (required)
     * @param id The ID of the TableEntity. (required)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Asynchronously get the results of a query started with.", nickname = "queryAsyncGet", notes = "Asynchronously get the results of a query started with POST /entity/{id}/table/query/async/start  Note: When the result is not ready yet, this method will return a status code of 202 (ACCEPTED) and the response body will be a AsynchronousJobStatus object. ", response = QueryResultBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = QueryResultBundle.class) })
    @GetMapping(
        value = "/entity/{id}/table/query/async/get/{asyncToken}",
        produces = { "application/json" }
    )
    default ResponseEntity<QueryResultBundle> queryAsyncGet(@ApiParam(value = "Async Token",required=true) @PathVariable("asyncToken") String asyncToken,@ApiParam(value = "The ID of the TableEntity.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"columnModels\" : [ { \"columnType\" : \"DATE_LIST\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"enumeration\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" }, { \"columnType\" : \"DOUBLE\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"range\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 100, \"name\" : \"...\" } ], \"concreteType\" : \"...\", \"facets\" : [ { \"columnName\" : \"...\", \"concreteType\" : \"...\", \"facetType\" : \"enumeration\" }, { \"columnName\" : \"...\", \"concreteType\" : \"...\", \"facetType\" : \"enumeration\" } ], \"lastUpdatedOn\" : \"...\", \"maxRowsPerPage\" : 12345, \"queryCount\" : 12345, \"queryResult\" : { \"concreteType\" : \"...\", \"nextPageToken\" : { \"concreteType\" : \"...\", \"entityId\" : \"...\", \"token\" : \"...\" }, \"queryResults\" : { \"concreteType\" : \"...\", \"etag\" : \"...\", \"headers\" : [ { }, { } ], \"rows\" : [ { }, { } ], \"tableId\" : \"...\" } }, \"selectColumns\" : [ { \"columnType\" : \"USERID_LIST\", \"id\" : \"...\", \"name\" : \"...\" }, { \"columnType\" : \"EVALUATIONID\", \"id\" : \"...\", \"name\" : \"...\" } ], \"sumFileSizes\" : { \"greaterThan\" : true, \"sumFileSizesBytes\" : 12345 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/table/query/async/start : Asynchronously start a query.
     * Asynchronously start a query. Use the returned job id and GET /entity/{id}/table/query/async/get&lt;/a&gt; to get the results of the query  Using a &#39;SQL like&#39; syntax, query the current version of the rows in a single table. The following pseudo-syntax is the basic supported format:   SELECT &lt;br&gt;  [ALL | DISTINCT] select_expr [, select_expr ...] &lt;br&gt;  FROM synapse_table_id &lt;br&gt;  [WHERE where_condition] &lt;br&gt;  [GROUP BY {col_name [, [col_name * ...] } &lt;br&gt;  [ORDER BY {col_name [ [ASC | DESC] [, col_name [ [ASC | DESC]]}&lt;br&gt;  [LIMIT row_count [ OFFSET offset ]]&lt;br&gt;   &lt;p&gt;  Note: Sub-queries and joining tables is not supported.  &lt;/p&gt;  &lt;p&gt;  This services depends on an index that is created/update asynchronously from table creation and update events. This means there could be short window of time when the index is inconsistent with the true state of the table. When the index is out-of-synch, then a status code of 202 (ACCEPTED) will be returned and the response body will be a TableStatus object. The TableStatus will indicates the current status of the index including how much work is remaining until the index is consistent with the truth of the table.  The &#39;partsMask&#39; is an integer \&quot;mask\&quot; that can be combined into to request any desired part. As of this writing, the mask is defined as follows QueryBundleRequest  &lt;ul&gt;  &lt;li&gt;Query Results &lt;i&gt;(queryResults)&lt;/i&gt; &#x3D; 0x1&lt;/li&gt;  &lt;li&gt;Query Count &lt;i&gt;(queryCount)&lt;/i&gt; &#x3D; 0x2&lt;/li&gt;  &lt;li&gt;Select Columns &lt;i&gt;(selectColumns)&lt;/i&gt; &#x3D; 0x4&lt;/li&gt;  &lt;li&gt;Max Rows Per Page &lt;i&gt;(maxRowsPerPage)&lt;/i&gt; &#x3D; 0x8&lt;/li&gt;  &lt;li&gt;The Table Columns &lt;i&gt;(columnModels)&lt;/i&gt; &#x3D; 0x10&lt;/li&gt;  &lt;li&gt;Facet statistics for each faceted column &lt;i&gt;(facetStatistics)&lt;/i&gt; &#x3D; 0x20&lt;/li&gt;  &lt;li&gt;The sum of the file sizes &lt;i&gt;(sumFileSizesBytes)&lt;/i&gt; &#x3D; 0x40&lt;/li&gt;  &lt;/ul&gt;  &lt;/p&gt;  &lt;p&gt;  For example, to request all parts, the request mask value should be: &lt;br&gt; 0x1 OR 0x2 OR 0x4 OR 0x8 OR 0x10 OR 0x20 OR 0x40 &#x3D; 0x7F.  &lt;/p&gt;  &lt;p&gt;  Note: The caller must have the READ permission on the TableEntity to make this call.  &lt;/p&gt; 
     *
     * @param id The ID of a TableEntity. (required)
     * @param queryBundleRequest  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Asynchronously start a query.", nickname = "queryAsyncStart", notes = "Asynchronously start a query. Use the returned job id and GET /entity/{id}/table/query/async/get</a> to get the results of the query  Using a 'SQL like' syntax, query the current version of the rows in a single table. The following pseudo-syntax is the basic supported format:   SELECT <br>  [ALL | DISTINCT] select_expr [, select_expr ...] <br>  FROM synapse_table_id <br>  [WHERE where_condition] <br>  [GROUP BY {col_name [, [col_name * ...] } <br>  [ORDER BY {col_name [ [ASC | DESC] [, col_name [ [ASC | DESC]]}<br>  [LIMIT row_count [ OFFSET offset ]]<br>   <p>  Note: Sub-queries and joining tables is not supported.  </p>  <p>  This services depends on an index that is created/update asynchronously from table creation and update events. This means there could be short window of time when the index is inconsistent with the true state of the table. When the index is out-of-synch, then a status code of 202 (ACCEPTED) will be returned and the response body will be a TableStatus object. The TableStatus will indicates the current status of the index including how much work is remaining until the index is consistent with the truth of the table.  The 'partsMask' is an integer \"mask\" that can be combined into to request any desired part. As of this writing, the mask is defined as follows QueryBundleRequest  <ul>  <li>Query Results <i>(queryResults)</i> = 0x1</li>  <li>Query Count <i>(queryCount)</i> = 0x2</li>  <li>Select Columns <i>(selectColumns)</i> = 0x4</li>  <li>Max Rows Per Page <i>(maxRowsPerPage)</i> = 0x8</li>  <li>The Table Columns <i>(columnModels)</i> = 0x10</li>  <li>Facet statistics for each faceted column <i>(facetStatistics)</i> = 0x20</li>  <li>The sum of the file sizes <i>(sumFileSizesBytes)</i> = 0x40</li>  </ul>  </p>  <p>  For example, to request all parts, the request mask value should be: <br> 0x1 OR 0x2 OR 0x4 OR 0x8 OR 0x10 OR 0x20 OR 0x40 = 0x7F.  </p>  <p>  Note: The caller must have the READ permission on the TableEntity to make this call.  </p> ", response = AsyncJobId.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AsyncJobId.class) })
    @PostMapping(
        value = "/entity/{id}/table/query/async/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AsyncJobId> queryAsyncStart(@ApiParam(value = "The ID of a TableEntity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) QueryBundleRequest queryBundleRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/message : Adds the owner of the given entity as an additional recipient of the message.
     * Adds the owner of the given entity as an additional recipient of the message. 
     *
     * @param id The ID of an Entity. (required)
     * @param messageToUser  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Adds the owner of the given entity as an additional recipient of the message.", nickname = "sendMessageToEntityOwner", notes = "Adds the owner of the given entity as an additional recipient of the message. ", response = MessageToUser.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Message Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = MessageToUser.class) })
    @PostMapping(
        value = "/entity/{id}/message",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<MessageToUser> sendMessageToEntityOwner(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) MessageToUser messageToUser) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bcc\" : \"...\", \"cc\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"fileHandleId\" : \"...\", \"id\" : \"...\", \"inReplyTo\" : \"...\", \"inReplyToRoot\" : \"...\", \"isNotificationMessage\" : true, \"notificationUnsubscribeEndpoint\" : \"...\", \"recipients\" : [ \"...\", \"...\" ], \"subject\" : \"...\", \"to\" : \"...\", \"userProfileSettingEndpoint\" : \"...\", \"withProfileSettingLink\" : true, \"withUnsubscribeLink\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity/{id}/table/transaction/async/start : Start a table update job that will attempt to make all of the requested changes in a single transaction. 
     * Start a table update job that will attempt to make all of the requested changes in a single transaction. All updates will either succeed or fail as a unit.  All update requests must be for the same table.  &lt;p&gt;  Note: The caller must have the UPDATE permission on the TableEntity to make this call.  &lt;/p&gt;  &lt;p&gt;  &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum size of a PartialRow change &lt;/td&gt;  &lt;td&gt;2 MB&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum size of a CSV that can be appended to a table&lt;/td&gt;  &lt;td&gt;1 GB&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/p&gt; 
     *
     * @param id The ID of a Table Entity. (required)
     * @param tableUpdateTransactionRequest  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Start a table update job that will attempt to make all of the requested changes in a single transaction. ", nickname = "startTableTransactionJob", notes = "Start a table update job that will attempt to make all of the requested changes in a single transaction. All updates will either succeed or fail as a unit.  All update requests must be for the same table.  <p>  Note: The caller must have the UPDATE permission on the TableEntity to make this call.  </p>  <p>  <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum size of a PartialRow change </td>  <td>2 MB</td>  </tr>  <tr>  <td>The maximum size of a CSV that can be appended to a table</td>  <td>1 GB</td>  </tr>  </table>  </p> ", response = AsyncJobId.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Table Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AsyncJobId.class) })
    @PostMapping(
        value = "/entity/{id}/table/transaction/async/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AsyncJobId> startTableTransactionJob(@ApiParam(value = "The ID of a Table Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) TableUpdateTransactionRequest tableUpdateTransactionRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity/{id}/generatedBy : Sets the generatedBy relationship for the current version of an Entity.
     * Sets the generatedBy relationship for the current version of an Entity.
     *
     * @param id The ID of an Entity. (required)
     * @param generatedBy The id of the activity to connect to the entity. You must be the creator of the Activity used here.&#39;  (required)
     * @param body Sets the generatedBy relationship for the current version of an Entity. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Sets the generatedBy relationship for the current version of an Entity.", nickname = "updateActivityForEntity", notes = "Sets the generatedBy relationship for the current version of an Entity.", response = Activity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Activity.class) })
    @PutMapping(
        value = "/entity/{id}/generatedBy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Activity> updateActivityForEntity(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@NotNull @ApiParam(value = "The id of the activity to connect to the entity. You must be the creator of the Activity used here.' ", required = true) @Valid @RequestParam(value = "generatedBy", required = true) String generatedBy,@ApiParam(value = "Sets the generatedBy relationship for the current version of an Entity."  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"used\" : [ { \"concreteType\" : \"...\", \"wasExecuted\" : true }, { \"concreteType\" : \"...\", \"wasExecuted\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity/{id} : Update an entity.
     * Update an entity.  &lt;p&gt;  If the Entity is a FileEntity and the dataFileHandleId fields is set to a new value, then a new version will automatically be created for this update if the MD5 of the new file handle does not match the MD5 of the existing file handle or if the file handles do not have an MD5 set. You can also force the creation of a new version using the newVersion parameter  (see below).  &lt;/p&gt;  &lt;p&gt;  Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Each time an Entity is updated a new etag will be issued to the Entity. When an update is request, Synapse will compare the etag of the passed Entity with the current etag of the Entity. If the etags do not match, then the update will be rejected with a PRECONDITION_FAILED (412) response. When this occurs the caller should get the latest copy of the Entity (see: &lt;a href&#x3D;\&quot;${GET.entity.id}\&quot;&gt;GET /entity/{id}&lt;/a&gt;) and re-apply any changes to the object, then re-attempt the Entity update. This ensure the caller has any changes applied by other users before applying their own changes.  &lt;/p&gt;  &lt;p&gt;  Note: To update an Entity the caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.UPDATE&lt;/a&gt; on the Entity.  &lt;/p&gt;  &lt;p&gt;  &lt;b&gt;Service Limits&lt;/b&gt;  &lt;table border&#x3D;\&quot;1\&quot;&gt;  &lt;tr&gt;  &lt;th&gt;resource&lt;/th&gt;  &lt;th&gt;limit&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;The maximum number of children for a single parent entity&lt;/td&gt;  &lt;td&gt;10 K&lt;/td&gt;  &lt;/tr&gt;  &lt;/table&gt;  &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @param generatedBy To track the Provenance of an Entity update, include the ID of the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.provenance.Activity}\&quot;&gt;Activity&lt;/a&gt; that was created to track the change. For more information see: &lt;a href&#x3D;\&quot;${POST.activity}\&quot;&gt;POST /activity&lt;/a&gt;. You must be the creator of the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.provenance.Activity}\&quot;&gt;Activity&lt;/a&gt; used here.&#39;  (optional)
     * @param newVersion To force the creation of a new version for a &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.VersionableEntity}\&quot;&gt;versionable&lt;/a&gt; entity such as a &lt;a href&#x3D; \&quot;${org.sagebionetworks.repo.model.FileEntity}\&quot;&gt;FileEntity&lt;/a&gt;, include this optional parameter with a value set to true (i.e. newVersion&#x3D;true). This parameter is ignored for entities of type  &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.table.Table}\&quot;&gt;Table&lt;/a&gt; (See &lt;a href&#x3D;\&quot;${POST.entity.id.table.snapshot}\&quot;&gt;POST /entity/{id}/table/snapshot&lt;/a&gt; instead)  (optional)
     * @param entity  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update an entity.", nickname = "updateEntity", notes = "Update an entity.  <p>  If the Entity is a FileEntity and the dataFileHandleId fields is set to a new value, then a new version will automatically be created for this update if the MD5 of the new file handle does not match the MD5 of the existing file handle or if the file handles do not have an MD5 set. You can also force the creation of a new version using the newVersion parameter  (see below).  </p>  <p>  Synapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Each time an Entity is updated a new etag will be issued to the Entity. When an update is request, Synapse will compare the etag of the passed Entity with the current etag of the Entity. If the etags do not match, then the update will be rejected with a PRECONDITION_FAILED (412) response. When this occurs the caller should get the latest copy of the Entity (see: <a href=\"${GET.entity.id}\">GET /entity/{id}</a>) and re-apply any changes to the object, then re-attempt the Entity update. This ensure the caller has any changes applied by other users before applying their own changes.  </p>  <p>  Note: To update an Entity the caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE</a> on the Entity.  </p>  <p>  <b>Service Limits</b>  <table border=\"1\">  <tr>  <th>resource</th>  <th>limit</th>  </tr>  <tr>  <td>The maximum number of children for a single parent entity</td>  <td>10 K</td>  </tr>  </table>  </p> ", response = Entity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Entity.class) })
    @PutMapping(
        value = "/entity/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Entity> updateEntity(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "To track the Provenance of an Entity update, include the ID of the <a href=\"${org.sagebionetworks.repo.model.provenance.Activity}\">Activity</a> that was created to track the change. For more information see: <a href=\"${POST.activity}\">POST /activity</a>. You must be the creator of the <a href=\"${org.sagebionetworks.repo.model.provenance.Activity}\">Activity</a> used here.' ") @Valid @RequestParam(value = "generatedBy", required = false) String generatedBy,@ApiParam(value = "To force the creation of a new version for a <a href=\"${org.sagebionetworks.repo.model.VersionableEntity}\">versionable</a> entity such as a <a href= \"${org.sagebionetworks.repo.model.FileEntity}\">FileEntity</a>, include this optional parameter with a value set to true (i.e. newVersion=true). This parameter is ignored for entities of type  <a href=\"${org.sagebionetworks.repo.model.table.Table}\">Table</a> (See <a href=\"${POST.entity.id.table.snapshot}\">POST /entity/{id}/table/snapshot</a> instead) ") @Valid @RequestParam(value = "newVersion", required = false) String newVersion,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Entity entity) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"Trial ' + (_) . 09\", \"parentId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity/{id}/acl : Update an Entity&#39;s ACL.
     * Update an Entity&#39;s ACL.  &lt;p&gt;  Note: The caller must be granted  &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.CHANGE_PERMISSIONS&lt;/a&gt; on the Entity to call this method.  &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @param accessControlList  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update an Entity's ACL.", nickname = "updateEntityAcl", notes = "Update an Entity's ACL.  <p>  Note: The caller must be granted  <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.CHANGE_PERMISSIONS</a> on the Entity to call this method.  </p> ", response = AccessControlList.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessControlList.class) })
    @PutMapping(
        value = "/entity/{id}/acl",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessControlList> updateEntityAcl(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AccessControlList accessControlList) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"creationDate\" : \"12345\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"12345\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPDATE_SUBMISSION\", \"CHANGE_PERMISSIONS\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"UPDATE\", \"SEND_MESSAGE\" ], \"principalId\" : 12345 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity/{id}/annotations2 : Update an Entity&#39;s annotations.
     * Update an Entity&#39;s annotations.  &lt;p&gt;  Note: The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot;&gt;ACCESS_TYPE.UPDATE&lt;/a&gt; on the Entity, to update its annotations. &lt;/p&gt; 
     *
     * @param id The ID of an Entity. (required)
     * @param annotationsV2  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update an Entity's annotations.", nickname = "updateEntityAnnotations", notes = "Update an Entity's annotations.  <p>  Note: The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\">ACCESS_TYPE.UPDATE</a> on the Entity, to update its annotations. </p> ", response = AnnotationsV2.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AnnotationsV2.class) })
    @PutMapping(
        value = "/entity/{id}/annotations2",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AnnotationsV2> updateEntityAnnotations(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AnnotationsV2 annotationsV2) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"annotations\" : { \"property1\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] }, \"property2\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] } }, \"etag\" : \"...\", \"id\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity/{id}/bundle2 : Update an entity and associated components with a single PUT.
     * Update an entity and associated components with a single PUT. Specifically, this operation supports update of an Entity, its Annotations, and its ACL. Upon successful creation, an EntityBundle is returned containing the requested components, as defined by the partsMask in the request object. 
     *
     * @param id The ID of an Entity. (required)
     * @param generatedBy Generated by (optional)
     * @param entityBundleCreateV2 The EntityBundleCreate object containing the Entity and Annotations to update.  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update an entity and associated components with a single PUT.", nickname = "updateEntityBundle", notes = "Update an entity and associated components with a single PUT. Specifically, this operation supports update of an Entity, its Annotations, and its ACL. Upon successful creation, an EntityBundle is returned containing the requested components, as defined by the partsMask in the request object. ", response = EntityBundleV2.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Bundle V2 Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EntityBundleV2.class) })
    @PutMapping(
        value = "/entity/{id}/bundle2",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EntityBundleV2> updateEntityBundle(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "Generated by") @Valid @RequestParam(value = "generatedBy", required = false) String generatedBy,@ApiParam(value = "The EntityBundleCreate object containing the Entity and Annotations to update. "  )  @Valid @RequestBody(required = false) EntityBundleCreateV2 entityBundleCreateV2) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessControlList\" : { \"createdBy\" : \"...\", \"creationDate\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"resourceAccess\" : [ { \"accessType\" : [ \"CHANGE_PERMISSIONS\", \"UPDATE_SUBMISSION\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"DOWNLOAD\", \"MODERATE\" ], \"principalId\" : 12345 } ] }, \"annotations\" : { \"annotations\" : { \"property1\" : { \"type\" : \"STRING\", \"value\" : [ \"...\", \"...\" ] }, \"property2\" : { \"type\" : \"TIMESTAMP_MS\", \"value\" : [ \"...\", \"...\" ] } }, \"etag\" : \"...\", \"id\" : \"...\" }, \"benefactorAcl\" : { \"createdBy\" : \"...\", \"creationDate\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"resourceAccess\" : [ { \"accessType\" : [ \"UPLOAD\", \"DELETE\" ], \"principalId\" : 12345 }, { \"accessType\" : [ \"CHANGE_SETTINGS\", \"CREATE\" ], \"principalId\" : 12345 } ] }, \"doiAssociation\" : { \"associatedBy\" : \"...\", \"associatedOn\" : \"...\", \"associationId\" : \"...\", \"doiUri\" : \"...\", \"doiUrl\" : \"...\", \"etag\" : \"...\", \"objectId\" : \"...\", \"objectType\" : \"VERIFICATION_SUBMISSION\", \"objectVersion\" : 12345, \"updatedBy\" : \"...\", \"updatedOn\" : \"...\" }, \"entity\" : { \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"parentId\" : \"...\" }, \"entityType\" : \"entityview\", \"fileHandles\" : [ { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 }, { \"concreteType\" : \"...\", \"contentMd5\" : \"...\", \"contentSize\" : 12345, \"contentType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"fileName\" : \"...\", \"id\" : \"...\", \"storageLocationId\" : 12345 } ], \"fileName\" : \"...\", \"hasChildren\" : true, \"path\" : { \"path\" : [ { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 }, { \"benefactorId\" : 12345, \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"type\" : \"...\", \"versionLabel\" : \"...\", \"versionNumber\" : 12345 } ] }, \"permissions\" : { \"canAddChild\" : true, \"canCertifiedUserAddChild\" : true, \"canCertifiedUserEdit\" : true, \"canChangePermissions\" : true, \"canChangeSettings\" : true, \"canDelete\" : true, \"canDownload\" : true, \"canEdit\" : true, \"canEnableInheritance\" : true, \"canModerate\" : true, \"canPublicRead\" : true, \"canUpload\" : true, \"canView\" : true, \"isCertificationRequired\" : true, \"isCertifiedUser\" : true, \"ownerPrincipalId\" : 12345 }, \"restrictionInformation\" : { \"hasUnmetAccessRequirement\" : true, \"restrictionLevel\" : \"RESTRICTED_BY_TERMS_OF_USE\" }, \"rootWikiId\" : \"...\", \"tableBundle\" : { \"columnModels\" : [ { \"columnType\" : \"STRING\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"enumeration\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" }, { \"columnType\" : \"USERID_LIST\", \"defaultValue\" : \"...\", \"enumValues\" : [ \"...\", \"...\" ], \"facetType\" : \"range\", \"id\" : \"...\", \"maximumListLength\" : 100, \"maximumSize\" : 12345, \"name\" : \"...\" } ], \"maxRowsPerPage\" : 12345 }, \"threadCount\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity/{id}/version/{versionNumber}/filehandle : Updates the filehandle.
     * Updates the FileHandle associated with the FileEntity with the provided entity id and version. 
     *
     * @param id The ID of the Entity. (required)
     * @param versionNumber The version number of the Entity. (required)
     * @param fileHandleUpdateRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Updates the filehandle.", nickname = "updateEntityFileHandle", notes = "Updates the FileHandle associated with the FileEntity with the provided entity id and version. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @PutMapping(
        value = "/entity/{id}/version/{versionNumber}/filehandle",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> updateEntityFileHandle(@ApiParam(value = "The ID of the Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = "The version number of the Entity.",required=true) @PathVariable("versionNumber") Integer versionNumber,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) FileHandleUpdateRequest fileHandleUpdateRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity/{id}/json : Update the annotations of an entity using the raw JSON of the entity.
     * Update the annotations of an entity using the raw JSON of the entity.  &lt;p&gt;  See: &lt;a href&#x3D;\&quot;${GET.entity.id.json}\&quot;&gt;GET entity/{id}/json&lt;/a&gt; to get the JSON of an entity.  &lt;/p&gt;  &lt;p&gt; Note: The caller must be granted the &lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.ACCESS_TYPE}\&quot; &gt;ACCESS_TYPE.UPDATE and ACCESS_TYPE.READ&lt;/a&gt; permission on the Entity. &lt;/p&gt;&#39; 
     *
     * @param id The ID of an Entity. (required)
     * @param body  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update the annotations of an entity using the raw JSON of the entity.", nickname = "updateEntityWithJson", notes = "Update the annotations of an entity using the raw JSON of the entity.  <p>  See: <a href=\"${GET.entity.id.json}\">GET entity/{id}/json</a> to get the JSON of an entity.  </p>  <p> Note: The caller must be granted the <a href=\"${org.sagebionetworks.repo.model.ACCESS_TYPE}\" >ACCESS_TYPE.UPDATE and ACCESS_TYPE.READ</a> permission on the Entity. </p>' ", response = Object.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Entity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Object.class) })
    @PutMapping(
        value = "/entity/{id}/json",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> updateEntityWithJson(@ApiParam(value = "The ID of an Entity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
