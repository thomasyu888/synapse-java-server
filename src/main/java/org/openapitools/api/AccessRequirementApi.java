/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccessRequirement;
import org.openapitools.model.AccessRequirementConversionRequest;
import org.openapitools.model.AccessRequirementStatus;
import org.openapitools.model.RequestInterface;
import org.openapitools.model.ResearchProject;
import org.openapitools.model.RestrictableObjectDescriptorResponse;
import org.openapitools.model.SubmissionInfoPage;
import org.openapitools.model.SubmissionInfoPageRequest;
import org.openapitools.model.SubmissionPage;
import org.openapitools.model.SubmissionPageRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "accessRequirement", description = "the accessRequirement API")
public interface AccessRequirementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /accessRequirement/conversion : Convert an ACTAccessRequirement to a ManagedACTAccessRequirement.
     * Convert an ACTAccessRequirement to a ManagedACTAccessRequirement.  Only ACT member can perform this action. 
     *
     * @param accessRequirementConversionRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Convert an ACTAccessRequirement to a ManagedACTAccessRequirement.", nickname = "convertAccessRequirement", notes = "Convert an ACTAccessRequirement to a ManagedACTAccessRequirement.  Only ACT member can perform this action. ", response = AccessRequirement.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Requirement Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessRequirement.class) })
    @PutMapping(
        value = "/accessRequirement/conversion",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessRequirement> convertAccessRequirement(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AccessRequirementConversionRequest accessRequirementConversionRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessType\" : \"SUBMIT\", \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"subjectIds\" : [ { \"id\" : \"...\", \"type\" : \"EVALUATION\" }, { \"id\" : \"...\", \"type\" : \"TEAM\" } ], \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accessRequirement : Add an Access Requirement to an Entity, or Team.
     * Add an Access Requirement to an Entity, or Team. This service may only be used by the Synapse Access and Compliance Team. 
     *
     * @param accessRequirement the Access Requirement to create (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Add an Access Requirement to an Entity, or Team.", nickname = "createAccessRequirement", notes = "Add an Access Requirement to an Entity, or Team. This service may only be used by the Synapse Access and Compliance Team. ", response = AccessRequirement.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Requirement Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AccessRequirement.class) })
    @PostMapping(
        value = "/accessRequirement",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessRequirement> createAccessRequirement(@ApiParam(value = "the Access Requirement to create"  )  @Valid @RequestBody(required = false) AccessRequirement accessRequirement) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessType\" : \"SUBMIT\", \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"subjectIds\" : [ { \"id\" : \"...\", \"type\" : \"EVALUATION\" }, { \"id\" : \"...\", \"type\" : \"TEAM\" } ], \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /accessRequirement/{requirementId} : Delete an Access Requirement.
     * Delete an Access Requirement. This service may only be used by the Synapse Access and Compliance Team. 
     *
     * @param requirementId the ID of the requirement. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Delete an Access Requirement.", nickname = "deleteAccessRequirements", notes = "Delete an Access Requirement. This service may only be used by the Synapse Access and Compliance Team. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Requirement Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @DeleteMapping(
        value = "/accessRequirement/{requirementId}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> deleteAccessRequirements(@ApiParam(value = "the ID of the requirement.",required=true) @PathVariable("requirementId") String requirementId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accessRequirement/{requirementId} : Get an Access Requirement.
     * Get an Access Requirement to an Entity, or Team based on its ID.
     *
     * @param requirementId the ID of the requirement. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get an Access Requirement.", nickname = "getAccessRequirement", notes = "Get an Access Requirement to an Entity, or Team based on its ID.", response = AccessRequirement.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Requirement Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessRequirement.class) })
    @GetMapping(
        value = "/accessRequirement/{requirementId}",
        produces = { "application/json" }
    )
    default ResponseEntity<AccessRequirement> getAccessRequirement(@ApiParam(value = "the ID of the requirement.",required=true) @PathVariable("requirementId") String requirementId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessType\" : \"SUBMIT\", \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"subjectIds\" : [ { \"id\" : \"...\", \"type\" : \"EVALUATION\" }, { \"id\" : \"...\", \"type\" : \"TEAM\" } ], \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accessRequirement/{requirementId}/status : Retrieve an access requirement status for a given access requirement ID.
     * Retrieve an access requirement status for a given access requirement ID.
     *
     * @param requirementId the ID of the requirement. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve an access requirement status for a given access requirement ID.", nickname = "getAccessRequirementStatus", notes = "Retrieve an access requirement status for a given access requirement ID.", response = AccessRequirementStatus.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Data Access Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessRequirementStatus.class) })
    @GetMapping(
        value = "/accessRequirement/{requirementId}/status",
        produces = { "application/json" }
    )
    default ResponseEntity<AccessRequirementStatus> getAccessRequirementStatus(@ApiParam(value = "the ID of the requirement.",required=true) @PathVariable("requirementId") String requirementId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessRequirementId\" : \"...\", \"concreteType\" : \"...\", \"expiredOn\" : \"...\", \"isApproved\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accessRequirement/{requirementId}/dataAccessRequestForUpdate : Retrieve the Request for update.
     * Retrieve the Request for update.  If one does not exist, an Request with some re-filled information is returned. If a submission associated with the request is approved, and the requirement requires renewal, a refilled Renewal is returned. Only the owner of the request can perform this action. 
     *
     * @param requirementId the ID of the requirement. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve the Request for update.", nickname = "getRequestForUpdate", notes = "Retrieve the Request for update.  If one does not exist, an Request with some re-filled information is returned. If a submission associated with the request is approved, and the requirement requires renewal, a refilled Renewal is returned. Only the owner of the request can perform this action. ", response = RequestInterface.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Data Access Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = RequestInterface.class) })
    @GetMapping(
        value = "/accessRequirement/{requirementId}/dataAccessRequestForUpdate",
        produces = { "application/json" }
    )
    default ResponseEntity<RequestInterface> getRequestForUpdate(@ApiParam(value = "the ID of the requirement.",required=true) @PathVariable("requirementId") String requirementId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessRequirementId\" : \"...\", \"accessorChanges\" : [ { \"type\" : \"RENEW_ACCESS\", \"userId\" : \"...\" }, { \"type\" : \"RENEW_ACCESS\", \"userId\" : \"...\" } ], \"attachments\" : [ \"...\", \"...\" ], \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : 12345, \"ducFileHandleId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"irbFileHandleId\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : 12345, \"researchProjectId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accessRequirement/{requirementId}/subjects : Retrieve a page of subjects for a given Access Requirement ID.
     * Retrieve a page of subjects for a given Access Requirement ID.
     *
     * @param requirementId the ID of the requirement. (required)
     * @param nextPageToken Next page (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve a page of subjects for a given Access Requirement ID.", nickname = "getSubjects", notes = "Retrieve a page of subjects for a given Access Requirement ID.", response = RestrictableObjectDescriptorResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Requirement Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = RestrictableObjectDescriptorResponse.class) })
    @GetMapping(
        value = "/accessRequirement/{requirementId}/subjects",
        produces = { "application/json" }
    )
    default ResponseEntity<RestrictableObjectDescriptorResponse> getSubjects(@ApiParam(value = "the ID of the requirement.",required=true) @PathVariable("requirementId") String requirementId,@ApiParam(value = "Next page") @Valid @RequestParam(value = "nextPageToken", required = false) String nextPageToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"subjects\" : [ { \"id\" : \"...\", \"type\" : \"TEAM\" }, { \"id\" : \"...\", \"type\" : \"EVALUATION\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accessRequirement/{requirementId}/researchProjectForUpdate : Retrieve an existing ResearchProject that the user owns.
     * Retrieve an existing ResearchProject that the user owns.  If none exists, a ResearchProject with some re-filled information is returned to the user. Only the owner of the researchProject can perform this action. 
     *
     * @param requirementId the ID of the requirement. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve an existing ResearchProject that the user owns.", nickname = "getUserOwnResearchProjectForUpdate", notes = "Retrieve an existing ResearchProject that the user owns.  If none exists, a ResearchProject with some re-filled information is returned to the user. Only the owner of the researchProject can perform this action. ", response = ResearchProject.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Data Access Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResearchProject.class) })
    @GetMapping(
        value = "/accessRequirement/{requirementId}/researchProjectForUpdate",
        produces = { "application/json" }
    )
    default ResponseEntity<ResearchProject> getUserOwnResearchProjectForUpdate(@ApiParam(value = "the ID of the requirement.",required=true) @PathVariable("requirementId") String requirementId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessRequirementId\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"institution\" : \"...\", \"intendedDataUseStatement\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"projectLead\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accessRequirement/{requirementId}/submissions : Retrieve a list of submissions for a given access requirement ID.
     * Retrieve a list of submissions for a given access requirement ID.  Only ACT member can perform this action. 
     *
     * @param requirementId the ID of the requirement. (required)
     * @param submissionPageRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieve a list of submissions for a given access requirement ID.", nickname = "listArSubmissions", notes = "Retrieve a list of submissions for a given access requirement ID.  Only ACT member can perform this action. ", response = SubmissionPage.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Data Access Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SubmissionPage.class) })
    @PostMapping(
        value = "/accessRequirement/{requirementId}/submissions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SubmissionPage> listArSubmissions(@ApiParam(value = "the ID of the requirement.",required=true) @PathVariable("requirementId") String requirementId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) SubmissionPageRequest submissionPageRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"results\" : [ { \"accessRequirementId\" : \"...\", \"accessRequirementVersion\" : 12345, \"accessorChanges\" : [ { \"type\" : \"GAIN_ACCESS\", \"userId\" : \"...\" }, { \"type\" : \"REVOKE_ACCESS\", \"userId\" : \"...\" } ], \"attachments\" : [ \"...\", \"...\" ], \"ducFileHandleId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"irbFileHandleId\" : \"...\", \"isRenewalSubmission\" : true, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"publication\" : \"...\", \"rejectedReason\" : \"...\", \"requestId\" : \"...\", \"researchProjectSnapshot\" : { \"accessRequirementId\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"institution\" : \"...\", \"intendedDataUseStatement\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"projectLead\" : \"...\" }, \"state\" : \"REJECTED\", \"subjectId\" : \"...\", \"subjectType\" : \"EVALUATION\", \"submittedBy\" : \"...\", \"submittedOn\" : \"...\", \"summaryOfUse\" : \"...\" }, { \"accessRequirementId\" : \"...\", \"accessRequirementVersion\" : 12345, \"accessorChanges\" : [ { \"type\" : \"GAIN_ACCESS\", \"userId\" : \"...\" }, { \"type\" : \"RENEW_ACCESS\", \"userId\" : \"...\" } ], \"attachments\" : [ \"...\", \"...\" ], \"ducFileHandleId\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"irbFileHandleId\" : \"...\", \"isRenewalSubmission\" : true, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"publication\" : \"...\", \"rejectedReason\" : \"...\", \"requestId\" : \"...\", \"researchProjectSnapshot\" : { \"accessRequirementId\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"institution\" : \"...\", \"intendedDataUseStatement\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"projectLead\" : \"...\" }, \"state\" : \"APPROVED\", \"subjectId\" : \"...\", \"subjectType\" : \"ENTITY\", \"submittedBy\" : \"...\", \"submittedOn\" : \"...\", \"summaryOfUse\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accessRequirement/{requirementId}/approvedSubmissionInfo : Return approved data access submissions
     * Return the research project info for approved data access submissions, ordered by submission modified-on date, ascending 
     *
     * @param requirementId the ID of the requirement. (required)
     * @param submissionInfoPageRequest  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Return approved data access submissions", nickname = "listInfoForApprovedSubmissions", notes = "Return the research project info for approved data access submissions, ordered by submission modified-on date, ascending ", response = SubmissionInfoPage.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Data Access Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SubmissionInfoPage.class) })
    @PostMapping(
        value = "/accessRequirement/{requirementId}/approvedSubmissionInfo",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SubmissionInfoPage> listInfoForApprovedSubmissions(@ApiParam(value = "the ID of the requirement.",required=true) @PathVariable("requirementId") String requirementId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) SubmissionInfoPageRequest submissionInfoPageRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nextPageToken\" : \"...\", \"results\" : [ { \"institution\" : \"...\", \"intendedDataUseStatement\" : \"...\", \"modifiedOn\" : \"...\", \"projectLead\" : \"...\" }, { \"institution\" : \"...\", \"intendedDataUseStatement\" : \"...\", \"modifiedOn\" : \"...\", \"projectLead\" : \"...\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /accessRequirement/{requirementId} : Modify an existing Access Requirement.
     * Modify an existing Access Requirement.  This service may only be used by the Synapse Access and Compliance Team. 
     *
     * @param requirementId the ID of the requirement. (required)
     * @param accessRequirement The modified Access Requirement. (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Modify an existing Access Requirement.", nickname = "updateAccessRequirement", notes = "Modify an existing Access Requirement.  This service may only be used by the Synapse Access and Compliance Team. ", response = AccessRequirement.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Access Requirement Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccessRequirement.class) })
    @PutMapping(
        value = "/accessRequirement/{requirementId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccessRequirement> updateAccessRequirement(@ApiParam(value = "the ID of the requirement.",required=true) @PathVariable("requirementId") String requirementId,@ApiParam(value = "The modified Access Requirement."  )  @Valid @RequestBody(required = false) AccessRequirement accessRequirement) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accessType\" : \"SUBMIT\", \"concreteType\" : \"...\", \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : 12345, \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"subjectIds\" : [ { \"id\" : \"...\", \"type\" : \"EVALUATION\" }, { \"id\" : \"...\", \"type\" : \"TEAM\" } ], \"versionNumber\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
