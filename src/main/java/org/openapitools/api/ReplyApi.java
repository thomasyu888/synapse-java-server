/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateDiscussionReply;
import org.openapitools.model.DiscussionReplyBundle;
import org.openapitools.model.MessageURL;
import org.openapitools.model.UpdateReplyMessage;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "reply", description = "the reply API")
public interface ReplyApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /reply : Create a new reply to a thread.
     * This API is used to create a new reply to a thread.  Target users: anyone who has READ permission to the project. 
     *
     * @param createDiscussionReply - This object contains information needed to create a reply. (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a new reply to a thread.", nickname = "createReply", notes = "This API is used to create a new reply to a thread.  Target users: anyone who has READ permission to the project. ", response = DiscussionReplyBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = DiscussionReplyBundle.class) })
    @PostMapping(
        value = "/reply",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DiscussionReplyBundle> createReply(@ApiParam(value = "- This object contains information needed to create a reply."  )  @Valid @RequestBody(required = false) CreateDiscussionReply createDiscussionReply) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"projectId\" : \"...\", \"threadId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /reply/{replyId} : Delete Reply
     * This API is used to mark a reply as deleted.  Target users: only forum&#39;s moderator can mark a reply as deleted. 
     *
     * @param replyId The ID of the Reply. (required)
     * @return This resource was deleted. (status code 204)
     */
    @ApiOperation(value = "Delete Reply", nickname = "deleteReply", notes = "This API is used to mark a reply as deleted.  Target users: only forum's moderator can mark a reply as deleted. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "This resource was deleted.") })
    @DeleteMapping(
        value = "/reply/{replyId}"
    )
    default ResponseEntity<Void> deleteReply(@ApiParam(value = "The ID of the Reply.",required=true) @PathVariable("replyId") String replyId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reply/{replyId} : Get a Reply.
     * This API is used to get a reply and its statistic given its ID.  Target users: anyone who has READ permission to the project. 
     *
     * @param replyId The ID of the Reply. (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get a Reply.", nickname = "getReply", notes = "This API is used to get a reply and its statistic given its ID.  Target users: anyone who has READ permission to the project. ", response = DiscussionReplyBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DiscussionReplyBundle.class) })
    @GetMapping(
        value = "/reply/{replyId}",
        produces = { "application/json" }
    )
    default ResponseEntity<DiscussionReplyBundle> getReply(@ApiParam(value = "The ID of the Reply.",required=true) @PathVariable("replyId") String replyId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"projectId\" : \"...\", \"threadId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reply/messageUrl : Get the message URL of a reply.
     * This API is used to get the message URL of a reply. The message URL is the URL to download the file which contains the reply message.  Target users: anyone who has READ permission to the project. The resulting URL will be signed with Content-Type &#x3D;\&quot;text/plain; charset&#x3D;utf-8\&quot;; therefore, this header must be included with the GET on the URL. 
     *
     * @param messageKey DiscussionReplyBundle.messageKey (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the message URL of a reply.", nickname = "getReplyUrl", notes = "This API is used to get the message URL of a reply. The message URL is the URL to download the file which contains the reply message.  Target users: anyone who has READ permission to the project. The resulting URL will be signed with Content-Type =\"text/plain; charset=utf-8\"; therefore, this header must be included with the GET on the URL. ", response = MessageURL.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MessageURL.class) })
    @GetMapping(
        value = "/reply/messageUrl",
        produces = { "application/json" }
    )
    default ResponseEntity<MessageURL> getReplyUrl(@NotNull @ApiParam(value = "DiscussionReplyBundle.messageKey", required = true) @Valid @RequestParam(value = "messageKey", required = true) String messageKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"messageUrl\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /reply/{replyId}/message : Update the message of a reply.
     * This API is used to update the message of a reply.  Target users: only the author of the reply can update its message.&#39; 
     *
     * @param replyId The ID of the Reply. (required)
     * @param updateReplyMessage  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Update the message of a reply.", nickname = "updateReplyMessage", notes = "This API is used to update the message of a reply.  Target users: only the author of the reply can update its message.' ", response = DiscussionReplyBundle.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Discussion Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = DiscussionReplyBundle.class) })
    @PutMapping(
        value = "/reply/{replyId}/message",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DiscussionReplyBundle> updateReplyMessage(@ApiParam(value = "The ID of the Reply.",required=true) @PathVariable("replyId") String replyId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UpdateReplyMessage updateReplyMessage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"etag\" : \"...\", \"forumId\" : \"...\", \"id\" : \"...\", \"isDeleted\" : true, \"isEdited\" : true, \"messageKey\" : \"...\", \"modifiedOn\" : \"...\", \"projectId\" : \"...\", \"threadId\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
