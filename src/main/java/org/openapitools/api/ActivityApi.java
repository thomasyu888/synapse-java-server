/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Activity;
import org.openapitools.model.PaginatedResultsOfReference;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "activity", description = "the activity API")
public interface ActivityApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /activity : Create a new Activity
     * Create a new provenenance Activity. If the passed Activity object contains a Used array, you must set the concreteType field of each Used subclass.  Access Control: READ access is granted to those users who can see a single Entity that was generated by this Activity. 
     *
     * @param body  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Create a new Activity", nickname = "createActivity", notes = "Create a new provenenance Activity. If the passed Activity object contains a Used array, you must set the concreteType field of each Used subclass.  Access Control: READ access is granted to those users who can see a single Entity that was generated by this Activity. ", response = Activity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Activity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = Activity.class) })
    @PostMapping(
        value = "/activity",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Activity> createActivity(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"used\" : [ { \"concreteType\" : \"...\", \"wasExecuted\" : true }, { \"concreteType\" : \"...\", \"wasExecuted\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /activity/{id} : Delete an Activity
     * Delete an Activity.   You must be the creator of the Activity to delete it. 
     *
     * @param id The id of an Activity. (required)
     * @param body  (optional)
     * @return The resource was deleted. (status code 204)
     */
    @ApiOperation(value = "Delete an Activity", nickname = "deleteActivity", notes = "Delete an Activity.   You must be the creator of the Activity to delete it. ", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Activity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource was deleted.") })
    @DeleteMapping(
        value = "/activity/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> deleteActivity(@ApiParam(value = "The id of an Activity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /activity/{id} : Get an existing Activity.
     * Get an existing Activity  Granted to those users who can see a single Entity that was generated by this Activity. 
     *
     * @param id The id of an Activity. (required)
     * @param body  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get an existing Activity.", nickname = "getActivity", notes = "Get an existing Activity  Granted to those users who can see a single Entity that was generated by this Activity. ", response = Activity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Activity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Activity.class) })
    @GetMapping(
        value = "/activity/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Activity> getActivity(@ApiParam(value = "The id of an Activity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"used\" : [ { \"concreteType\" : \"...\", \"wasExecuted\" : true }, { \"concreteType\" : \"...\", \"wasExecuted\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /activity/{id}/generated : Get the Entities that were generatedBy an Activity.
     * Get the Entities that were generatedBy an Activity. Returns a PaginatedResults of Reference objects.  This service will return References to all generatedBy Entities, regardless of whether you have access to resolve them into full Entity objects. 
     *
     * @param id The id of an Activity. (required)
     * @param limit Limit of query (optional, default to 10)
     * @param offset Offset of query (optional, default to 0)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the Entities that were generatedBy an Activity.", nickname = "getEntitiesGeneratedBy", notes = "Get the Entities that were generatedBy an Activity. Returns a PaginatedResults of Reference objects.  This service will return References to all generatedBy Entities, regardless of whether you have access to resolve them into full Entity objects. ", response = PaginatedResultsOfReference.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Activity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PaginatedResultsOfReference.class) })
    @GetMapping(
        value = "/activity/{id}/generated",
        produces = { "application/json" }
    )
    default ResponseEntity<PaginatedResultsOfReference> getEntitiesGeneratedBy(@ApiParam(value = "The id of an Activity.",required=true) @PathVariable("id") String id,@Min(10)@ApiParam(value = "Limit of query", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@Min(0)@ApiParam(value = "Offset of query", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"targetId\" : \"...\", \"targetVersionNumber\" : 12345 }, { \"targetId\" : \"...\", \"targetVersionNumber\" : 12345 } ], \"totalNumberOfResults\" : 12345 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /activity/{id} : Update an Activity.
     * Update an Activity   You must be the creator of the Activity to modify it. 
     *
     * @param id The id of an Activity. (required)
     * @param body  (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Update an Activity.", nickname = "updateActivity", notes = "Update an Activity   You must be the creator of the Activity to modify it. ", response = Activity.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Activity Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Activity.class) })
    @PutMapping(
        value = "/activity/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Activity> updateActivity(@ApiParam(value = "The id of an Activity.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Object body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdBy\" : \"...\", \"createdOn\" : \"...\", \"description\" : \"...\", \"etag\" : \"...\", \"id\" : \"...\", \"modifiedBy\" : \"...\", \"modifiedOn\" : \"...\", \"name\" : \"...\", \"used\" : [ { \"concreteType\" : \"...\", \"wasExecuted\" : true }, { \"concreteType\" : \"...\", \"wasExecuted\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
