/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AsyncJobId;
import org.openapitools.model.Doi;
import org.openapitools.model.DoiAssociation;
import org.openapitools.model.DoiRequest;
import org.openapitools.model.DoiResponse;
import org.openapitools.model.ObjectType;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-11T20:51:24.548366+08:00[Asia/Taipei]")
@Validated
@Api(value = "doi", description = "the doi API")
public interface DoiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /doi/async/get/{asyncToken} : Get the results of a call to POST /doi/async/start
     * Get the results of a call to POST /doi/async/start 
     *
     * @param asyncToken The async job token from the create/update call (required)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Get the results of a call to POST /doi/async/start", nickname = "getCreateOrUpdateDoiResults", notes = "Get the results of a call to POST /doi/async/start ", response = DoiResponse.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Doi Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DoiResponse.class) })
    @GetMapping(
        value = "/doi/async/get/{asyncToken}",
        produces = { "application/json" }
    )
    default ResponseEntity<DoiResponse> getCreateOrUpdateDoiResults(@ApiParam(value = "The async job token from the create/update call",required=true) @PathVariable("asyncToken") String asyncToken) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"concreteType\" : \"...\", \"doi\" : { \"associatedBy\" : \"...\", \"associatedOn\" : \"...\", \"associationId\" : \"...\", \"creators\" : [ { \"creatorName\" : \"...\", \"nameIdentifiers\" : [ { \"identifier\" : \"...\", \"nameIdentifierScheme\" : \"ORCID\" }, { \"identifier\" : \"...\", \"nameIdentifierScheme\" : \"ORCID\" } ] }, { \"creatorName\" : \"...\", \"nameIdentifiers\" : [ { \"identifier\" : \"...\", \"nameIdentifierScheme\" : \"ORCID\" } ] } ], \"doiUri\" : \"...\", \"doiUrl\" : \"...\", \"etag\" : \"...\", \"objectId\" : \"...\", \"objectType\" : \"FORM_GROUP\", \"objectVersion\" : 12345, \"publicationYear\" : 12345, \"resourceType\" : { \"resourceTypeGeneral\" : \"Sound\" }, \"titles\" : [ { \"title\" : \"...\" }, { \"title\" : \"...\" } ], \"updatedBy\" : \"...\", \"updatedOn\" : \"...\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /doi/association : Retrieves the DOI for the object.
     * Retrieves the DOI for the object. Note: this call only retrieves the DOI association, if it exists. To retrieve the metadata for the object, see &lt;a href&#x3D;\&quot;${GET.doi}\&quot;&gt;GET /doi&lt;/a&gt;&#39; 
     *
     * @param id The ID of the object to retrieve (required)
     * @param type The type of the object (required)
     * @param version The version number of the object (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieves the DOI for the object.", nickname = "getDoiAssociation", notes = "Retrieves the DOI for the object. Note: this call only retrieves the DOI association, if it exists. To retrieve the metadata for the object, see <a href=\"${GET.doi}\">GET /doi</a>' ", response = DoiAssociation.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Doi Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DoiAssociation.class) })
    @GetMapping(
        value = "/doi/association",
        produces = { "application/json" }
    )
    default ResponseEntity<DoiAssociation> getDoiAssociation(@NotNull @ApiParam(value = "The ID of the object to retrieve", required = true) @Valid @RequestParam(value = "id", required = true) String id,@NotNull @ApiParam(value = "The type of the object", required = true, allowableValues = "ENTITY, ENTITY_CONTAINER, PRINCIPAL, ACTIVITY, EVALUATION, EVALUATION_ROUND, SUBMISSION, EVALUATION_SUBMISSIONS, FILE, MESSAGE, WIKI, FAVORITE, ACCESS_REQUIREMENT, ACCESS_APPROVAL, TEAM, TABLE, ACCESS_CONTROL_LIST, PROJECT_SETTING, VERIFICATION_SUBMISSION, CERTIFIED_USER_PASSING_RECORD, FORUM, THREAD, REPLY, FORM_GROUP, ORGANIZATION, FORM_DATA, ENTITY_VIEW, USER_PROFILE, DATA_ACCESS_REQUEST, DATA_ACCESS_SUBMISSION, DATA_ACCESS_SUBMISSION_STATUS, MEMBERSHIP_INVITATION") @Valid @RequestParam(value = "type", required = true) ObjectType type,@ApiParam(value = "The version number of the object") @Valid @RequestParam(value = "version", required = false) Integer version) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"associatedBy\" : \"...\", \"associatedOn\" : \"...\", \"associationId\" : \"...\", \"doiUri\" : \"...\", \"doiUrl\" : \"...\", \"etag\" : \"...\", \"objectId\" : \"...\", \"objectType\" : \"WIKI\", \"objectVersion\" : 12345, \"updatedBy\" : \"...\", \"updatedOn\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /doi : Retrieves the DOI for the object and its associated DOI metadata.
     * Retrieves the DOI for the object and its associated DOI metadata. Note: this call calls an external API, which may impact performance To just retrieve the DOI association, see: &lt;a href&#x3D;\&quot;${GET.doi.association}\&quot;&gt;GET /doi/association&lt;/a&gt; 
     *
     * @param id The ID of the object to retrieve (required)
     * @param type The type of the object (required)
     * @param version The version number of the object (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieves the DOI for the object and its associated DOI metadata.", nickname = "getDoiV2", notes = "Retrieves the DOI for the object and its associated DOI metadata. Note: this call calls an external API, which may impact performance To just retrieve the DOI association, see: <a href=\"${GET.doi.association}\">GET /doi/association</a> ", response = Doi.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Doi Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Doi.class) })
    @GetMapping(
        value = "/doi",
        produces = { "application/json" }
    )
    default ResponseEntity<Doi> getDoiV2(@NotNull @ApiParam(value = "The ID of the object to retrieve", required = true) @Valid @RequestParam(value = "id", required = true) String id,@NotNull @ApiParam(value = "The type of the object", required = true, allowableValues = "ENTITY, ENTITY_CONTAINER, PRINCIPAL, ACTIVITY, EVALUATION, EVALUATION_ROUND, SUBMISSION, EVALUATION_SUBMISSIONS, FILE, MESSAGE, WIKI, FAVORITE, ACCESS_REQUIREMENT, ACCESS_APPROVAL, TEAM, TABLE, ACCESS_CONTROL_LIST, PROJECT_SETTING, VERIFICATION_SUBMISSION, CERTIFIED_USER_PASSING_RECORD, FORUM, THREAD, REPLY, FORM_GROUP, ORGANIZATION, FORM_DATA, ENTITY_VIEW, USER_PROFILE, DATA_ACCESS_REQUEST, DATA_ACCESS_SUBMISSION, DATA_ACCESS_SUBMISSION_STATUS, MEMBERSHIP_INVITATION") @Valid @RequestParam(value = "type", required = true) ObjectType type,@ApiParam(value = "The version number of the object") @Valid @RequestParam(value = "version", required = false) Integer version) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /doi/locate : Retrieves the Synapse web portal URL to the object entered.
     * Retrieves the Synapse web portal URL to the object entered. Note: This call does not check to see if the object exists in Synapse. 
     *
     * @param id The ID of the object to retrieve (required)
     * @param type The type of the object (required)
     * @param redirect Whether to return the URL or redirect to the URL (optional, default to true)
     * @param version The version number of the object (optional)
     * @return Success (status code 200)
     */
    @ApiOperation(value = "Retrieves the Synapse web portal URL to the object entered.", nickname = "locate", notes = "Retrieves the Synapse web portal URL to the object entered. Note: This call does not check to see if the object exists in Synapse. ", response = String.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Doi Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class) })
    @GetMapping(
        value = "/doi/locate",
        produces = { "application/json" }
    )
    default ResponseEntity<String> locate(@NotNull @ApiParam(value = "The ID of the object to retrieve", required = true) @Valid @RequestParam(value = "id", required = true) String id,@NotNull @ApiParam(value = "The type of the object", required = true, allowableValues = "ENTITY, ENTITY_CONTAINER, PRINCIPAL, ACTIVITY, EVALUATION, EVALUATION_ROUND, SUBMISSION, EVALUATION_SUBMISSIONS, FILE, MESSAGE, WIKI, FAVORITE, ACCESS_REQUIREMENT, ACCESS_APPROVAL, TEAM, TABLE, ACCESS_CONTROL_LIST, PROJECT_SETTING, VERIFICATION_SUBMISSION, CERTIFIED_USER_PASSING_RECORD, FORUM, THREAD, REPLY, FORM_GROUP, ORGANIZATION, FORM_DATA, ENTITY_VIEW, USER_PROFILE, DATA_ACCESS_REQUEST, DATA_ACCESS_SUBMISSION, DATA_ACCESS_SUBMISSION_STATUS, MEMBERSHIP_INVITATION") @Valid @RequestParam(value = "type", required = true) ObjectType type,@ApiParam(value = "Whether to return the URL or redirect to the URL", defaultValue = "true") @Valid @RequestParam(value = "redirect", required = false, defaultValue="true") Boolean redirect,@ApiParam(value = "The version number of the object") @Valid @RequestParam(value = "version", required = false) Integer version) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /doi/async/start : Asynchronously creates or updates a DOI in Synapse, with input metadata.
     * Asynchronously creates or updates a DOI in Synapse, with input metadata. Retrieve the results with &lt;a href&#x3D;\&quot;${GET.doi.async.get.asyncToken}\&quot;&gt;GET /doi/async/get/{asyncToken}&lt;/a&gt;. This call may fail if the external DataCite API is down. If the failure is recoverable, it will retry automatically.&#39; 
     *
     * @param doiRequest A request containing a DOI and its metadata to associate with a Synapse object  (optional)
     * @return Success (status code 201)
     */
    @ApiOperation(value = "Asynchronously creates or updates a DOI in Synapse, with input metadata.", nickname = "startCreateOrUpdateDoi", notes = "Asynchronously creates or updates a DOI in Synapse, with input metadata. Retrieve the results with <a href=\"${GET.doi.async.get.asyncToken}\">GET /doi/async/get/{asyncToken}</a>. This call may fail if the external DataCite API is down. If the failure is recoverable, it will retry automatically.' ", response = AsyncJobId.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Doi Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = AsyncJobId.class) })
    @PostMapping(
        value = "/doi/async/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AsyncJobId> startCreateOrUpdateDoi(@ApiParam(value = "A request containing a DOI and its metadata to associate with a Synapse object "  )  @Valid @RequestBody(required = false) DoiRequest doiRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
